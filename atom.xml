<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2016-11-21T13:44:33-08:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tuning the Go HTTP client library for load testing]]></title>
    <link href="http://tleyden.github.io/blog/2016/11/21/tuning-the-go-http-client-library-for-load-testing/"/>
    <updated>2016-11-21T10:37:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/11/21/tuning-the-go-http-client-library-for-load-testing</id>
    <content type="html"><![CDATA[<p>While working on a <a href="http://www.github.com/couchbaselabs/sgload">product-specific load testing tool</a> in Go, I ran into a situation where I was seeing tens of thousands of sockets in the <code>TIME_WAIT</code> state.</p>

<p>The fix involved tuning the golang http client settings.</p>

<h2>Steps to reproduce the problem</h2>

<p>Run the following code on a linux machine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>  "fmt"
</span><span class='line'>  "html"
</span><span class='line'>  "log"
</span><span class='line'>  "net/http"
</span><span class='line'>  "time"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>func startWebserver() {
</span><span class='line'>
</span><span class='line'>  http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
</span><span class='line'>
</span><span class='line'>      // Simulate some network latency
</span><span class='line'>      time.Sleep(time.Millisecond * 10)
</span><span class='line'>
</span><span class='line'>      fmt.Fprintf(w, "Hello, %q", html.EscapeString(r.URL.Path))
</span><span class='line'>  })
</span><span class='line'>
</span><span class='line'>  go http.ListenAndServe(":8080", nil)
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func startLoadTest() {
</span><span class='line'>  for {
</span><span class='line'>      func() {
</span><span class='line'>          resp, err := http.Get("http://localhost:8080/")
</span><span class='line'>          if err != nil {
</span><span class='line'>              panic(fmt.Sprintf("Got error: %v", err))
</span><span class='line'>          }
</span><span class='line'>          defer resp.Body.Close()
</span><span class='line'>          log.Printf("Made GET request")
</span><span class='line'>
</span><span class='line'>      }()
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func main() {
</span><span class='line'>
</span><span class='line'>  // start a webserver in a goroutine
</span><span class='line'>  startWebserver()
</span><span class='line'>
</span><span class='line'>  startLoadTest()
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>and in a separate terminal while the program is running, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>netstat -n | grep -i time_wait | wc -l</span></code></pre></td></tr></table></div></figure>


<p>and you will see this number constantly growing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@14952c2356a7:/# netstat -n | grep -i time_wait | wc -l
</span><span class='line'>166
</span><span class='line'>root@14952c2356a7:/# netstat -n | grep -i time_wait | wc -l
</span><span class='line'>231
</span><span class='line'>root@14952c2356a7:/# netstat -n | grep -i time_wait | wc -l
</span><span class='line'>293
</span><span class='line'>root@14952c2356a7:/# netstat -n | grep -i time_wait | wc -l
</span><span class='line'>349
</span><span class='line'>... </span></code></pre></td></tr></table></div></figure>


<h2>What is the socket <code>TIME_WAIT</code> state anyway?</h2>

<p>So what&rsquo;s going on here?  Your first reaction might be to think that we&rsquo;ve forgotten to close the sockets &mdash; but that&rsquo;s not the case.</p>

<p>What&rsquo;s happening is that we are creating lots of short lived TCP connections, and the Linux kernel networking stack is keeping tabs on the closed connections to prevent certain problems.</p>

<p>From <a href="http://www.isi.edu/touch/pubs/infocomm99/infocomm99-web/">The TIME-WAIT state in TCP and Its Effect on Busy Servers</a>:</p>

<blockquote><p>The purpose of TIME-WAIT is to prevent delayed packets from one connection being accepted by a later connection. Concurrent connections are isolated by other mechanisms, primarily by addresses, ports, and sequence numbers[1].</p></blockquote>

<h2>Why so many TIME_WAIT sockets?  What about connection re-use?</h2>

<p>By default, the Golang HTTP client will do connection pooling.  Rather than closing a socket connection after an HTTP request, it will add it to an idle connection pool, and if you try to make another HTTP request before the idle connection timeout (90 seconds by default), then it will re-use that existing connection rather than creating a new one.</p>

<p>This will keep the number of total socket connections low, as long as the pool doesn&rsquo;t fill up.  If the pool is full of established socket connections, then it will just create a new socket connection for the HTTP request and use that.</p>

<p>So how big is the connection pool?  A quick look into <a href="https://golang.org/src/net/http/transport.go">transport.go</a> tells us:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// DefaultTransport is the default implementation of Transport and is
</span><span class='line'>// used by DefaultClient. It establishes network connections as needed
</span><span class='line'>// and caches them for reuse by subsequent calls. It uses HTTP proxies
</span><span class='line'>// as directed by the $HTTP_PROXY and $NO_PROXY (or $http_proxy and
</span><span class='line'>// $no_proxy) environment variables.
</span><span class='line'>var DefaultTransport RoundTripper = &Transport{
</span><span class='line'>  Proxy: ProxyFromEnvironment,
</span><span class='line'>  DialContext: (&net.Dialer{
</span><span class='line'>      Timeout:   30 * time.Second,
</span><span class='line'>      KeepAlive: 30 * time.Second,
</span><span class='line'>  }).DialContext,
</span><span class='line'>  MaxIdleConns:          100,
</span><span class='line'>  IdleConnTimeout:       90 * time.Second,
</span><span class='line'>  TLSHandshakeTimeout:   10 * time.Second,
</span><span class='line'>  ExpectContinueTimeout: 1 * time.Second,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// DefaultMaxIdleConnsPerHost is the default value of Transport's
</span><span class='line'>// MaxIdleConnsPerHost.
</span><span class='line'>const DefaultMaxIdleConnsPerHost = 2</span></code></pre></td></tr></table></div></figure>


<p>The <code>MaxIdleConns: 100</code> setting sets the size of the connection pool to 100 connections, but <em>with one major caveat</em>.</p>

<p>Note the <code>DefaultMaxIdleConnsPerHost = 2</code> setting below it.  What this means is that even though the entire connection pool is set to 100, there is a <em>per-host</em> cap of only 2 connections!  If you are creating a lot of HTTP requests against a single host in a short amount of time, it&rsquo;s very likely this small pool of only 2 connections won&rsquo;t prevent you from having to open a lot of new short lived socket connections.</p>

<p>Once those short lived socket connections for the &ldquo;out-of-pool&rdquo; HTTP requests are closed, they will end up in the <code>TIME_WAIT</code> state.</p>

<h2>Tuning the http client to fix the issue</h2>

<p>The good news is that this is easily fixable!  If you create a create a custom http client and use that instead of the default http client, you can tweak the maximum idle connections per host.  For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// In order to fix issues observed in https://github.com/couchbaselabs/sgload/issues/23
</span><span class='line'>// bump up the max idle connections per host to 100
</span><span class='line'>tr := &http.Transport{
</span><span class='line'>        ... other default settings  
</span><span class='line'>  MaxIdleConns:          1000,
</span><span class='line'>  MaxIdleConnsPerHost:   100,
</span><span class='line'>  ... other default settings  
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>myClient = &http.Client{Transport: tr}
</span></code></pre></td></tr></table></div></figure>


<p>This bumps the total maximum idle connections (connection pool size) to 1000, and the per-host connection pool size to 100.</p>

<p>Depending on your actual usage, this should drop the number of connections that end up in the <code>TIME_WAIT</code> state to a dramatically lower number.  In my case it went from tens of thousands down to zero.</p>

<p>Unfortunately, when I tested those changes in the the above repro scenario, it didn&rsquo;t fix it!  I will update this blog post if I can figure out what the subtle difference between the scenarios.</p>

<h2>Open Questions</h2>

<ul>
<li>Best way to create a transport?</li>
</ul>


<p>I couldn&rsquo;t figure out the best way to create an <code>http.Transport</code> with all of the default settings <em>except</em> the <code>`MaxIdleConns</code> and <code>MaxIdleConnsPerHost</code>.  Any tips would be awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Couchbase Server + Mobile on Docker Cloud]]></title>
    <link href="http://tleyden.github.io/blog/2016/10/31/install-couchbase-server-plus-mobile-on-docker-cloud/"/>
    <updated>2016-10-31T16:28:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2016/10/31/install-couchbase-server-plus-mobile-on-docker-cloud</id>
    <content type="html"><![CDATA[<p>Deploy Couchbase Server and Sync Gateway on Docker Cloud behind a load balancer.</p>

<p>Also available as a <a href="https://www.youtube.com/watch?v=hPmSGGLJmw8&amp;feature=youtu.be">screencast</a></p>

<h2>Launch node cluster</h2>

<p>Launch a node cluster with the following settings:</p>

<ul>
<li>Provider: AWS</li>
<li>Region: us-east-1 (or whatever region makes sense for you)</li>
<li>VPC: Auto (if you don&rsquo;t choose auto, you will need to customize your security group)</li>
<li>Type/Size: m3.medium or greater</li>
<li>IAM Roles: None</li>
</ul>


<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_launch_nodecluster.png" alt="" /></p>

<h2>Create Couchbase Server service</h2>

<p>Go to <strong>Services</strong> and hit the <strong>Create</strong> button:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_service_create.png" alt="" /></p>

<p>Click the globe icon and <strong>Search Docker Hub</strong> for <code>couchbase/server</code>.  You should select the <code>couchbase/server</code> image:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_create_cbs_service.png" alt="" /></p>

<p>Hit the <strong>Select</strong> button and fill out the following values on the Services Wizard:</p>

<ul>
<li>Service Name: couchbaseserver</li>
<li>Containers: 2</li>
<li>Deployment strategy: High Availability</li>
<li>Autorestart: On failure</li>
<li>Network: bridge</li>
</ul>


<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_create_cbs_service2.png" alt="" /></p>

<p>In the Ports section: Enable <strong>published</strong> on each port and set the Node Port to match the Container Port</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_create_cbs_service3.png" alt="" /></p>

<p>Hit the <strong>Create and Deploy</strong> button.  After a few minutes, you should see the Couchbase Server vervice running:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_couchbase_server_running.png" alt="" /></p>

<h2>Configure Couchbase Server Container 1 + Create Buckets</h2>

<p>Go to the <strong>Container</strong> section and choose <strong>couchbaseserver-1</strong>.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_couchbase_container1.png" alt="" /></p>

<p>Copy and paste the domain name (<code>eca0fe88-7fee-446b-b006-99e8cae0dabf.node.dockerapp.io</code>) into your browser, adding 8091 at the end (<code>eca0fe88-7fee-446b-b006-99e8cae0dabf.node.dockerapp.io:8091</code>)</p>

<p>You should now see the Couchbase Server setup screen:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_couchbase_setup.png" alt="" /></p>

<p>You will need to find the <em>container IP</em> of Couchbase Server in order to configure it.  To do that, go to the <strong>Terminal</strong> section of <strong>Containers/couchbaseserver-1</strong>, and enter <code>ifconfig</code>.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_couchbase_container_terminal.png" alt="" /></p>

<p>Look for the <code>ethwe1</code> interface and make a note of the ip: <code>10.7.0.2</code> &mdash; you will need it in the next step.</p>

<p>Switch back to the browser on the Couchbase Server setup screen.  Leave the <strong>Start a new cluster</strong> button checked.  Enter the <code>10.7.0.2</code> ip address (or whatever was returned for your <code>ethwe1</code> interface) under the <strong>Hostname</strong> field.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_couchbase_server_hostname.png" alt="" /></p>

<p>and hit the <strong>Next</strong> button.</p>

<p>For the rest of the wizard, you can:</p>

<ul>
<li>skip adding the samples</li>
<li>skip adding the default bucket</li>
<li>uncheck <strong>Update Notifications</strong></li>
<li>leave Product Registration fields blank</li>
<li>check &ldquo;I agree ..&rdquo;</li>
<li>make sure to write down your password somewhere, otherwise you will be locked out of the web interface</li>
</ul>


<p>Create a new bucket for your application:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_create_bucket.png" alt="" /></p>

<h2>Configure Couchbase Server Container 2</h2>

<p>Go to the <strong>Container</strong> section and choose <strong>couchbaseserver-2</strong>.</p>

<p>As in the previous step, copy and paste the domain name (<code>4d8c7be0-3f47-471b-85df-d2471336af75.node.dockerapp.io</code>) into your browser, adding 8091 at the end (<code>4d8c7be0-3f47-471b-85df-d2471336af75.node.dockerapp.io:8091</code>)</p>

<p>Hit <strong>Setup</strong> and choose <strong>Join a cluster now</strong> with settings:</p>

<ul>
<li>IP Address: 10.7.0.2 (the IP address you setup the first Couchbase Server node with)</li>
<li>Username: Administrator (unless you used a different username in the previous step)</li>
<li>Password: enter the password you used in the previous step</li>
<li>Configure Server Hostname: 10.7.0.3 (you can double check this by going to the <strong>Terminal</strong> for <strong>Containers/couchbaseserver-2</strong> and running <code>ifconfig</code> and looking for the ip of the <code>ethwe1</code> interface)</li>
</ul>


<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_join_couchbase_cluster.png" alt="" /></p>

<p>Trigger a rebalance by hitting the <strong>Rebalance</strong> button:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_trigger_rebalance.png" alt="" /></p>

<h2>Sync Gateway Service</h2>

<p>Now create a Sync Gateway service.</p>

<p>Before going through the steps in the Docker Cloud web UI, you will need to have a Sync Gateway configuration somewhere on the publicly accessible internet.</p>

<p><em>Warning: This is not a secure solution!  Do not use any sensitive passwords if you follow these steps</em></p>

<p>To make it more secure, you could:</p>

<ul>
<li>Use a Volume mount and have Sync Gateway read the configuration from the container filesystem</li>
<li>Use a HTTPS + Basic Auth for the URL that hosts the Sync Gateway configuration</li>
</ul>


<p>Create a Sync Gateway configuration on a <a href="https://gist.github.com/tleyden/f260b2d9b2ef828fadfad462f0014aed">github gist</a> and get the <a href="https://gist.githubusercontent.com/tleyden/f260b2d9b2ef828fadfad462f0014aed/raw/8f544be6b265c0b57848b2ba36fb3e0f958ddcc9/gistfile1.txt">raw url</a> for the gist.</p>

<ul>
<li>Make sure to set the <code>server</code> value to <code>http://couchbaseserver:8091</code> so that it can connect to the Couchbase Service setup in a previous step.</li>
<li>Use the bucket created in the Couchbase Server setup step above</li>
</ul>


<p>In the Docker Cloud web UI, go to <strong>Services</strong> and hit the <strong>Create</strong> button again.</p>

<p>Click the globe icon and <strong>Search Docker Hub</strong> for <code>couchbase/sync-gateway</code>.  You should select the <code>couchbase/sync-gateway</code> image.</p>

<p>Hit the <strong>Select</strong> button and fill out the following values on the Services Wizard:</p>

<ul>
<li>Service Name: sync-gateway</li>
<li>Containers: 2</li>
<li>Deployment strategy: High Availability</li>
<li>Autorestart: On failure</li>
<li>Network: bridge</li>
</ul>


<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_sync_gateway_service.png" alt="" /></p>

<p>In the <strong>Container Configuration</strong> section, customize the <strong>Run Command</strong> to use the raw URL of your gist, eg: <code>https://gist.githubusercontent.com/tleyden/f260b2d9b2ef828fadfad462f0014aed/raw/8f544be6b265c0b57848</code></p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_configure_sg_service.png" alt="" /></p>

<p>In the <strong>Ports</strong> section, use the following values:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_configure_sg_service_ports.png" alt="" /></p>

<p>In the <strong>Links</strong> section, choose <strong>couchbaseserver</strong> and hit the <strong>Plus</strong> button</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_sg_service_links.png" alt="" /></p>

<p>Click the <strong>Create and Deploy</strong> button.</p>

<h2>Verify Sync Gateway</h2>

<p>Click the <strong>Containers</strong> section and you should have two Couchbase Server and two Sync Gateway containers running.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_cbs_sg_containers.png" alt="" /></p>

<p>Click the <strong>sync-gateway-1</strong> container and get the domain name (<code>eca0fe88-7fee-446b-b006-99e8cae0dabf.node.dockerapp.io</code>) and paste it in your browser with a trailing <code>:4984</code>, eg <code>eca0fe88-7fee-446b-b006-99e8cae0dabf.node.dockerapp.io:4984</code></p>

<p>You should see the following JSON response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>   "couchdb":"Welcome",
</span><span class='line'>   "vendor":{
</span><span class='line'>      "name":"Couchbase Sync Gateway",
</span><span class='line'>      "version":1.3
</span><span class='line'>   },
</span><span class='line'>   "version":"Couchbase Sync Gateway/1.3.1(16;f18e833)"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Setup Load Balancer</h2>

<p>Click the <strong>Services</strong> section and hit the <strong>Create</strong> button.  In the bottom right hand corner look for <strong>Proxies</strong> and choose <strong>dockercloud/haproxy</strong></p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_create_load_balancer_service1.png" alt="" /></p>

<p>General Settings:</p>

<ul>
<li>Service Name: sgloadbalancer</li>
<li>Containers: 1</li>
<li>Deployment Strategy: High Availability</li>
<li>Autorestart: Always</li>
<li>Network: Bridge</li>
</ul>


<p>Ports:</p>

<ul>
<li>Port 80 should be <strong>Published</strong> and the <strong>Node Port</strong> should be set to <code>80</code></li>
</ul>


<p>Links:</p>

<ul>
<li>Choose <strong>sync-gateway</strong> and hit the <strong>Plus</strong> button</li>
</ul>


<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_haproxy_ports_links.png" alt="" /></p>

<p>Hit the <strong>Create and Deploy</strong> button</p>

<h2>Verify Load Balancer</h2>

<p>Click the <strong>Containers</strong> section and choose <strong>sgloadbalancer-1</strong>.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_cloud_sgloadbalancer_container.png" alt="" /></p>

<p>Copy and paste the domain name (eg, <code>eca0fe88-7fee-446b-b006-99e8cae0dabf.node.dockerapp.io</code>) into your browser.</p>

<p>You should see the following JSON response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>   "couchdb":"Welcome",
</span><span class='line'>   "vendor":{
</span><span class='line'>      "name":"Couchbase Sync Gateway",
</span><span class='line'>      "version":1.3
</span><span class='line'>   },
</span><span class='line'>   "version":"Couchbase Sync Gateway/1.3.1(16;f18e833)"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Congratulations!  You have just setup a Couchbase Server + Sync Gateway cluster on Docker Cloud.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deep Dive of What Happens Under The Hood When You Open A Web Page]]></title>
    <link href="http://tleyden.github.io/blog/2016/10/02/deep-dive-of-what-happens-under-the-hood-when-you-open-a-web-page/"/>
    <updated>2016-10-02T12:50:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2016/10/02/deep-dive-of-what-happens-under-the-hood-when-you-open-a-web-page</id>
    <content type="html"><![CDATA[<p>This is a continuation of <a href="http://tleyden.github.io/blog/2016/09/30/the-lifecycle-of-an-http-request/">What Happens Under The Hood When You Open A Web Page</a>, and it&rsquo;s meant to be a deeper dive.</p>

<h3>Clients and Servers</h3>

<p>Remember back in the day when you wanted to know what time it was, and you picked up your phone and dialed 853-1212 and it said &ldquo;At the tone, the time will be 8:53 AM?&rdquo;.</p>

<p>Those days are over, but the idea lives on.  The time <em>service</em> is identical in principal to an internet <em>server</em>.  You ask it something, and it gives you an answer.</p>

<p>A well designed service does one thing, and one thing well.</p>

<ul>
<li><p>With the time service, you can only ask one kind of question: &ldquo;What time is it?&rdquo;</p></li>
<li><p>With a DNS server, you can only ask one kind of question: &ldquo;What is the IP address of organic-juice-for-dogs.io&rdquo;</p></li>
</ul>


<p>Clients vs Servers:</p>

<ul>
<li><p>A &ldquo;Client&rdquo; can essentially be thought of as being a &ldquo;Customer&rdquo;.  In the case of calling the time, it&rsquo;s the person dialing the phone number.  In the case of DNS, it&rsquo;s the Google Chrome browser asking for the IP address.</p></li>
<li><p>A &ldquo;Server&rdquo; can be thought of as being a &ldquo;Service&rdquo;.  In the case of calling the time, it&rsquo;s something running at the phone company.  In the case of DNS, it&rsquo;s a service run by a combination of universities, business, and governments.</p></li>
</ul>


<h2>Web Browsers</h2>

<p>The following programs are all web browsers, which are all technically HTTP Clients, meaning they are on the client end of the HTTP tube.</p>

<ul>
<li>Google Chrome</li>
<li>Safari</li>
<li>Firefox</li>
<li>Internet Explorer</li>
<li>Etc..</li>
</ul>


<p>What web browsers do:</p>

<ul>
<li>Lookup IP addresses from DNS servers over the DNS protocol (which in turn sits on top of the UDP protocol)</li>
<li>Retrieve web pages, images, and more from web servers over the HTTP protocol (which in turn sits on top of the TCP protocol)</li>
<li>Render HTML into formatted &ldquo;pages&rdquo;</li>
<li>Executes JavaScript code to add a level of dynamic behavior to web pages</li>
</ul>


<h2>Protocols</h2>

<p>In the previous post, there were a few &ldquo;protocols&rdquo; mentioned, like HTTP.</p>

<p>What are protocols really?</p>

<p><strong>Any protocol is something to make it possible for things that speak the same protocol to speak to each other over that protocol.</strong></p>

<p>A protocol is just a <em>language</em>, and just like everyone in English-speaking countries agree to speak English and can therefore intercommunicate without issues, many things on the internet agree to speak HTTP to each other.</p>

<p>Here&rsquo;s what a conversation looks like in the HTTP protocol:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP Client: GET /
</span><span class='line'>HTTP Server: &lt;html&gt;I'm a &lt;blink&gt;amazing&lt;/blink&gt; HTML web page!!&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>Almost everything that happens on the Internet looks something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                                                                                  
</span><span class='line'> ┌────────────────────┐                                         ┌────────────────────┐
</span><span class='line'> │                    │                                         │                    │
</span><span class='line'> │                    │                                         │                    │
</span><span class='line'> │                    │                                         │                    │
</span><span class='line'> │     Internet       ◀──────────────Protocol───────────────────▶    Internet        │
</span><span class='line'> │     Thing 1        │                                         │    Thing 2         │
</span><span class='line'> │                    │                                         │                    │
</span><span class='line'> │                    │                                         │                    │
</span><span class='line'> │                    │                                         │                    │
</span><span class='line'> └────────────────────┘                                         └────────────────────┘</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at a few protocols.</p>

<h3><strong>TCP</strong> and <strong>UDP</strong></h3>

<p>You can think of the internet as being made up of <em>tubes</em>.  Two very common types of tubes are:</p>

<ul>
<li>TCP (Transmission Control Protocol)</li>
<li>UDP (User Datagram Protocol)</li>
</ul>


<p>Here&rsquo;s what you might imagine an internet tube looking like:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/internet-tube.jpg" alt="image" /></p>

<h3><strong>IP</strong></h3>

<p>Really, you can think of TCP and UDP as internet tubes that are built from the same kind of concrete &mdash; and that concrete is called IP (Internet Protocol)</p>

<p>TCP <em>wraps</em> IP, in the sense that it is built on top of IP.  If you took a <em>slice</em> of a TCP internet tube, it would look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ┌───────────────────────────────────────────┐
</span><span class='line'> │   TCP - (Transmission Control Protocol)   │
</span><span class='line'> │                                           │
</span><span class='line'> │                                           │
</span><span class='line'> │       ┌──────────────────────────┐        │
</span><span class='line'> │       │ IP - (Internet Protocol) │        │
</span><span class='line'> │       │                          │        │
</span><span class='line'> │       │                          │        │
</span><span class='line'> │       │                          │        │
</span><span class='line'> │       └──────────────────────────┘        │
</span><span class='line'> │                                           │
</span><span class='line'> └───────────────────────────────────────────┘</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Ditto for UDP &mdash; it&rsquo;s also built on top of IP.  The slice of a UDP internet tube would look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ┌───────────────────────────────────────────┐
</span><span class='line'> │    UDP - (Universal Datagram Protocol)    │
</span><span class='line'> │                                           │
</span><span class='line'> │                                           │
</span><span class='line'> │       ┌──────────────────────────┐        │
</span><span class='line'> │       │ IP - (Internet Protocol) │        │
</span><span class='line'> │       │                          │        │
</span><span class='line'> │       │                          │        │
</span><span class='line'> │       │                          │        │
</span><span class='line'> │       └──────────────────────────┘        │
</span><span class='line'> │                                           │
</span><span class='line'> └───────────────────────────────────────────┘</span></code></pre></td></tr></table></div></figure>


<p>IP, or &ldquo;Internet Protocol&rdquo;, is fancy way of saying &ldquo;How machines on the Internet talk to each other&rdquo;, and <strong>IP addresses</strong> are their equivalent of phone numbers.</p>

<p>Why do we need two types of tubes built on top of IP?  They have different properties:</p>

<ul>
<li>TCP tubes are heavy weight, they take a long time to build, and a long time to tear down, but they are super reliable.</li>
<li>UDP tubes are light weight, and have no guarantees. They&rsquo;re like the <code>¯\_(ツ)_/¯</code> of internet tubes.  If you send something down a UDP internet tube, you actually have no idea whether it will make it down the tube or not.  It might seem useless, but it&rsquo;s not.  Pretty much all real time gaming, voice, and video transmissions go through UDP tubes.</li>
</ul>


<h2>HTTP tubes</h2>

<p>If you take a slice of an HTTP tube, it looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>┌───────────────────────────────────────────────────────────┐
</span><span class='line'>│           HTTP - (HyperText Transfer Protocol)            │
</span><span class='line'>│                                                           │
</span><span class='line'>│       ┌───────────────────────────────────────────┐       │
</span><span class='line'>│       │   TCP - (Transmission Control Protocol)   │       │
</span><span class='line'>│       │                                           │       │
</span><span class='line'>│       │        ┌──────────────────────────┐       │       │
</span><span class='line'>│       │        │ IP - (Internet Protocol) │       │       │
</span><span class='line'>│       │        │                          │       │       │
</span><span class='line'>│       │        └──────────────────────────┘       │       │
</span><span class='line'>│       │                                           │       │
</span><span class='line'>│       └───────────────────────────────────────────┘       │
</span><span class='line'>│                                                           │
</span><span class='line'>└───────────────────────────────────────────────────────────┘</span></code></pre></td></tr></table></div></figure>


<p>Because HTTP <em>sits on top of</em> TCP, which in turn <em>sits on top of</em> IP.</p>

<h3>DNS tubes</h3>

<p>DNS tubes are very similar to HTTP tubes, except they sit on top of UDP tubes.  Here&rsquo;s what a slice might look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>┌───────────────────────────────────────────────────────────┐
</span><span class='line'>│                DNS - (Domain Name Service)                │
</span><span class='line'>│                                                           │
</span><span class='line'>│       ┌───────────────────────────────────────────┐       │
</span><span class='line'>│       │    UDP - (Universal Datagram Protocol)    │       │
</span><span class='line'>│       │                                           │       │
</span><span class='line'>│       │        ┌──────────────────────────┐       │       │
</span><span class='line'>│       │        │ IP - (Internet Protocol) │       │       │
</span><span class='line'>│       │        │                          │       │       │
</span><span class='line'>│       │        └──────────────────────────┘       │       │
</span><span class='line'>│       │                                           │       │
</span><span class='line'>│       └───────────────────────────────────────────┘       │
</span><span class='line'>│                                                           │
</span><span class='line'>└───────────────────────────────────────────────────────────┘</span></code></pre></td></tr></table></div></figure>


<h2>Actually, internet tubes are more complicated</h2>

<p>So when your Google Chrome web browser gets a web page over an HTTP tube, it actually looks more like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                                             
</span><span class='line'>          ┌────────────────────┐             
</span><span class='line'>          │                    │             
</span><span class='line'>          │       Chrome       │             
</span><span class='line'>          │       Browser      │             
</span><span class='line'>          │                    │             
</span><span class='line'>          └─────────┬────▲─────┘             
</span><span class='line'>                    │    │                   
</span><span class='line'>                    │    │                   
</span><span class='line'>          ┌─────────▼────┴─────┐             
</span><span class='line'>          │                    │             
</span><span class='line'>          │   Some random      │             
</span><span class='line'>          │  computer in WA    │             
</span><span class='line'>          │                    │             
</span><span class='line'>          └─────────┬─────▲────┘             
</span><span class='line'>          ┌─────────▼─────┴────┐             
</span><span class='line'>          │                    │             
</span><span class='line'>          │   Some random      │             
</span><span class='line'>          │  computer in IL    │             
</span><span class='line'>          │                    │             
</span><span class='line'>          └────────┬───▲───────┘             
</span><span class='line'>          ┌────────▼───┴───────┐             
</span><span class='line'>          │                    │             
</span><span class='line'>          │   Some random      │             
</span><span class='line'>          │  computer in MA    │             
</span><span class='line'>          │                    │             
</span><span class='line'>          └──────────┬───▲─────┘             
</span><span class='line'>                     │   │                   
</span><span class='line'>                     │   │                   
</span><span class='line'>                     │   │                   
</span><span class='line'> Send me the HTML    │   │ &lt;html&gt;stuff&lt;/html&gt;
</span><span class='line'>                     │   │                   
</span><span class='line'>                     │   │                   
</span><span class='line'>                     │   │                   
</span><span class='line'>                     │   │                   
</span><span class='line'>          ┌──────────▼───┴─────┐             
</span><span class='line'>          │                    │             
</span><span class='line'>          │    HTTP Server     │             
</span><span class='line'>          │                    │             
</span><span class='line'>          └────────────────────┘</span></code></pre></td></tr></table></div></figure>


<p>Each of these random computers in between are called <em>routers</em>, and they basically shuttle traffic across the internet.  They make it possible that any two computers on the internet can communicate with each other, without having a direct connection.</p>

<p>If you&rsquo;re curious to know which computers are in the middle of your connection between you and another computer on the internet, you can run a nifty little utility called <code>traceroute</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ traceroute google.com
</span><span class='line'>traceroute to google.com (172.217.5.110), 64 hops max, 52 byte packets
</span><span class='line'> 1  dd-wrt (192.168.11.1)  1.605 ms  1.049 ms  0.953 ms
</span><span class='line'> 2  96.120.90.157 (96.120.90.157)  9.334 ms  8.796 ms  8.850 ms
</span><span class='line'> 3  te-0-7-0-18-sur03.oakland.ca.sfba.comcast.net (68.87.227.209)  9.744 ms  9.416 ms  9.120 ms
</span><span class='line'> 4  162.151.78.93 (162.151.78.93)  12.310 ms  11.559 ms  11.662 ms
</span><span class='line'> 5  be-33651-cr01.sunnyvale.ca.ibone.comcast.net (68.86.90.93)  11.276 ms  11.187 ms  12.426 ms
</span><span class='line'> 6  hu-0-13-0-1-pe02.529bryant.ca.ibone.comcast.net (68.86.84.14)  11.624 ms
</span><span class='line'>    hu-0-12-0-1-pe02.529bryant.ca.ibone.comcast.net (68.86.87.14)  11.637 ms
</span><span class='line'>    hu-0-13-0-0-pe02.529bryant.ca.ibone.comcast.net (68.86.86.94)  12.404 ms
</span><span class='line'> 7  as15169-3-c.529bryant.ca.ibone.comcast.net (23.30.206.102)  11.024 ms  11.498 ms  11.148 ms
</span><span class='line'> 8  108.170.243.1 (108.170.243.1)  11.037 ms
</span><span class='line'>    108.170.242.225 (108.170.242.225)  12.246 ms
</span><span class='line'>    108.170.243.1 (108.170.243.1)  11.482 ms</span></code></pre></td></tr></table></div></figure>


<p>So from my computer to the computer at google.com, it goes through all of those intermediate computers.  Some have DNS names, like <code>be-33651-cr01.sunnyvale.ca.ibone.comcast.net</code>, but some only have IP addresses, like <code>162.151.78.93</code></p>

<p>Any one of those computers could <em>sniff</em> the traffic going through the tubes (even the <strong>IP</strong> tubes that all the other ones sit on top of!).  That&rsquo;s one of the reasons you don&rsquo;t want to send your credit cards over the internet without using encryption.</p>

<h2>The End</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What happens under the hood when you open a web page?]]></title>
    <link href="http://tleyden.github.io/blog/2016/09/30/the-lifecycle-of-an-http-request/"/>
    <updated>2016-09-30T20:25:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2016/09/30/the-lifecycle-of-an-http-request</id>
    <content type="html"><![CDATA[<p>First, the bird&rsquo;s eye view:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                                                                        
</span><span class='line'>┌────┐                   ┌────────────────┐               ┌────────────────┐
</span><span class='line'>│You │                   │ Google Chrome  │               │    Internet    │
</span><span class='line'>└────┘                   └────────────────┘               └────────────────┘
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │    Show me the website for    │                                  │   
</span><span class='line'> │───organic-juice-for-dogs.io──▶│       1. Hey what's the IP of    │   
</span><span class='line'> │                               │─────organic-juice-for-dogs.io?──▶│   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │                               │◀───────────63.120.10.5───────────│   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │                               │        2. HTTP GET / to          │   
</span><span class='line'> │                               │───────────63.120.10.5───────────▶│   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │                               │     HTML Content for homepage    │   
</span><span class='line'> │                               │◀───────────────of ───────────────│   
</span><span class='line'> │                               │     organic-juice-for-dogs.io    │   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │         3. Render HTML into   │                                  │   
</span><span class='line'> │◀────────────a Web Page────────│                                  │   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │      Click stuff in Google    │                                  │   
</span><span class='line'> │─────────────Chrome───────────▶│                                  │   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> │         4. Execute JavaScript │                                  │   
</span><span class='line'> │◀─────────and update Web Page──┤                                  │   
</span><span class='line'> │                               │                                  │   
</span><span class='line'> ▼                               ▼                                  ▼</span></code></pre></td></tr></table></div></figure>


<p>It all starts with a DNS lookup.</p>

<h2>Step 1. The DNS Lookup</h2>

<p>Your Google Chrome software contacts a server on the Internet called a DNS server and asks it &ldquo;Hey what&rsquo;s the IP of organic-juice-for-dogs.io?&rdquo;.</p>

<p>DNS has an official sounding acronym, and for good reason, because it&rsquo;s a very authoritative and fundamental Internet service.</p>

<p>So what exactly is DNS useful for?</p>

<p><strong>It transforms Domain names into IP addresses</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                                                                               
</span><span class='line'> ┌────────────────────┐                                     ┌────────────────────┐
</span><span class='line'> │                    │      What's the IP address of       │                    │
</span><span class='line'> │                    │─────organic-juice-for-dogs.io?──────▶                    │
</span><span class='line'> │                    │                                     │                    │
</span><span class='line'> │       Chrome       │                                     │      DNS Server    │
</span><span class='line'> │       Browser      ◀───────────63.120.10.5───────────────│                    │
</span><span class='line'> │                    │                                     │                    │
</span><span class='line'> │                    │                                     │                    │
</span><span class='line'> │                    │                                     │                    │
</span><span class='line'> └────────────────────┘                                     └────────────────────┘
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>


<p>A <strong>Domain name</strong>, also referred to as a &ldquo;Dot com name&rdquo;, is an easy-to-remember word or group of words, so people don&rsquo;t have to memorize a list of meaningless numbers.  You could think of it like dialing <strong>1-800-FLOWERS</strong>, which is a lot easier to remember than <strong>1-800-901-1111</strong></p>

<p>The IP address <code>63.120.10.5</code> is just like a phone number.  If you are a human being and want to call someone, you might dial <code>415-555-1212</code>.  But if you&rsquo;re a thing on the internet and you want to talk to another thing on the internet, you instead dial the <strong>IP address</strong> <code>63.120.10.5</code> &mdash; same concept though.</p>

<p>So, that&rsquo;s DNS in a nutshell.  Not very complicated on the surface.</p>

<h2>Step 2. Contact the IP address and fetch the HTML over HTTP</h2>

<p>In this step, Google Chrome sends an <code>HTTP GET /</code> HTTP request to the HTTP Server software running on a computer somewhere on the Internet that has the IP address <code>63.120.10.5</code>.</p>

<p>You can think of the <code>GET /</code> as &ldquo;Get me the top-most web page from the website&rdquo;.  This is known as the <em>root</em> of the website, in contrast to things deeper into the website, like <code>GET /juices/oakland</code>, which might return a list of dog juice products local to Oakland, CA.  Since the <em>root</em> is a the top, that means the tree is actually upside down, and folks tend to think of websites as being structured as <em>inverted trees</em>.</p>

<p>The back-and-forth is going to look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'> ┌────────────────────┐                                         ┌────────────────────┐
</span><span class='line'> │                    │          What's the HTML for            │                    │
</span><span class='line'> │                    ├──────────http://63.120.10.5/?───────────▶                    │
</span><span class='line'> │                    │                                         │                    │
</span><span class='line'> │       Chrome       │                                         │    HTTP Server     │
</span><span class='line'> │       Browser      ◀──────────────&lt;html&gt;stuff&lt;/html&gt;─────────│                    │
</span><span class='line'> │                    │                                         │                    │
</span><span class='line'> │    HTTP CLIENT     │                                         │                    │
</span><span class='line'> │                    │                                         │                    │
</span><span class='line'> └────────────────────┘                                         └────────────────────┘
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>


<p>These things are speaking <strong>HTTP</strong> to each other.  What is HTTP?</p>

<p>You can think of things that communicate with each other over the internet as using <strong>tubes</strong>.  There are lots of different types of tubes, and in this case it&rsquo;s an HTTP tube.  As long as the software on both ends agree on the type of tube they&rsquo;re using, everything <em>just works</em> and they can send stuff back and forth.  HTTP is a really common type of tube, but it&rsquo;s not the only one &mdash; for example the DNS lookup in the previous step used a completely <em>different</em> type of tube.</p>

<p>Usually the stuff sent back from the HTTP Server is something called <strong>HTML</strong>, which stands for  <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage.</p>

<p>But HTML is not the only kind of stuff that can be sent through an HTTP tube.  In fact, JSON (Javascript Object Notation) and XML (eXtensible Markup Language) are also very common.  In fact there are tons of different types of things that can be sent through HTTP tubes.</p>

<p>So at this point in our walk through, the Google Chrome web browser software has some HTML text, and it needs to <em>render</em> it in order for it to appear on your screen in a nice easy to view format.  That&rsquo;s the next step.</p>

<h2>Step 3. Render HTML in a Web page</h2>

<p>HTML is technically a <em>markup language</em>, which means that the text contains <em>formatting directives</em> which has an agreed upon standard on how it should be formatted.  You can think of HTML as being similar to a Microsoft Word document, but MS Word is obfuscated while HTML is very transparent and simple:</p>

<p>For example, here is some HTML:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>   &lt;Header&gt;My first web page, circa, 1993!&lt;/Header&gt;
</span><span class='line'>   &lt;Paragraph&gt;
</span><span class='line'>        I am so proud to have made my very first web page, I &lt;blink&gt;Love&lt;/blink&gt; the World Wide Web
</span><span class='line'>   &lt;Paragraph&gt;
</span><span class='line'>   &lt;Footer&gt;Best Viewed on NCSA Mosaic&lt;/Footer&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>Which gets rendered into:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/my_first_webpage.jpg" alt="image" /></p>

<p>So, you&rsquo;ll notice that the <code>&lt;Header&gt;</code> element is in a larger font.  And the <code>&lt;Paragraph&gt;</code> has spaces in between it and the other text.</p>

<p>How does the Google Chrome Web Browser do the rendering?  It&rsquo;s just a piece of software, and rendering HTML is one of it&rsquo;s primary responsibilities.  There are tons of poor engineers at Google who do nothing all day but fix bugs in the Google Chrome rendering code.</p>

<p> Of course, there&rsquo;s a lot more to it, but that&rsquo;s the essence of rendering HTML into a web page.</p>

<h2>Step 4: Execute JavaScript in your Google Chrome Web Browser</h2>

<p>So this step is <em>optional</em> because not all web pages will execute JavaScript in your web browser software, however it&rsquo;s getting more and more common these days.  When you open the Gmail website in your browser, it&rsquo;s running tons of Javascript code to make the website as fast and responsive as possible.</p>

<p>Essentially, JavaScript adds another level of dynamic abilities to HTML, because when the browser is given HTML and it renders it .. that&rsquo;s it!  There&rsquo;s no more action, it just sits there &mdash; it&rsquo;s completely <em>inert</em>.</p>

<p>JavaScript, on the other hand, is basically a program-within-a-program.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                                                              
</span><span class='line'> ┌───────────────────────────────────────────────────────────────┐
</span><span class='line'> │                         Google Chrome                         │
</span><span class='line'> │           (A program written in C++ you downloaded)           │
</span><span class='line'> │                                                               │
</span><span class='line'> │                                                               │
</span><span class='line'> │      ┌──────────────────────────────────────────────────┐     │
</span><span class='line'> │      │                                                  │     │
</span><span class='line'> │      │                                                  │     │
</span><span class='line'> │      │     JavaScript for organic-juice-for-dogs.io     │     │
</span><span class='line'> │      │  (A program in JavaScript that snuck in via the  │     │
</span><span class='line'> │      │                  HTML document)                  │     │
</span><span class='line'> │      │                                                  │     │
</span><span class='line'> │      │                                                  │     │
</span><span class='line'> │      └──────────────────────────────────────────────────┘     │
</span><span class='line'> │                                                               │
</span><span class='line'> │                                                               │
</span><span class='line'> └───────────────────────────────────────────────────────────────┘</span></code></pre></td></tr></table></div></figure>


<p>How does the JavaScript get to the web browser?  It sneaks in over the HTML!  It&rsquo;s <em>embedded</em> in the HTML, since it&rsquo;s just another form of text, and your Web Browser (Google Chrome) executes it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>     &lt;Javascript&gt;
</span><span class='line'>          if (Paragraph == CLICKED) {
</span><span class='line'>              Window.Alert("YOU MAY BE INFECTED BY A VIRUS, CLICK HERE IMMEDIATELY")
</span><span class='line'>    }
</span><span class='line'>     &lt;/Javascript&gt;
</span><span class='line'>    ...
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>What can JavaScript do exactly?  The list is really, really long.  But as a simple example, if you click a button on a webpage:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/html_button.gif" alt="html button" /></p>

<p>A JavasScript program can pop up a little &ldquo;Alert Box&rdquo;, like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/javascript_alert.png" alt="javascript alert" /></p>

<h2>Done!</h2>

<p>And that&rsquo;s the World Wide Web!  You just went from typing a URL in your browser, from a shiny web page in your Google Chrome.  Soup to nuts.</p>

<p>And you can finally buy some juice for your dog!</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/doge_coin_hungry_dog.png" alt="dogecoin dog" /></p>

<p>So that&rsquo;s it for the high level stuff.</p>

<p>If you&rsquo;re dying to know more, continue on to <a href="http://tleyden.github.io/blog/2016/10/02/deep-dive-of-what-happens-under-the-hood-when-you-open-a-web-page/">Deep Dive of What Happens Under The Hood When You Open A Web Page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring InfluxDB and Grafana with Go client library]]></title>
    <link href="http://tleyden.github.io/blog/2016/09/12/configuring-influxdb-and-grafana-with-go-client-library/"/>
    <updated>2016-09-12T15:14:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2016/09/12/configuring-influxdb-and-grafana-with-go-client-library</id>
    <content type="html"><![CDATA[<p>Create a beautiful Grafana dashboard with realtime performance stats:</p>

<p><img src="https://cloud.githubusercontent.com/assets/296876/18493836/730085b0-79c7-11e6-9236-50dd3d4c72d4.png" alt="screen shot 2016-09-13 at 3 33 20 pm" /></p>

<h2>Install InfluxDB and Grafana</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install influxdb grafana telegraf
</span><span class='line'>brew services start influxdb
</span><span class='line'>brew services start grafana
</span><span class='line'>brew services start telegraf</span></code></pre></td></tr></table></div></figure>


<p>Versions at the time of this writing:</p>

<ul>
<li>InfluxDB: 1.0</li>
<li>Grafana: 3.1.1</li>
</ul>


<h2>Verify</h2>

<ul>
<li>The Grafana Web UI should be available at <a href="http://localhost:3000/">localhost:3000</a> &mdash; login with admin/admin</li>
<li>The InfluxDB Web UI should be available at <a href="http://localhost:8083/">localhost:8083</a></li>
</ul>


<h2>Create database on influx</h2>

<p>Create db named &ldquo;db&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ influx
</span><span class='line'>&gt; create database db</span></code></pre></td></tr></table></div></figure>


<h2>Edit telegraf conf</h2>

<p>Open <code>/usr/local/etc/telegraf.conf</code> in your favorite text editor and uncomment the entire statsd server section:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Statsd Server
</span><span class='line'>[[inputs.statsd]]
</span><span class='line'>  ## Address and port to host UDP listener on
</span><span class='line'>  service_address = ":8125"
</span><span class='line'>
</span><span class='line'>  .. etc .. </span></code></pre></td></tr></table></div></figure>


<p>Set the database to use the &ldquo;db&rdquo; database created earlier, under the <code>outputs.influxdb</code> section of the telegraf config</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[outputs.influxdb]]
</span><span class='line'>  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
</span><span class='line'>  ## Multiple urls can be specified as part of the same cluster,
</span><span class='line'>  ## this means that only ONE of the urls will be written to each interval.
</span><span class='line'>  # urls = ["udp://localhost:8089"] # UDP endpoint example
</span><span class='line'>  urls = ["http://localhost:8086"] # required
</span><span class='line'>  ## The target database for metrics (telegraf will create it if not exists).
</span><span class='line'>  database = "db" # required</span></code></pre></td></tr></table></div></figure>


<h2>Restart telegraf</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew services restart telegraf</span></code></pre></td></tr></table></div></figure>


<h2>Create Grafana Data Source</h2>

<ul>
<li>Open the <a href="http://localhost:3000/">Grafana Web UI</a> in your browsers (login with admin/admin)</li>
<li>Use the following values:</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494027/a87adcf8-79c8-11e6-912b-a5e5a82dad14.png" alt="screen shot 2016-09-13 at 3 39 43 pm" /></p>

<h2>Create Grafana Dashboard</h2>

<ul>
<li>Go to Dashboards / + New</li>
<li>Click the green thing on the left, and choose Add Panel / Graph</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494074/f230784e-79c8-11e6-9ab0-bc284b9e01f5.png" alt="screen shot 2016-09-13 at 3 43 50 pm" /></p>

<ul>
<li>Delete the test metric, which is not needed, by clicking the trash can to the right of &ldquo;Test Metric&rdquo;</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494109/1a927152-79c9-11e6-98f9-f338549ee3d9.png" alt="screen shot 2016-09-13 at 3 45 04 pm" /></p>

<ul>
<li>Under Panel / Datasource, choose <strong>db</strong>, and then hit <strong>+ Add Query</strong>, you will end up with this</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494180/7b8f9570-79c9-11e6-93c0-3f721d93002a.png" alt="screen shot 2016-09-13 at 3 47 21 pm" /></p>

<h2>Push sample data point from command line</h2>

<p>In order for the field we want to show up on the grafana dashboard, we need to push some data points to the telegraf statds daemon.</p>

<p>Run this in a shell to push the <code>foo:1|c</code> data point, which is a counter with value increasing by 1 on the key named &ldquo;foo&rdquo;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while true; do echo "foo:1|c" | nc -u -w0 127.0.0.1 8125; sleep 1; echo "pushed data point"; done</span></code></pre></td></tr></table></div></figure>


<h2>Create Grafana Dashboard, Part 2</h2>

<ul>
<li>Under <strong>select measurement</strong>, choose <strong>foo</strong> from the pulldown</li>
<li>On the top right of the screen near the clock icon, choose &ldquo;Last 5 minutes&rdquo; and set <strong>Refreshing every</strong> to 5 seconds</li>
<li>You should see your data point counter being increased!</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494256/f45fe55e-79c9-11e6-9663-abf9db7e7299.png" alt="screen shot 2016-09-13 at 3 51 16 pm" /></p>

<h2>Add Go client library and push data points</h2>

<p>Here&rsquo;s how to update to your <code>golang</code> application to push new datapoints.</p>

<ul>
<li>Install the <a href="github.com/peterbourgon/g2s">g2s</a> client library via:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get github.com/peterbourgon/g2s</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Here is some sample code to push data points to the <code>statds</code> telegraf process from your go program:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>statdsClient, err := g2s.Dial("udp", "http://localhost:8125")
</span><span class='line'>if err != nil {
</span><span class='line'>  panic("Couldn't connect to statsd!")
</span><span class='line'>}
</span><span class='line'>req, err := http.NewRequest("GET", "http://waynechain.com/")
</span><span class='line'>resp, err := http.DefaultClient.Do(req)
</span><span class='line'>if err != nil {
</span><span class='line'>  return err
</span><span class='line'>}
</span><span class='line'>s.StatsdClient.Timing(1.0, "open_website", time.Since(startTime))</span></code></pre></td></tr></table></div></figure>


<p>This will push statsd &ldquo;timing&rdquo; data points under the key &ldquo;open_website&rdquo;, with the normal sample rate (set to 0.1 to downsample and only take every 10th sample).  Run the code in a loop and it will start pushing stats to <code>statsd</code>.</p>

<p>Now, create a new Grafana dashboard with the steps above, but from the <strong>select measurement</strong> field choose <strong>open_website</strong>, and under <strong>SELECT</strong> choose <strong>field (mean)</strong> instead of <strong>field (value)</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go race detector gotcha with value receivers]]></title>
    <link href="http://tleyden.github.io/blog/2016/05/19/go-race-detector-gotcha-with-value-receivers/"/>
    <updated>2016-05-19T23:06:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2016/05/19/go-race-detector-gotcha-with-value-receivers</id>
    <content type="html"><![CDATA[<p>I ran into the following race detector error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WARNING: DATA RACE
</span><span class='line'>Write by goroutine 44:
</span><span class='line'>  github.com/couchbaselabs/sg-replicate.stateFnActiveFetchCheckpoint()
</span><span class='line'>      /Users/tleyden/Development/gocode/src/github.com/couchbaselabs/sg-replicate/replication_state.go:53 +0xb1d
</span><span class='line'>  github.com/couchbaselabs/sg-replicate.(*Replication).processEvents()
</span><span class='line'>      /Users/tleyden/Development/gocode/src/github.com/couchbaselabs/sg-replicate/synctube.go:120 +0xa3
</span><span class='line'>
</span><span class='line'>Previous read by goroutine 27:
</span><span class='line'>  github.com/couchbaselabs/sg-replicate.(*Replication).GetStats()
</span><span class='line'>      &lt;autogenerated&gt;:24 +0xef
</span><span class='line'>  github.com/couchbase/sync_gateway/base.(*Replicator).populateActiveTaskFromReplication()
</span><span class='line'>      /Users/tleyden/Development/gocode/src/github.com/couchbase/sync_gateway/base/replicator.go:241 +0x145</span></code></pre></td></tr></table></div></figure>


<p>Goroutine 44 was running this code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func (r *Replication) shutdownEventChannel() {
</span><span class='line'>  r.EventChan = nil
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>and nil&#8217;ing out the r.EventChan field.</p>

<p>While goroutine 27 was calling this code on the same <code>*Replication</code> instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func (r Replication) GetStats() ReplicationStats {
</span><span class='line'>  return r.Stats
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>It didn&rsquo;t make sense, because they were accessing different fields of the <code>Replication</code> &mdash; one was writing to <code>r.EventChan</code> while the other was reading from <code>r.Stats</code>.</p>

<p>Then I changed the <code>GetStats()</code> method to this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func (r Replication) GetStats() ReplicationStats {
</span><span class='line'>  return ReplicationStats{}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>and it still failed!</p>

<p>I started wandering around the Couchbase office looking for help, and got <a href="https://twitter.com/steveyentweets">Steve Yen</a> to help me.</p>

<p>He was asking me about using a pointer receiver vs a value receiver here, and then we realized that by using a value reciever it was <em>copying</em> all the fields, and therefore <strong>reading</strong> all of the fields, including the <code>r.EventChan</code> field that the other goroutine was concurrently writing to!  Hence, the data race that was subtly caused by using a value receiver..</p>

<p>The fix was to convert this over to a pointer reciever, and the data race disappeared!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func (r *Replication) GetStats() ReplicationStats {
</span><span class='line'>     return r.Stats
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a self-hosted drone.io CI server]]></title>
    <link href="http://tleyden.github.io/blog/2016/02/15/setting-up-a-self-hosted-drone-dot-io-ci-server/"/>
    <updated>2016-02-15T19:37:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/02/15/setting-up-a-self-hosted-drone-dot-io-ci-server</id>
    <content type="html"><![CDATA[<h2>Spin up AWS server</h2>

<ul>
<li>Ubuntu Server 14.04 LTS (HVM), SSD Volume Type &ndash; ami-fce3c696</li>
<li>m3.medium</li>
<li>250MB magnetic storage</li>
</ul>


<h2>Install docker</h2>

<p><code>ssh ubuntu@&lt;aws-instance&gt;</code> and <a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/">install docker</a></p>

<h2>Register github application</h2>

<p>Go to github and <a href="https://github.com/settings/applications/new">register</a> a new OAuth application using the following values:</p>

<ul>
<li><strong>Application name</strong> Couchbase Mobile Drone CI</li>
<li><strong>Homepage URL</strong> <a href="http://ec2-54-163-185-45.compute-1.amazonaws.com">http://ec2-54-163-185-45.compute-1.amazonaws.com</a></li>
<li><strong>Application description</strong> Couchbase Mobile Drone CI</li>
<li><strong>Authorization callback URL</strong> <a href="http://ec2-54-163-185-45.compute-1.amazonaws.com/authorize">http://ec2-54-163-185-45.compute-1.amazonaws.com/authorize</a></li>
</ul>


<p>It will give you a <strong>Client ID</strong> and <strong>Client Secret</strong></p>

<h2>Create <code>/etc/drone/dronerc</code> config file</h2>

<p>On the ubuntu host:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mkdir /etc/drone
</span><span class='line'>$ emacs /etc/drone/dronerc</span></code></pre></td></tr></table></div></figure>


<p><strong>Configure Remote Driver</strong></p>

<p>Add these values:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>REMOTE_DRIVER=github
</span><span class='line'>REMOTE_CONFIG=https://github.com?client_id=${client_id}&client_secret=${client_secret}</span></code></pre></td></tr></table></div></figure>


<p>and replace <code>client_id</code> and <code>client_secret</code> with the values returned from github.</p>

<p><strong>Configure Database</strong></p>

<p>Add these values:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DATABASE_DRIVER=sqlite3
</span><span class='line'>DATABASE_CONFIG=/var/lib/drone/drone.sqlite</span></code></pre></td></tr></table></div></figure>


<h2>Run Docker container</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo docker run \
</span><span class='line'>  --volume /var/lib/drone:/var/lib/drone \
</span><span class='line'>  --volume /var/run/docker.sock:/var/run/docker.sock \
</span><span class='line'>  --env-file /etc/drone/dronerc \
</span><span class='line'>  --restart=always \
</span><span class='line'>  --publish=80:8000 \
</span><span class='line'>  --detach=true \
</span><span class='line'>  --name=drone \
</span><span class='line'>  drone/drone:0.4</span></code></pre></td></tr></table></div></figure>


<p>Check the logs via <code>docker logs &lt;container-id&gt;</code> and they should look something like <a href="https://gist.github.com/tleyden/db0a894c30b4811a5deb">this</a></p>

<h2>Edit AWS security group</h2>

<p>With your instance selected, look for the security groups in the instance details:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_setup_security_group.png" alt="screenshot" /></p>

<p>Add a new inbound port with the following settings:</p>

<ul>
<li><strong>Protocol</strong> TCP</li>
<li><strong>Port Range</strong> 80</li>
<li><strong>Source</strong> 0.0.0.0</li>
</ul>


<p>It should look like this when you&rsquo;re done:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_setup_security_group2.png" alt="screenshot" /></p>

<h2>Verify it&rsquo;s running</h2>

<p>Paste the hostname of your aws instance into your browser (eg, <code>http://ec2-54-163-185-45.compute-1.amazonaws.com</code>), and you should see a page like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_login_screen.png" alt="screenshot" /></p>

<h2>Login</h2>

<p>If you click the login button, you should see:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_github_authorize.png" alt="screenshot" /></p>

<p>And then:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_post_github_login.png" alt="screenshot" /></p>

<h2>Activate a repository</h2>

<p>Click one of the repositories you have access to, and you should get an &ldquo;activate now&rdquo; option:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_activate_now.png" alt="screenshot" /></p>

<p>which will take you to your project home screen:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_project_home.png" alt="screenshot" /></p>

<h2>Add a <code>.drone.yml</code> file to the root of the repository</h2>

<p>In the repository you have chosen (in my case I&rsquo;m using <code>tleyden/sync_gateway</code>, which is a golang project, and may refer to it later), add a <code>.drone.yml</code> file to the root of the repository with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>build:
</span><span class='line'>  image: golang
</span><span class='line'>  commands:
</span><span class='line'>    - go get
</span><span class='line'>    - go build
</span><span class='line'>    - go test</span></code></pre></td></tr></table></div></figure>


<p>Commit your change, but do not push to github yet, that will be in the next step.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .drone.yml
</span><span class='line'>$ git commit -m "Add drone.yml"</span></code></pre></td></tr></table></div></figure>


<h2>Kickoff a build</h2>

<p>Now push your change up to github.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin master</span></code></pre></td></tr></table></div></figure>


<p>and in your drone UI you should see a build in progress:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_build_running.png" alt="screenshot" /></p>

<p>when it finishes, you&rsquo;ll see either a pass or a failure.  If you get a failure (which I did), it will look like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_build_failure.png" alt="screenshot" /></p>

<h2>Manually triggering another build</h2>

<p>In my case, the above failure was due to a dependency not building.  Since nothing else needs to be pushed to the repo to fix the build, I&rsquo;m just going to manually trigger a build.</p>

<p>On the build failure screen above, there is a <strong>Restart</strong> button, which triggers a new build.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_build_success.png" alt="screenshot" /></p>

<p>Now it works!</p>

<h2>Setup the Drone CLI</h2>

<p>I could run this on my OSX workstation, but I decided to run this on a linux docker container.  The rest of the steps assume you have spun up and are inside a linux docker container.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://downloads.drone.io/drone-cli/drone_linux_amd64.tar.gz | tar zx
</span><span class='line'>$ install -t /usr/local/bin drone</span></code></pre></td></tr></table></div></figure>


<p>Go to your Profile page in the drone UI, and click <strong>Show Token</strong>.</p>

<p>Now set these environment variables</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export DRONE_SERVER=http://ec2-54-163-185-45.compute-1.amazonaws.com
</span><span class='line'>$ export DRONE_TOKEN=eyJhbGci...</span></code></pre></td></tr></table></div></figure>


<p><strong>Query repos</strong></p>

<p>To test the CLI tool works, try the following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># drone repo ls
</span><span class='line'>couchbase/sync_gateway
</span><span class='line'>tleyden/sync_gateway
</span><span class='line'># drone repo info tleyden/sync_gateway
</span><span class='line'>tleyden/sync_gateway</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding vendoring to a Go project]]></title>
    <link href="http://tleyden.github.io/blog/2016/02/08/adding-vendoring-to-a-go-project/"/>
    <updated>2016-02-08T22:49:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/02/08/adding-vendoring-to-a-go-project</id>
    <content type="html"><![CDATA[<h2>Install gvt</h2>

<p>After doing some research, I decided to try <code>gvt</code> since it seemed simple and well documented, and integrated well with exiting tools like <code>go get</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export GO15VENDOREXPERIMENT=1
</span><span class='line'>$ go get -u github.com/FiloSottile/gvt</span></code></pre></td></tr></table></div></figure>


<h2>Go get target project to be updated</h2>

<p>I&rsquo;m going to update <a href="https://github.com/tleyden/todolite-appserver">todolite-appserver</a> to use vendored dependencies for <em>some</em> of it&rsquo;s dependencies, just to see how things go.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get -u github.com/tleyden/todolite-appserver</span></code></pre></td></tr></table></div></figure>


<h2>Vendor dependencies</h2>

<p>I&rsquo;m going to vendor the dependency on <a href="github.com/alecthomas/kingpin">kingpin</a> since it has transitive dependencies of it&rsquo;s own (github.com/alecthomas/units, etc).  <code>gvt</code> handles this by automatically pulling all of the transitive dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gvt fetch github.com/alecthomas/kingpin</span></code></pre></td></tr></table></div></figure>


<p>Now my directory structure looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── main.go
</span><span class='line'>└── vendor
</span><span class='line'>    ├── github.com
</span><span class='line'>    │   └── alecthomas
</span><span class='line'>    ├── gopkg.in
</span><span class='line'>    │   └── alecthomas
</span><span class='line'>    └── manifest</span></code></pre></td></tr></table></div></figure>


<p>Here is the <a href="https://gist.github.com/tleyden/60328c7e0fd778970314">manifest</a></p>

<p><code>gvt list</code> shows the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$  gvt list
</span><span class='line'>github.com/alecthomas/kingpin  https://github.com/alecthomas/kingpin  master 46aba6af542541c54c5b7a71a9dfe8f2ab95b93a
</span><span class='line'>github.com/alecthomas/template https://github.com/alecthomas/template master 14fd436dd20c3cc65242a9f396b61bfc8a3926fc
</span><span class='line'>github.com/alecthomas/units    https://github.com/alecthomas/units    master 2efee857e7cfd4f3d0138cc3cbb1b4966962b93a
</span><span class='line'>gopkg.in/alecthomas/kingpin.v2 https://gopkg.in/alecthomas/kingpin.v2 master 24b74030480f0aa98802b51ff4622a7eb09dfddd</span></code></pre></td></tr></table></div></figure>


<h2>Verify it&rsquo;s using the vendor folder</h2>

<p>I opened up the <code>vendor/github.com/alecthomas/kingpin/global.go</code> and made the following change:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Errorf prints an error message to stderr.
</span><span class='line'>func Errorf(format string, args ...interface{}) {
</span><span class='line'>  fmt.Println("CALLED IT!!")
</span><span class='line'>  CommandLine.Errorf(format, args...)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now verify that code is getting compiled and run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go run main.go changesfollower
</span><span class='line'>CALLED IT!!
</span><span class='line'>main: error: URL is empty</span></code></pre></td></tr></table></div></figure>


<p>(note: <code>export GO15VENDOREXPERIMENT=1</code> is still in effect in my shell)</p>

<h2>Restore the dependency</h2>

<p>Before I check in the <code>vendor</code> directory to git, I want to reset it to it&rsquo;s previous state before I made the above change to the <code>global.go</code> source file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gvt restore</span></code></pre></td></tr></table></div></figure>


<p>Now if I open <code>global.go</code> again, it&rsquo;s back to it&rsquo;s original state.  Nice!</p>

<h2>Add the vendor folder and push</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add vendor
</span><span class='line'>$ git commit -m "..."
</span><span class='line'>$ git push origin master</span></code></pre></td></tr></table></div></figure>


<p>Also, I updated the README to tell users to set the <code>GO15VENDOREXPERIMENT=1</code> variable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export GO15VENDOREXPERIMENT=1
</span><span class='line'>$ go get -u github.com/tleyden/todolite-appserver
</span><span class='line'>$ todolite-appserver --help</span></code></pre></td></tr></table></div></figure>


<p>but the instructions otherwise remained the same.  If someone tries to use this but forgets to set <code>GO15VENDOREXPERIMENT=1</code> in Go 1.5, it will still work, it will just use the kingpin dependency in the <code>$GOPATH</code> rather than the <code>vendor/</code> directory.  Ditto for someone using go 1.4 or earlier.</p>

<h2>Removing a vendored dependency</h2>

<p>As it turns out, I don&rsquo;t even need kingpin in this project, since I&rsquo;m using <a href="https://github.com/spf13/cobra">cobra</a>.  The kingpin dependency was caused by some leftover code I forgot to cleanup.</p>

<p>To remove it, I ran:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gvt delete github.com/alecthomas/kingpin
</span><span class='line'>$ gvt delete github.com/alecthomas/template
</span><span class='line'>$ gvt delete github.com/alecthomas/units
</span><span class='line'>$ gvt delete gopkg.in/alecthomas/kingpin.v2</span></code></pre></td></tr></table></div></figure>


<p>In this case, since it was my only dependency, it was easy to identify the transitive dependencies.  In general though it looks like it&rsquo;s up to you as a user to track down which ones to remove.  I filed <a href="https://github.com/FiloSottile/gvt/issues/16">gvt issue 16</a> to hopefully address that.</p>

<h2>Editor annoyances</h2>

<p>I have emacs setup using the <a href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/">steps in this blog post</a>, and I&rsquo;m running into the following annoyances:</p>

<ul>
<li>When I use <code>godef</code> to jump into the code of vendored dependency, it takes me to source code that lives in the <code>GOPATH</code>, which might be <em>different</em> than what&rsquo;s under <code>vendor/</code>.  Also, if I edit it there, my changes won&rsquo;t be reflected when I rebuild.</li>
<li>I usually search for things in the project via <code>M-x rgrep</code>, but now it&rsquo;s searching through every repo under <code>vendor/</code> and returning things I&rsquo;m not interested in .. since most of the time I only want to search within my project.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go Editor From Scratch Part 3]]></title>
    <link href="http://tleyden.github.io/blog/2016/02/07/configure-emacs-as-a-go-editor-from-scratch-part-3/"/>
    <updated>2016-02-07T04:25:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/02/07/configure-emacs-as-a-go-editor-from-scratch-part-3</id>
    <content type="html"><![CDATA[<p>This is a continuation from <a href="http://tleyden.github.io/blog/2014/05/27/configure-emacs-as-a-go-editor-from-scratch-part-2/">a previous blog post</a>.  In this post I&rsquo;m going to focus on making emacs look a bit better.</p>

<p>Currently:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs_ugly.png" alt="screenshot" /></p>

<h2>Install a nicer theme</h2>

<p>I like the <code>taming-mr-arneson-theme</code>, so let&rsquo;s install that one.  Feel free to browse the emacs themes and find one that you like more.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ `mkdir ~/.emacs.d/color-themes`
</span><span class='line'>$ `wget https://raw.githubusercontent.com/emacs-jp/replace-colorthemes/d23b086141019c76ea81881bda00fb385f795048/taming-mr-arneson-theme.el`</span></code></pre></td></tr></table></div></figure>


<p>Update your <code>~/emacs.d/init.el</code> to add the following lines to the top of the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-to-list 'custom-theme-load-path "/Users/tleyden/.emacs.d/color-themes/")
</span><span class='line'>(load-theme 'taming-mr-arneson t)</span></code></pre></td></tr></table></div></figure>


<p>Now when you restart emacs it should look like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs_taming_mr_arneson.png" alt="screenshot" /></p>

<p> ## Directory Tree</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/DevLibraries
</span><span class='line'>$ git clone https://github.com/jaypei/emacs-neotree.git neotree</span></code></pre></td></tr></table></div></figure>


<p>Update your <code>~/emacs.d/init.el</code> to add the following lines:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-to-list 'load-path "/some/path/neotree")
</span><span class='line'>(require 'neotree)</span></code></pre></td></tr></table></div></figure>


<p>Open a <code>.go</code> file and the enter <code>M-x neotree-dir</code> to show a directory browser:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs-neotree.png" alt="screnshot" /></p>

<p>Ref: <a href="http://www.emacswiki.org/emacs/NeoTree">NeoTree</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress under Docker]]></title>
    <link href="http://tleyden.github.io/blog/2016/02/06/octopress-under-docker/"/>
    <updated>2016-02-06T05:38:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/02/06/octopress-under-docker</id>
    <content type="html"><![CDATA[<p>I&rsquo;m setting up a clean install of El Capitan, and want to get my Octopress blog going.  However, I don&rsquo;t want to install it <em>directly</em> on my OSX workstation &mdash; I want to have it <em>contained</em> in a docker container.</p>

<h2>Install Docker</h2>

<p>That&rsquo;s beyond the scope of this blog post, but what I ended up doing on my new OSX installation was to:</p>

<ul>
<li>Install VirtualBox 5.0.14</li>
<li>Install <a href="https://www.docker.com/products/docker-toolbox">docker toolbox</a></li>
</ul>


<h2>Run tleyden5iwx/octopress</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -itd -v ~/Documents/blog/:/blog tleyden5iwx/octopress /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s in <code>~/Documents/blog/</code>?  Basically, the octopress instance I&rsquo;d setup as described in <a href="http://tleyden.github.io/blog/2013/09/07/octopress-setup-part-i/">Octopress Setup Part I</a>.</p>

<h2>Bundle install</h2>

<p>From inside the docker container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd /blog/octopress
</span><span class='line'># bundle install</span></code></pre></td></tr></table></div></figure>


<h2>Edit a blog post</h2>

<p>On OSX, open up <code>~/Documents/blog/source/_posts/path-to-post</code> and make some minor edits</p>

<h2>Push source</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># git push origin source
</span><span class='line'>Username for 'https://github.com': [enter your username]
</span><span class='line'>Password for 'https://username@github.com': [enter your password]</span></code></pre></td></tr></table></div></figure>


<h2>Generate and push to master</h2>

<p><strong>Attempt 1</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># rake generate
</span><span class='line'>rake aborted!
</span><span class='line'>Gem::LoadError: You have already activated rake 10.4.2, but your Gemfile requires rake 0.9.6. Using bundle exec may solve this.
</span><span class='line'>/blog/octopress/Rakefile:2:in `&lt;top (required)&gt;'
</span><span class='line'>(See full trace by running task with --trace) </span></code></pre></td></tr></table></div></figure>


<p>I have no idea why this is happening, but I just conceded defeat against these ruby weirdisms, wished I was using Go (and thought about converting my blog to Hugo), and took their advice and prefixed every command thereafter with <code>bundle exec</code>.</p>

<p><strong>Attempt 2</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># bundle exec rake generate && bundle exec rake deploy
</span><span class='line'>Username for 'https://github.com': [enter your username]
</span><span class='line'>Password for 'https://username@github.com': [enter your password]</span></code></pre></td></tr></table></div></figure>


<p>Success!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Uniqush with APNS]]></title>
    <link href="http://tleyden.github.io/blog/2016/02/03/setting-up-uniqush-with-apns/"/>
    <updated>2016-02-03T08:47:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/02/03/setting-up-uniqush-with-apns</id>
    <content type="html"><![CDATA[<p>This walks you through running <a href="http://uniqush.org/index.html">Uniqush</a> in the cloud (under Docker) and setting up an iOS app to receive messages via APNS (Apple Push Notification Service).</p>

<h2>Run Uniqush under Docker</h2>

<h3>Install Docker components</h3>

<ul>
<li><a href="https://docs.docker.com/v1.8/installation/mac/">Install docker</a></li>
<li><a href="https://docs.docker.com/compose/install/">Install docker-compose</a></li>
</ul>


<h3>Config</h3>

<ul>
<li><code>mkdir -p volumes/uniqush</code></li>
<li><code>wget https://git.io/vgSYM -O volumes/uniqush/uniqush-push.conf</code></li>
</ul>


<p>Security note: the above config has Uniqush listening on all interfaces, but depending on your setup you probably want to change that to <code>localhost</code> or something more restrictive.</p>

<h3>Docker compose file</h3>

<p>Copy and paste this content into <code>docker-compose.yml</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>version: '2'
</span><span class='line'>
</span><span class='line'>services:
</span><span class='line'>  uniqush:
</span><span class='line'>    container_name: uniqush
</span><span class='line'>    ports:
</span><span class='line'>      - "9898:9898"
</span><span class='line'>    image: tleyden5iwx/uniqush
</span><span class='line'>    entrypoint: uniqush-push
</span><span class='line'>    links:
</span><span class='line'>      - redis
</span><span class='line'>    volumes:
</span><span class='line'>      - ~/docker/volumes/uniqush/uniqush-push.conf:/etc/uniqush/uniqush-push.conf
</span><span class='line'>  redis:
</span><span class='line'>    container_name: redis
</span><span class='line'>    image: redis
</span></code></pre></td></tr></table></div></figure>


<h3>Start docker containers</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker compose up -d</span></code></pre></td></tr></table></div></figure>


<h3>Verify Uniqush is running</h3>

<p>Run this <code>curl</code> command outside of the docker container to verify that Uniqush is responding to HTTP requests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl localhost:9898/version
</span><span class='line'>uniqush-push 1.5.2</span></code></pre></td></tr></table></div></figure>


<h2>Create APNS certificate</h2>

<p>In my case, I already had an app id for my app (<code>com.couchbase.todolite</code>), but push notifications are not enabled, so I needed to enable them:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/todolite_app_settings.png" alt="screenshot" /></p>

<p>Create a new push cert:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/create_new_push_cert.png" alt="screenshot" /></p>

<p>Choose the correct app id:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/choose_app_id.png" alt="screenshot" /></p>

<p>Generate CSR according to instructions in keychain:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/create_csr.png" alt="screenshot" /></p>

<p>This will save a CSR on your file system, and the next wizard step will ask you to upload this CSSR and generate the certificate.  Now you can download it:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/download_cert.png" alt="screenshot" /></p>

<p>Double click the downloaded cert and it will be added to your keychain.</p>

<p>This is where I got a bit confused, since I had to <em>also</em> download the cert from the app id section &mdash; go to the app id and hit &ldquo;Edit&rdquo;, then download the cert and double click it to add to your keychain.  (I&rsquo;m confused because I thought these were the same certs and this second step felt redundant)</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/download_app_id_cert.png" alt="screenshot" /></p>

<h2>Create and use provisioning profile</h2>

<p>Go to the <strong>Provisioning Profiles / Development</strong> section and hit the &ldquo;+&rdquo; button:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/create_provisioning_profile.png" alt="screenshot" /></p>

<p>Choose all certs and all devices, and then give your provisioning profile an easy to remember name.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/create_provisioning_profile_2.png" alt="screenshot" /></p>

<p>Download this provisioning profile and double click it to install it.</p>

<p>In xcode under <strong>Build Settings</strong>, choose this provisioning profile:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/xcode_choose_provisioning_profile.png" alt="screenshot" /></p>

<h2>Register for push notifications in your app</h2>

<p>Add the following code to your <code>didFinishLaunchingWithOptions:</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
</span><span class='line'>    
</span><span class='line'>    // Register for push notifications
</span><span class='line'>    if ([application respondsToSelector:@selector(isRegisteredForRemoteNotifications)])
</span><span class='line'>    {
</span><span class='line'>        // iOS 8 Notifications
</span><span class='line'>        [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:(UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge) categories:nil]];
</span><span class='line'>        
</span><span class='line'>        [application registerForRemoteNotifications];
</span><span class='line'>    }
</span><span class='line'>    else
</span><span class='line'>    {
</span><span class='line'>        // iOS &lt; 8 Notifications
</span><span class='line'>        [application registerForRemoteNotificationTypes:
</span><span class='line'>         (UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound)];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // rest of your code goes here ...
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And the following callback methods which will be called if remote notification is successful:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)application:(UIApplication *)app didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
</span><span class='line'>{
</span><span class='line'>    
</span><span class='line'>    NSString *deviceTokenStr = [NSString stringWithFormat:@"%@",deviceToken];
</span><span class='line'>    NSLog(@"didRegisterForRemoteNotificationsWithDeviceToken, Device token: %@", deviceTokenStr);
</span><span class='line'>    
</span><span class='line'>    NSString* deviceTokenCleaned = [[[[deviceToken description]
</span><span class='line'>                                      stringByReplacingOccurrencesOfString: @"&lt;" withString: @""]
</span><span class='line'>                                     stringByReplacingOccurrencesOfString: @"&gt;" withString: @""]
</span><span class='line'>                                    stringByReplacingOccurrencesOfString: @" " withString: @""];
</span><span class='line'>    
</span><span class='line'>     NSLog(@"didRegisterForRemoteNotificationsWithDeviceToken, Cleaned device token token: %@", deviceTokenCleaned);
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>and this callback which will be called if it&rsquo;s not unsuccessful:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)application:(UIApplication *)app didFailToRegisterForRemoteNotificationsWithError:(NSError *)err
</span><span class='line'>{
</span><span class='line'>    NSString *str = [NSString stringWithFormat: @"Error: %@", err];
</span><span class='line'>    NSLog(@"Error registering device token.  Push notifications will not work%@", str);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>If you now run this app on a simulator, you can expect an error like <code>Error registering device token.  Push notifications will not workError</code>.</p>

<p>Run the app on a device you should see a popup dialog in the app asking if it&rsquo;s OK to receive push notifications, and the following log messages in the xcode console:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>didRegisterForRemoteNotificationsWithDeviceToken, Device token: &lt;281c8710 1b029fdb 16c8e134 39436336 116001ce bf6519e6 8edefab5 23dab4e9&gt;
</span><span class='line'>didRegisterForRemoteNotificationsWithDeviceToken, Cleaned device token token: 281c87101b029fdb16c8e13439436336116001cebf6519e68edefab523dab4e9</span></code></pre></td></tr></table></div></figure>


<h2>Export APNS keys to .PEM format</h2>

<p>Open keychain, select the <code>login</code> keychain and the <code>My Certificates</code> category:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/export_cert_keychain.png" alt="screenshot" /></p>

<ul>
<li>Right click on the certificate (not the private key) “Apple Development Push Services: (your app id)”</li>
<li>Choose Export “Apple Development Push Services: (your app id)″.</li>
<li>Save this as <code>apns-prod-cert.p12</code> file somewhere you can access it.</li>
<li>When it prompts you for a password, leave it blank (or add one if you want, but this tutorial will assume it was left blank)</li>
<li>Repeat with the private key (in this case, TodoLite Push Notification Cert) and save it as <code>apns-prod-key.p12</code>.</li>
</ul>


<p>Now they need to be converted from <code>.p12</code> to <code>.pem</code> format.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl pkcs12 -clcerts -nokeys -out apns-prod-cert.pem -in apns-prod-cert.p12
</span><span class='line'>Enter Import Password: &lt;return&gt;
</span><span class='line'>MAC verified OK</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl pkcs12 -nocerts -out apns-prod-key.pem -in apns-prod-key.p12
</span><span class='line'>Enter Import Password:
</span><span class='line'>MAC verified OK
</span><span class='line'>Enter PEM pass phrase: hello &lt;return&gt;</span></code></pre></td></tr></table></div></figure>


<p>Remove the PEM passphrase:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl rsa -in apns-prod-key.pem -out apns-prod-key-noenc.pem
</span><span class='line'>Enter pass phrase for apns-prod-key.pem: hello
</span><span class='line'>writing RSA key</span></code></pre></td></tr></table></div></figure>


<h2>Add PEM files to Uniqush docker container</h2>

<p>When you call the Uniqush REST API to add a Push Service Provider, it expects to find the PEM files on it&rsquo;s local file system.  Use the following commands to get these files into the running container in the <code>/tmp</code> directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ `container=$(docker ps | grep -i uniqush-push | awk '{print $1}')`
</span><span class='line'>$ docker cp /tmp/apns-prod-cert.pem $container:/tmp/apns-prod-cert.pem
</span><span class='line'>$ docker cp /tmp/apns-prod-key-noenc.pem $container:/tmp/apns-prod-key-noenc.pem</span></code></pre></td></tr></table></div></figure>


<h2>Create APNS provider in Uniqush via REST API</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:9898/addpsp -d service=myservice \
</span><span class='line'>                             -d pushservicetype=apns \
</span><span class='line'>                     -d cert=/tmp/apns-prod-cert.pem \
</span><span class='line'>                     -d key=/tmp/apns-prod-key-noenc.pem \
</span><span class='line'>                     -d sandbox=true</span></code></pre></td></tr></table></div></figure>


<p>(Note: I&rsquo;m using a development cert, but if this was a distribution cert you&rsquo;d want to use <code>sandbox=false</code>)</p>

<p>You should get a <code>200 OK</code> response with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[AddPushServiceProvider][Info] 2016/02/03 20:35:29 From=24.23.246.59:59447 Service=myservice PushServiceProvider=apns:9f49c9c618c97bebe21bea159d3c7a8577934bdf00 Success!</span></code></pre></td></tr></table></div></figure>


<h2>Add Uniqush subscriber</h2>

<p>Using the cleaned up device token from the previous step <code>281c87101b029fdb16c8e13439436336116001cebf6519e68edefab523dab1e9</code>, create a subscriber with the name <code>mytestsubscriber</code> via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:9898/subscribe -d service=myservice \
</span><span class='line'>                                             -d subscriber=mytestsubscriber \
</span><span class='line'>                       -d pushservicetype=apns \
</span><span class='line'>                       -d devtoken=281c87101b029fdb16c8e13439436336116001cebf6519e68edefab523dab1e9 </span></code></pre></td></tr></table></div></figure>


<p>You should receive a <code>200 OK</code> response with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Subscribe][Info] 2016/02/03 20:43:21 From=24.23.246.59:60299 Service=myservice Subscriber=mytestsubscriber PushServiceProvider=apns:9f49c9c618c97bebe21bea159d3c7a8577934bdf00 DeliveryPoint=apns:2cbecd0798cc6731d96d5b0fb01d813c7c9a83af00 Success!</span></code></pre></td></tr></table></div></figure>


<h2>Push a test message</h2>

<p>The moment of truth!</p>

<p>First, you need to either <strong>background your app</strong> by pressing the home button, or add <a href="https://gist.github.com/tleyden/97434117ad53757106ad">some code like this</a> so that an alert will be shown if the app is foregrounded.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:9898/push -d service=myservice \
</span><span class='line'>                                        -d subscriber=mytestsubscriber \
</span><span class='line'>                  -d msg=HelloWorld</span></code></pre></td></tr></table></div></figure>


<p>You should get a <code>200 OK</code> response with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Push][Info] 2016/02/03 20:46:08 RequestId=56b26710-INbW8UWMUONtH8Ttddd2Qg== From=24.23.246.59:60634 Service=myservice NrSubscribers=1 Subscribers="[mytestsubscriber]"
</span><span class='line'>[Push][Info] 2016/02/03 20:46:09 RequestID=56b26710-INbW8UWMUONtH8Ttddd2Qg== Service=myservice Subscriber=mytestsubscriber PushServiceProvider=apns:9f49c9c618c97bebe21bea159d3c7a8577934bdf00 DeliveryPoint=apns:2cbecd0798cc6731d96d5b0fb01d813c7c9a83af MsgId=apns:apns:9f49c9c618c97bebe21bea159d3c7a8577934bdf-1 Success!</span></code></pre></td></tr></table></div></figure>


<p>And a push notification on the device!</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/push_notification_device.png" alt="screenshot" /></p>

<h2>References</h2>

<ul>
<li><a href="http://uniqush.org/documentation/usage.html">Uniqush docs</a></li>
<li><a href="http://quickblox.com/developers/How_to_create_APNS_certificates">How to create APNS certificates</a></li>
<li><a href="https://blog.serverdensity.com/how-to-renew-your-apple-push-notification-push-ssl-certificate/">How to renew your Apple Push Notification Push SSL Certificate</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CUDA 7.5 on AWS GPU Instance Running Ubuntu 14.04]]></title>
    <link href="http://tleyden.github.io/blog/2015/11/22/cuda-7-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04/"/>
    <updated>2015-11-22T17:32:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2015/11/22/cuda-7-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<h2>Launch stock Ubuntu AMI</h2>

<ul>
<li>Launch <strong>ami-d05e75b8</strong></li>
<li>Choose a GPU instance type: <strong>g2.2xlarge</strong> or <strong>g2.8xlarge</strong></li>
<li>Increase the size of the storage (this depends on what else you plan to install, I&rsquo;d suggest at least 20 GB)</li>
</ul>


<h2>SSH in</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh ubuntu@&lt;instance ip&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Install CUDA repository</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_7.5-18_amd64.deb
</span><span class='line'>$ sudo dpkg -i cuda-repo-ubuntu1404_7.5-18_amd64.deb</span></code></pre></td></tr></table></div></figure>


<h2>Update APT</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get upgrade -y
</span><span class='line'>$ sudo apt-get install -y opencl-headers build-essential protobuf-compiler \
</span><span class='line'>    libprotoc-dev libboost-all-dev libleveldb-dev hdf5-tools libhdf5-serial-dev \
</span><span class='line'>    libopencv-core-dev  libopencv-highgui-dev libsnappy-dev libsnappy1 \
</span><span class='line'>    libatlas-base-dev cmake libstdc++6-4.8-dbg libgoogle-glog0 libgoogle-glog-dev \
</span><span class='line'>    libgflags-dev liblmdb-dev git python-pip gfortran</span></code></pre></td></tr></table></div></figure>


<p>You will get a dialog regarding the <code>menu.lst</code> file, just choose the default option it gives you.</p>

<p>Do some cleanup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get clean</span></code></pre></td></tr></table></div></figure>


<h2>DRM module workaround</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install -y linux-image-extra-`uname -r` linux-headers-`uname -r` linux-image-`uname -r`</span></code></pre></td></tr></table></div></figure>


<p>For an explanation of why this is needed, see <a href="https://github.com/BVLC/caffe/wiki/Caffe-on-EC2-Ubuntu-14.04-Cuda-7">Caffe on EC2 Ubuntu 14.04 Cuda 7</a> and search for this command.</p>

<h2>Install CUDA</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install -y cuda
</span><span class='line'>$ sudo apt-get clean</span></code></pre></td></tr></table></div></figure>


<h2>Verify CUDA</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nvidia-smi</span></code></pre></td></tr></table></div></figure>


<p>You should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+------------------------------------------------------+
</span><span class='line'>| NVIDIA-SMI 352.63     Driver Version: 352.63         |
</span><span class='line'>|-------------------------------+----------------------+----------------------+
</span><span class='line'>| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
</span><span class='line'>| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
</span><span class='line'>|===============================+======================+======================|
</span><span class='line'>|   0  GRID K520           Off  | 0000:00:03.0     Off |                  N/A |
</span><span class='line'>| N/A   30C    P0    36W / 125W |     11MiB /  4095MiB |      0%      Default |
</span><span class='line'>+-------------------------------+----------------------+----------------------+
</span><span class='line'>
</span><span class='line'>+-----------------------------------------------------------------------------+
</span><span class='line'>| Processes:                                                       GPU Memory |
</span><span class='line'>|  GPU       PID  Type  Process name                               Usage      |
</span><span class='line'>|=============================================================================|
</span><span class='line'>|  No running processes found                                                 |
</span><span class='line'>+-----------------------------------------------------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>Make sure kernel module and devices are present:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu@ip-10-33-135-228:~$ lsmod | grep -i nvidia
</span><span class='line'>nvidia               8642880  0
</span><span class='line'>drm                   303102  1 nvidia
</span><span class='line'>ubuntu@ip-10-33-135-228:~$ ls -alh /dev | grep -i nvidia
</span><span class='line'>crw-rw-rw-  1 root root    195,   0 Nov 23 01:59 nvidia0
</span><span class='line'>crw-rw-rw-  1 root root    195, 255 Nov 23 01:58 nvidiactl</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li><a href="https://github.com/BVLC/caffe/wiki/Caffe-on-EC2-Ubuntu-14.04-Cuda-7">Caffe on EC2 Ubuntu 14.04 Cuda 7</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Neural Style on an AWS GPU instance]]></title>
    <link href="http://tleyden.github.io/blog/2015/11/22/running-neural-style-on-an-aws-gpu-instance/"/>
    <updated>2015-11-22T11:02:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2015/11/22/running-neural-style-on-an-aws-gpu-instance</id>
    <content type="html"><![CDATA[<p>These instructions will walk you through getting <a href="https://github.com/jcjohnson/neural-style">neural-style</a> up and running on an AWS GPU instance.</p>

<h2>Spin up CUDA-enabled AWS instance</h2>

<p>Follow these instructions to <a href="http://tleyden.github.io/blog/2015/11/22/cuda-7-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04/">install CUDA 7.5 on AWS GPU Instance Running Ubuntu 14.04</a>.</p>

<h2>SSH into AWS instance</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh ubuntu@&lt;instance-ip&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Install Docker</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get update && sudo apt-get install curl
</span><span class='line'>$ curl -sSL https://get.docker.com/ | sh</span></code></pre></td></tr></table></div></figure>


<p>As the post-install message suggests, enable docker for non-root users:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo usermod -aG docker ubuntu</span></code></pre></td></tr></table></div></figure>


<p>Verify correct install via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker run hello-world</span></code></pre></td></tr></table></div></figure>


<h2>Mount GPU devices</h2>

<p><strong>Mount</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /usr/local/cuda/samples/1_Utilities/deviceQuery
</span><span class='line'>$ sudo make
</span><span class='line'>$ sudo ./deviceQuery</span></code></pre></td></tr></table></div></figure>


<p>You should see something <a href="https://gist.github.com/tleyden/58ab2eedebc9529edb76">like this</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./deviceQuery Starting...
</span><span class='line'>
</span><span class='line'> CUDA Device Query (Runtime API) version (CUDART static linking)
</span><span class='line'>
</span><span class='line'>Detected 1 CUDA Capable device(s)
</span><span class='line'>
</span><span class='line'>Device 0: "GRID K520"
</span><span class='line'>  CUDA Driver Version / Runtime Version          6.5 / 6.5
</span><span class='line'>  ... snip ...
</span><span class='line'>
</span><span class='line'>deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 6.5, CUDA Runtime Version = 6.5, NumDevs = 1, Device0 = GRID K520
</span><span class='line'>Result = PASS</span></code></pre></td></tr></table></div></figure>


<p><strong>Verify: Find all your nvidia devices</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -la /dev | grep nvidia</span></code></pre></td></tr></table></div></figure>


<p>You should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crw-rw-rw-  1 root root    195,   0 Oct 25 19:37 nvidia0
</span><span class='line'>crw-rw-rw-  1 root root    195, 255 Oct 25 19:37 nvidiactl
</span><span class='line'>crw-rw-rw-  1 root root    251,   0 Oct 25 19:37 nvidia-uvm</span></code></pre></td></tr></table></div></figure>


<h2>Start Docker container</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export DOCKER_NVIDIA_DEVICES="--device /dev/nvidia0:/dev/nvidia0 --device /dev/nvidiactl:/dev/nvidiactl --device /dev/nvidia-uvm:/dev/nvidia-uvm"
</span><span class='line'>$ sudo docker run -ti $DOCKER_NVIDIA_DEVICES kaixhin/cuda-torch /bin/bash</span></code></pre></td></tr></table></div></figure>


<h2>Re-install CUDA 7.5 in the Docker container</h2>

<p>As <a href="https://groups.google.com/d/msg/torch7/yCSNIzW590M/Af7CHXEdDQAJ">reported in the Torch7 Google Group</a> and in <a href="https://github.com/Kaixhin/dockerfiles/issues/6">Kaixhin/dockerfiles</a>, there is an API version mismatch with the docker container and the host&rsquo;s version of CUDA.</p>

<p>The workaround is to re-install CUDA 7.5 via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_7.5-18_amd64.deb
</span><span class='line'>$ sudo dpkg -i cuda-repo-ubuntu1404_7.5-18_amd64.
</span><span class='line'>deb
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get upgrade -y
</span><span class='line'>$ sudo apt-get install -y opencl-headers build-essential protobuf-compiler \
</span><span class='line'>    libprotoc-dev libboost-all-dev libleveldb-dev hdf5-tools libhdf5-serial-dev \
</span><span class='line'>    libopencv-core-dev  libopencv-highgui-dev libsnappy-dev libsnappy1 \
</span><span class='line'>    libatlas-base-dev cmake libstdc++6-4.8-dbg libgoogle-glog0 libgoogle-glog-dev \
</span><span class='line'>    libgflags-dev liblmdb-dev git python-pip gfortran
</span><span class='line'>$ sudo apt-get clean
</span><span class='line'>$ sudo apt-get install -y linux-image-extra-`uname -r` linux-headers-`uname -r` linux-image-`uname -r`
</span><span class='line'>$ sudo apt-get install -y cuda</span></code></pre></td></tr></table></div></figure>


<h2>Verify CUDA inside docker container</h2>

<p>Running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nvidia-smi </span></code></pre></td></tr></table></div></figure>


<p>Should show info about the GPU driver and not return any errors.</p>

<p>Running this torch command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ th -e "require 'cutorch'; require 'cunn'; print(cutorch)"</span></code></pre></td></tr></table></div></figure>


<p>Should produce this output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  getStream : function: 0x4054b760
</span><span class='line'>  getDeviceCount : function: 0x408bca58
</span><span class='line'>  .. etc
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Install neural-style</h2>

<p>The following should be run <strong>inside</strong> the docker container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-get install -y wget libpng-dev libprotobuf-dev protobuf-compiler
</span><span class='line'>$ git clone --depth 1 https://github.com/jcjohnson/neural-style.git
</span><span class='line'>$ /root/torch/install/bin/luarocks install loadcaffe</span></code></pre></td></tr></table></div></figure>


<p><strong>Download models</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd neural-style
</span><span class='line'>$ sh models/download_models.sh</span></code></pre></td></tr></table></div></figure>


<h2>Run neural style</h2>

<p>First, grab a few images to test with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir images
</span><span class='line'>$ wget https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/1280px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg -O images/vangogh.jpg
</span><span class='line'>$ wget http://exp.cdn-hotels.com/hotels/1000000/10000/7500/7496/7496_42_z.jpg -O images/hotel_del_coronado.jpg</span></code></pre></td></tr></table></div></figure>


<p>Run it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ th neural_style.lua -style_image images/vangogh.jpg -content_image images/hotel_del_coronado.jpg</span></code></pre></td></tr></table></div></figure>


<h2>CuDNN (optional)</h2>

<p>CuDNN can potentially speed things up.</p>

<p><a href="https://developer.nvidia.com/cudnn">download cuDNN</a></p>

<p>Install via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -xzvf cudnn-7.0-linux-x64-v3.0-prod.tgz
</span><span class='line'>cd cuda/
</span><span class='line'>sudo cp lib64/libcudnn* /usr/local/cuda-7.5/lib64/
</span><span class='line'>sudo cp include/cudnn.h /usr/local/cuda-7.5/include
</span><span class='line'>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-7.5/lib64/</span></code></pre></td></tr></table></div></figure>


<p>Install the torch bindings for cuDNN:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>luarocks install cudnn</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li><a href="https://github.com/jcjohnson/neural-style/blob/master/INSTALL.md">Neural-Style INSTALL.md</a></li>
<li>ami-84c787ee &mdash; this AMI has everything pre-installed, however it is installed on the host rather than under docker, which was due to time constraints.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running the Sync Gateway Amazon AMI]]></title>
    <link href="http://tleyden.github.io/blog/2015/11/03/running-the-sync-gateway-amazon-ami/"/>
    <updated>2015-11-03T11:11:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2015/11/03/running-the-sync-gateway-amazon-ami</id>
    <content type="html"><![CDATA[<p>How to run the Couchbase Sync Gateway AWS AMI</p>

<h2>Kick off AWS instance</h2>

<ul>
<li>Browse to the <a href="https://aws.amazon.com/marketplace/pp/B013XDO1B4">Sync Gateway AMI</a> in the AWS Marketplace</li>
<li>Click Continue</li>
<li>Change all ports to &ldquo;MY IP&rdquo; except for port 4984</li>
<li>Make sure you choose a key that you have locally</li>
</ul>


<h2>SSH in and start Sync Gateway</h2>

<ul>
<li>Go to the AWS console, find the EC2 instance, and find the instance public ip address.  It should look like this: <code>ec2-54-161-201-224.compute-1.amazonaws.com</code>.  The rest of the instructions will refer to this as <instance public ip></li>
<li><code>ssh ec2-user@&lt;instance public ip&gt;</code> (this should let you in without prompting you for a password.  if not, you chose a key when you launched that you don&rsquo;t have locally)</li>
<li>Start the Sync Gateway with this command:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/couchbase-sync-gateway/bin/sync_gateway -interface=0.0.0.0:4984 -url=http://localhost:8091 -bucket=sync_gateway -dbname=sync_gateway</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You should see output like this:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2015-11-03T19:37:05.384Z ==== Couchbase Sync Gateway/1.1.0(28;86f028c) ====
</span><span class='line'>2015-11-03T19:37:05.384Z Opening db /sync_gateway as bucket "sync_gateway", pool "default", server &lt;http://localhost:8091&gt;
</span><span class='line'>2015-11-03T19:37:05.384Z Opening Couchbase database sync_gateway on &lt;http://localhost:8091&gt;
</span><span class='line'>2015/11/03 19:37:05  Trying with selected node 0
</span><span class='line'>2015/11/03 19:37:05  Trying with selected node 0
</span><span class='line'>2015-11-03T19:37:05.536Z Using default sync function 'channel(doc.channels)' for database "sync_gateway"
</span><span class='line'>2015-11-03T19:37:05.536Z     Reset guest user to config
</span><span class='line'>2015-11-03T19:37:05.536Z Starting profile server on
</span><span class='line'>2015-11-03T19:37:05.536Z Starting admin server on 127.0.0.1:4985
</span><span class='line'>2015-11-03T19:37:05.550Z Starting server on localhost:4984 ...</span></code></pre></td></tr></table></div></figure>


<h2>Verify via curl</h2>

<p>From your workstation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://&lt;instance public ip&gt;:4984/sync_gateway/</span></code></pre></td></tr></table></div></figure>


<p>You should get a response like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"committed_update_seq":1,"compact_running":false,"db_name":"sync_gateway","disk_format_version":0,"instance_start_time":1446579479331843,"purge_seq":0,"update_seq":1}</span></code></pre></td></tr></table></div></figure>


<h2>Customize configuration</h2>

<p>For more advanced Sync Gateway configuration, you will want to create a JSON config file on the EC2 instance itself and pass that to Sync Gateway when you launch it, or host your config JSON on the internet somewhere and pass Sync Gateway the URL to the file.</p>

<h2>View Couchbase Server UI</h2>

<p>In order to login to the Couchbase Server UI, go to <instance public ip>:8091 and use:</p>

<ul>
<li><strong>Username:</strong> Administrator</li>
<li><strong>Password:</strong> <code>&lt;aws instance id, eg: i-8a9f8335&gt;</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Couchbase Server under Joyent Triton]]></title>
    <link href="http://tleyden.github.io/blog/2015/05/05/running-couchbase-server-under-docker-on-joyent/"/>
    <updated>2015-05-05T09:31:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2015/05/05/running-couchbase-server-under-docker-on-joyent</id>
    <content type="html"><![CDATA[<p>Joyent has recently announced their new Triton Docker container hosting service.  There are several advantages of running Docker containers on Triton over a more traditional cloud hosting platform:</p>

<ul>
<li><p>Better performance since there is no hardware level virtualization overhead.  Your containers run on bare-metal.</p></li>
<li><p>Simplified networking between containers.  Each container gets its own private (and optionally public) ip address.</p></li>
<li><p>Hosts are abstracted away &mdash; you just deploy into the &ldquo;container cloud&rdquo;, and don&rsquo;t care which host your container is running on.</p></li>
</ul>


<p>For more details, check out Bryan Cantrill&rsquo;s talk about <a href="https://www.joyent.com/developers/videos/docker-and-the-future-of-containers-in-production">Docker and the Future of Containers in Production</a>.</p>

<p>Let&rsquo;s give it a spin with a &ldquo;hello world&rdquo; container, and then with a cluster of Couchbase servers.</p>

<h2>Sign up for a Joyent account</h2>

<p><a href="https://www.joyent.com/lp/preview">Follow the signup instructions on the Joyent website</a></p>

<p>You will also need to add your SSH key to your account.</p>

<h2>Install or Upgrade Docker</h2>

<p>If you don&rsquo;t have Docker installed already and you are on Ubuntu, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -sSL https://get.docker.com/ | sh</span></code></pre></td></tr></table></div></figure>


<p>See <a href="https://docs.docker.com/installation/ubuntulinux/">install Docker on Ubuntu</a> for more details.</p>

<h2>Upgrade Docker client to 1.4.1 or later</h2>

<p>Check your version of Docker with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker --version
</span><span class='line'>Docker version 1.0.1, build 990021a</span></code></pre></td></tr></table></div></figure>


<p>If you are on a version before 1.4.1 (like I was), you can upgrade Docker via the <a href="https://github.com/boot2docker/osx-installer/releases">boot2docker installers</a>.</p>

<h2>Joyent + Docker setup</h2>

<p>Get the sdc-docker repo (sdc == Smart Data Center):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/joyent/sdc-docker.git</span></code></pre></td></tr></table></div></figure>


<p>Perform setup via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd sdc-docker
</span><span class='line'>$  ./tools/sdc-docker-setup.sh -k 165.225.168.22 $ACCOUNT ~/.ssh/$PRIVATE_KEY_FILE</span></code></pre></td></tr></table></div></figure>


<p>Replace values as follows:</p>

<ul>
<li><strong>$ACCOUNT</strong>: you can get this by logging into the Joyent web ui and going to the Account menu from the pulldown in the top-right corner.  Find the <strong>Username</strong> field, and use that</li>
<li><strong>$PRIVATE_KEY_FILE</strong>: the name of the file where your private key is stored, typically this will be <code>id_rsa</code></li>
</ul>


<p>Run the command and you should see the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Setting up Docker client for SDC using:
</span><span class='line'>    CloudAPI:        https://165.225.168.22
</span><span class='line'>    Account:         &lt;your username&gt;
</span><span class='line'>    Key:             /home/ubuntu/.ssh/id_rsa
</span><span class='line'>
</span><span class='line'>[..snip..]
</span><span class='line'>
</span><span class='line'>Wrote certificate files to /home/ubuntu/.sdc/docker/&lt;username&gt;
</span><span class='line'>
</span><span class='line'>Docker service endpoint is: tcp://&lt;generated ip&gt;:2376
</span><span class='line'>
</span><span class='line'>* * *
</span><span class='line'>Success. Set your environment as follows:
</span><span class='line'>
</span><span class='line'>    export DOCKER_CERT_PATH=/home/ubuntu/.sdc/docker/&lt;username&gt;
</span><span class='line'>    export DOCKER_HOST=tcp://&lt;generated-ip&gt;:2376
</span><span class='line'>    alias docker="docker --tls"
</span><span class='line'>
</span><span class='line'>Then you should be able to run 'docker info' and see your account
</span><span class='line'>name 'SDCAccount: &lt;username&gt;' in the output.</span></code></pre></td></tr></table></div></figure>


<p><strong>Export environment variables</strong></p>

<p>As the output above suggests, copy and paste the commands from the output.  Here&rsquo;s an example of what that will look like (but you should copy and paste from your command output, not the snippet below):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export DOCKER_CERT_PATH=/home/ubuntu/.sdc/docker/&lt;username&gt;
</span><span class='line'>$ export DOCKER_HOST=tcp://&lt;generated-ip&gt;:2376
</span><span class='line'>$ alias docker="docker --tls"</span></code></pre></td></tr></table></div></figure>


<h2>Docker Hello World</h2>

<p>Let&rsquo;s spin up an Ubuntu docker image that says hello world.</p>

<p>Remember you&rsquo;re running the Docker client on your workstation, not in the cloud.  Here&rsquo;s an overview on what&rsquo;s going to be happening:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/joyent_container_hello_world.png" alt="diagram" /></p>

<p>To start the docker container::</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm ubuntu:14.04 echo "Hello Docker World, from Joyent"</span></code></pre></td></tr></table></div></figure>


<p>You should see the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Unable to find image 'ubuntu:14.04' locally
</span><span class='line'>Pulling repository library/ubuntu
</span><span class='line'>...
</span><span class='line'>Hello Docker World, from Joyent</span></code></pre></td></tr></table></div></figure>


<p>Also, since the <code>--rm</code> flag was passed, the container will have been removed after exiting.  You can verify this by running <code>docker ps -a</code>.  This is important because <strong>stopped containers incur charges on Joyent</strong>.</p>

<p>Congratulations!  You&rsquo;ve gotten a &ldquo;hello world&rdquo; Docker container running on Joyent.</p>

<h2>Run Couchbase Server containers</h2>

<p>Now it&rsquo;s time to run Couchbase Server.</p>

<p>To kick off three Couchbase Server containers, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for i in `seq 1 3`; do \
</span><span class='line'>      echo "Starting container $i"; \
</span><span class='line'>      export container_$i=$(docker run --name couchbase-server-$i -d -P couchbase/server); \
</span><span class='line'>  done</span></code></pre></td></tr></table></div></figure>


<p>To confirm the containers are up, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker ps</span></code></pre></td></tr></table></div></figure>


<p>and you should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CONTAINER ID        IMAGE                                       COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'>5bea8901814c        couchbase/server   "couchbase-start"   3 minutes ago       Up 2 minutes                            couchbase-server-1
</span><span class='line'>bef1f2f32726        couchbase/server   "couchbase-start"   2 minutes ago       Up 2 minutes                            couchbase-server-2
</span><span class='line'>6f4e2a1e8e63        couchbase/server   "couchbase-start"   2 minutes ago       Up About a minute                       couchbase-server-3</span></code></pre></td></tr></table></div></figure>


<p>At this point you will have environment variables defined with the container ids of each container.  You can check this by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $container_1 && echo $container_2 && echo $container_3
</span><span class='line'>21264e44d66b4004b4828b7ae408979e7f71924aadab435aa9de662024a37b0e
</span><span class='line'>ff9fb4db7b304e769f694802e6a072656825aa2059604ba4ab4d579bd2e5d18d
</span><span class='line'>0c6f8ca2951448e497d7e12026dcae4aeaf990ec51e047cf9d8b2cbdd9bd7668</span></code></pre></td></tr></table></div></figure>


<h3>Get public ip addresses of the containers</h3>

<p>Each container will have two IP addresses assigned:</p>

<ul>
<li>A public IP, accessible from anywhere</li>
<li>A private IP, only accessible from containers/machines in your Joyent account</li>
</ul>


<p>To get the public IP, we can use the Docker client.  (to get the private IP, you need to use the Joyent SmartDataCenter tools, which is described below)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ container_1_ip=`docker inspect $container_1 | grep -i IPAddress | awk -F: '{print $2}' |  grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"`
</span><span class='line'>$ container_2_ip=`docker inspect $container_2 | grep -i IPAddress | awk -F: '{print $2}' |  grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"`
</span><span class='line'>$ container_3_ip=`docker inspect $container_3 | grep -i IPAddress | awk -F: '{print $2}' |  grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"`
</span></code></pre></td></tr></table></div></figure>


<p>You will now have the public IP addresses of each container defined in environment variables.  You can check that it worked via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $container_1_ip && echo $container_2_ip && echo $container_3_ip
</span><span class='line'>165.225.185.11
</span><span class='line'>165.225.185.12
</span><span class='line'>165.225.185.13</span></code></pre></td></tr></table></div></figure>


<h3>Connect to Couchbase Web UI</h3>

<p>Open your browser to $container_1_ip:8091 and you should see:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/couchbase_cluster_setup.png" alt="Couchbase Welcome Screen" /></p>

<p>At this point, it&rsquo;s possible to setup the cluster by going to each Couchbase node&rsquo;s Web UI and following the Setup Wizard.  However, in case you want to automate this in the future, let&rsquo;s do this over the command line instead.</p>

<h3>Setup first Couchbase node</h3>

<p>Let&rsquo;s arbitrarily pick <strong>container_1</strong> as the first node in the cluster.  This node is special in the sense that other nodes will join it.</p>

<p>The following command will do the following:</p>

<ul>
<li>Set the Administrator&rsquo;s username and password to Administrator / password (you should change this)</li>
<li>Set the cluster RAM size to 600 MB</li>
</ul>


<p>Note: the <code>-u admin -p password</code> should be left as-is, since that is just passing in the default admin name and password for auth purposes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm --entrypoint=/opt/couchbase/bin/couchbase-cli couchbase/server \
</span><span class='line'>cluster-init -c $container_1_ip \
</span><span class='line'>--cluster-init-username=Administrator \
</span><span class='line'>--cluster-init-password=password \
</span><span class='line'>--cluster-init-ramsize=600 \
</span><span class='line'>-u admin -p password</span></code></pre></td></tr></table></div></figure>


<p>You should see a response like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SUCCESS: init 165.225.185.11</span></code></pre></td></tr></table></div></figure>


<h3>Create a default bucket</h3>

<p>A bucket is equivalent to a database in typical RDMS systems.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm --entrypoint=/opt/couchbase/bin/couchbase-cli couchbase/server \
</span><span class='line'>bucket-create -c $container_1_ip:8091 \
</span><span class='line'>--bucket=default \
</span><span class='line'>--bucket-type=couchbase \
</span><span class='line'>--bucket-port=11211 \
</span><span class='line'>--bucket-ramsize=600 \
</span><span class='line'>--bucket-replica=1 \
</span><span class='line'>-u Administrator -p password</span></code></pre></td></tr></table></div></figure>


<p>You should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SUCCESS: bucket-create</span></code></pre></td></tr></table></div></figure>


<h3>Add 2nd Couchbase node</h3>

<p>Add in the second Couchbase node with this command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm --entrypoint=/opt/couchbase/bin/couchbase-cli couchbase/server \
</span><span class='line'>server-add -c $container_1_ip \
</span><span class='line'>-u Administrator -p password \
</span><span class='line'>--server-add $container_2_ip \
</span><span class='line'>--server-add-username Administrator \
</span><span class='line'>--server-add-password password </span></code></pre></td></tr></table></div></figure>


<p>You should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SUCCESS: server-add 165.225.185.12:8091</span></code></pre></td></tr></table></div></figure>


<p>To verify it was added, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm --entrypoint=/opt/couchbase/bin/couchbase-cli couchbase/server \
</span><span class='line'>server-list -c $container_1_ip \
</span><span class='line'>-u Administrator -p password</span></code></pre></td></tr></table></div></figure>


<p>which should return the list of Couchbase Server nodes that are now part of the cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ns_1@165.225.185.11 165.225.185.11:8091 healthy active
</span><span class='line'>ns_1@165.225.185.12 165.225.185.12:8091 healthy inactiveAdded</span></code></pre></td></tr></table></div></figure>


<h3>Add 3rd Couchbase node and rebalance</h3>

<p>In this step we will:</p>

<ul>
<li>Add the 3rd Couchbase node</li>
<li>Trigger a &ldquo;rebalance&rdquo;, which distributes the (empty) bucket&rsquo;s data across the cluster</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm --entrypoint=/opt/couchbase/bin/couchbase-cli couchbase/server \
</span><span class='line'>rebalance -c $container_1_ip \
</span><span class='line'>-u Administrator -p password \
</span><span class='line'>--server-add $container_3_ip \
</span><span class='line'>--server-add-username Administrator \
</span><span class='line'>--server-add-password password </span></code></pre></td></tr></table></div></figure>


<p>You should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO: rebalancing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
</span><span class='line'>SUCCESS: rebalanced cluster
</span><span class='line'>close failed in file object destructor:
</span><span class='line'>Error in sys.excepthook:
</span><span class='line'>
</span><span class='line'>Original exception was:</span></code></pre></td></tr></table></div></figure>


<p>If you see <strong>SUCCESS</strong>, then it worked.  <em>(I&rsquo;m not sure why the &ldquo;close failed in file ..&rdquo; error is happening, but so far it appears that it can be safely ignored.)</em></p>

<h3>Login to Web UI</h3>

<p>Open your browser to $container_1_ip:8091 and you should see:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/couchbase_cluster_login.png" alt="Couchbase Login Screen" /></p>

<p>Login with:</p>

<ul>
<li>Username: <strong>Administrator</strong></li>
<li>Password: <strong>password</strong></li>
</ul>


<p>And you should see:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/couchbase_cluster_nodes.png" alt="Couchbase Nodes" /></p>

<p>Congratulations!  You have a Couchbase Server cluster up and running on Joyent Triton.</p>

<h2>Teardown</h2>

<p>To stop and remove your Couchbase server containers, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker stop $container_1 $container_2 $container_3
</span><span class='line'>$ docker rm $container_1 $container_2 $container_3</span></code></pre></td></tr></table></div></figure>


<p>To double check that you no longer have any containers running or in the stopped state, run <code>docker ps -a</code> and you should see an empty list.</p>

<h2>Installing the SDC tools (optional)</h2>

<p>Installing the Joyent Smart Data Center (SDC) tools will allow you to gain more visibility into your container cluster &mdash; for example being able to view the internal IP of each continer.</p>

<p>Here&rsquo;s how to install the sdc-tools suite.</p>

<h3>Install smartdc</h3>

<p>First <a href="http://coolestguidesontheplanet.com/installing-node-js-on-osx-10-10-yosemite/">install NodeJS + NPM</a></p>

<p>Install smartdc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g smartdc</span></code></pre></td></tr></table></div></figure>


<h3>Configure environment variables</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export SDC_URL=https://us-east-3b.api.joyent.com
</span><span class='line'>$ export SDC_ACCOUNT=&lt;ACCOUNT&gt;
</span><span class='line'>$ export SDC_KEY_ID=$(ssh-keygen -l -f $HOME/.ssh/id_rsa.pub | awk '{print $2}')</span></code></pre></td></tr></table></div></figure>


<p>Replace values as follows:</p>

<ul>
<li><strong>ACCOUNT</strong>: you can get this by logging into the Joyent web ui and going to the Account menu from the pulldown in the top-right corner.  Find the <strong>Username</strong> field, and use that</li>
</ul>


<h3>List machines</h3>

<p>Run <code>sdc-listmachines</code> to list all the containers running under your Joyent account.  Your output should look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sdc-listmachines
</span><span class='line'>[
</span><span class='line'>{
</span><span class='line'>    "id": "0c6f8ca2-9514-48e4-97d7-e12026dcae4a",
</span><span class='line'>    "name": "couchbase-server-3",
</span><span class='line'>    "type": "smartmachine",
</span><span class='line'>    "state": "running",
</span><span class='line'>    "image": "335a8046-0749-1174-5666-6f084472b5ef",
</span><span class='line'>    "ips": [
</span><span class='line'>      "192.168.128.32",
</span><span class='line'>      "165.225.185.13"
</span><span class='line'>    ],
</span><span class='line'>    "memory": 1024,
</span><span class='line'>    "disk": 25600,
</span><span class='line'>    "metadata": {},
</span><span class='line'>    "tags": {},
</span><span class='line'>    "created": "2015-03-26T14:50:31.196Z",
</span><span class='line'>    "updated": "2015-03-26T14:50:45.000Z",
</span><span class='line'>    "networks": [
</span><span class='line'>      "7cfe29d4-e313-4c3b-a967-a28ea34342e9",
</span><span class='line'>      "178967cb-8d11-4f53-8434-9c91ff819a0d"
</span><span class='line'>    ],
</span><span class='line'>    "dataset": "335a8046-0749-1174-5666-6f084472b5ef",
</span><span class='line'>    "primaryIp": "165.225.185.13",
</span><span class='line'>    "firewall_enabled": false,
</span><span class='line'>    "compute_node": "44454c4c-4400-1046-8050-b5c04f383432",
</span><span class='line'>    "package": "t4-standard-1G"
</span><span class='line'>  },
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h3>Find private IP of an individual machine</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sdc-getmachine &lt;machine_id&gt; | json -aH ips | json -aH | egrep "10\.|192\.”</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li><p><a href="https://github.com/joyent/sdc-docker/blob/master/docs/divergence.md">Native Docker API vs Joyent Triton API</a></p></li>
<li><p><a href="https://www.joyent.com/blog/container-service-preview">https://www.joyent.com/blog/container-service-preview</a></p></li>
<li><p><a href="https://www.joyent.com/blog/docker-bake-off-aws-vs-joyent">https://www.joyent.com/blog/docker-bake-off-aws-vs-joyent</a></p></li>
<li><p><a href="https://github.com/joyent/sdc-docker">https://github.com/joyent/sdc-docker</a></p></li>
<li><p><a href="https://github.com/joyent/sdc-docker/blob/master/docs/divergence.md">https://github.com/joyent/sdc-docker/blob/master/docs/divergence.md</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Octopress under Docker]]></title>
    <link href="http://tleyden.github.io/blog/2015/04/25/setting-up-octopress-under-docker/"/>
    <updated>2015-04-25T03:57:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2015/04/25/setting-up-octopress-under-docker</id>
    <content type="html"><![CDATA[<p>I got a new computer last week.  It&rsquo;s the latest macbook retina, and I needed to refresh because I wanted a bigger SSD drive (and after having an SSD drive, I&rsquo;ll never go back)</p>

<p>Anyway, I&rsquo;m trying to get my Octopress blog going again, and oh my God, what a nightmare.  Octopress was working beautifully for me for years, and then all of the sudden I am at the edge of Ruby Dependency Hell staring at an Octopress giving me eight fingers.</p>

<p>With the help of Docker, I&rsquo;ve managed to tame this eight legged beast, barely.</p>

<h2>Run Docker</h2>

<p>See <a href="https://docs.docker.com/installation/">Installing Docker</a> for instructions.</p>

<p>This blog post assumes you <strong>already have an Octopress git repo</strong>.  If you are starting from scratch, then check out <a href="http://tleyden.github.io/blog/2013/09/07/octopress-setup-part-i/">Octopress Setup Part I</a> to become even more confused.</p>

<h2>Install Octopress Docker image</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -ti tleyden5iwx/octopress /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>After this point, the rest of the instructions assume that you are executing commands from inside the Docker Container.</p>

<h2>Delete Octopress dir + clone your Octopress repo</h2>

<p>The Docker container will contain an Octopress directory, but it&rsquo;s not needed.</p>

<p>From within the container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /root
</span><span class='line'>$ rm -rf octopress/
</span><span class='line'>$ git clone https://github.com/your-github-username/your-github-username.github.io.git octopress
</span><span class='line'>$ cd octopress/</span></code></pre></td></tr></table></div></figure>


<p>Now, switch to the source branch (which contains the content)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout source</span></code></pre></td></tr></table></div></figure>


<p>Re-install dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install</span></code></pre></td></tr></table></div></figure>


<p>Prevent ASCII encoding errors:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export LC_ALL=C.UTF-8</span></code></pre></td></tr></table></div></figure>


<p><strong>Clone deploy directory</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/your-github-username/your-github-username.github.io.git _deploy</span></code></pre></td></tr></table></div></figure>


<h2>Rake preview</h2>

<p>As a smoke test, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake preview</span></code></pre></td></tr></table></div></figure>


<p>NOTE: I have no idea why <code>bundle exec</code> is required here, I just used this in response to a previous error message and it&rsquo;s accompanying suggestion.</p>

<p>If this gives no errors, that&rsquo;s a good sign.</p>

<h2>Create a new blog post</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake new_post["Setting up Octopress under Docker"]</span></code></pre></td></tr></table></div></figure>


<p>It will tell you the path to the blog post.  Now open the file in your favorite editor and add contect.</p>

<h2>Push to Source branch</h2>

<p>The source branch has the <strong>source markdown content</strong>.  It&rsquo;s actually the most important thing to preserve, because the HTML can always be regnerated from it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin source</span></code></pre></td></tr></table></div></figure>


<h2>Deploy to Master branch</h2>

<p>The master branch contains the <strong>rendered HTML content</strong>.  Here&rsquo;s how to push it up to your github pages repo (remember, in an earlier step you cloned your github pages repo at <a href="https://github.com/your-github-username/your-github-username.github.io.git">https://github.com/your-github-username/your-github-username.github.io.git</a>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake generate && bundle exec rake deploy</span></code></pre></td></tr></table></div></figure>


<p>After the above command, the changes should be visible on your github pages blog (eg, your-username.github.io)</p>

<h2>Common errors</h2>

<p>If you get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>YAML Exception reading 2014-04-09-a-successful-git-branching-model-with-enterprise-support.markdown: invalid byte sequence in US-ASCII</span></code></pre></td></tr></table></div></figure>


<p>Run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export LC_ALL=C.UTF-8</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li><a href="https://github.com/imathis/octopress/issues/1344">https://github.com/imathis/octopress/issues/1344</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test coverage for Go with drone.io and coveralls.io]]></title>
    <link href="http://tleyden.github.io/blog/2015/03/31/test-coverage-for-go-with-drone-dot-io-and-coveralls-dot-io/"/>
    <updated>2015-03-31T07:26:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2015/03/31/test-coverage-for-go-with-drone-dot-io-and-coveralls-dot-io</id>
    <content type="html"><![CDATA[<p>This will walk you through setting up a test coverage report on coveralls.io which will be updated every time a new build happens on drone.io (a continuous integration server similar to TavisCI).</p>

<p>I&rsquo;m going to use the <a href="https://github.com/couchbaselabs/sg-replicate">couchbaselabs/sg-replicate</a> repo as an example, since it currently does not have any test coverage statistics.  The goal is to end up with a badge in the README that points to a test coverage report hosted on coveralls.io.</p>

<h2>Clone the repo</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/couchbaselabs/sg-replicate.git
</span><span class='line'>$ cd sg-replicate</span></code></pre></td></tr></table></div></figure>


<h2>Test coverage command line stats</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test -cover
</span><span class='line'>go tool: no such tool "cover"; to install:
</span><span class='line'>  go get golang.org/x/tools/cmd/cover
</span></code></pre></td></tr></table></div></figure>


<p>Try again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get golang.org/x/tools/cmd/cover && go test -cover
</span><span class='line'>PASS
</span><span class='line'>coverage: 69.4% of statements
</span><span class='line'>ok    github.com/couchbaselabs/sg-replicate   0.156s</span></code></pre></td></tr></table></div></figure>


<p>Ouch, 69.4% is barely a C-. (if you round up!)</p>

<h2>Coverage breakdown</h2>

<p>Text report:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test -coverprofile=coverage.out 
</span><span class='line'>$ go tool cover -func=coverage.out
</span><span class='line'>github.com/couchbaselabs/sg-replicate/attachment.go:15:           NewAttachment           84.6%
</span><span class='line'>github.com/couchbaselabs/sg-replicate/changes_feed_parameters.go:20:  NewChangesFeedParams        100.0%
</span><span class='line'>github.com/couchbaselabs/sg-replicate/changes_feed_parameters.go:30:  FeedType            100.0%
</span><span class='line'>github.com/couchbaselabs/sg-replicate/changes_feed_parameters.go:34:  Limit               100.0%</span></code></pre></td></tr></table></div></figure>


<p>HTML report:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test -coverprofile=coverage.out 
</span><span class='line'>$ go tool cover -html=coverage.out</span></code></pre></td></tr></table></div></figure>


<p>This should open up the following report in your default browser:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/go_coverage_html.png" alt="html report" /></p>

<h2>Coveralls.io setup</h2>

<ul>
<li>Login to coveralls.io</li>
<li>Create a new repo</li>
<li>Get the repo token from the <strong>SET UP COVERALLS</strong> section</li>
</ul>


<p>At this point, your empty coveralls repo will look something like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/coveralls_empty_repo.png" alt="empty coveralls repo" /></p>

<h2>Configure Drone.io + Goveralls</h2>

<p>If you have not already done so, setup a drone.io build for your repo.</p>

<p>On the drone.io <strong>Settings</strong> page, make the following changes:</p>

<p><strong>Environment Variables</strong></p>

<p>In the Environment Variables section of the web ui, add:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>COVERALLS_TOKEN=&lt;coveralls_repo_token&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>Commands</strong></p>

<p>In the commands section, you can replace your existing <code>go test</code> call with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go get github.com/axw/gocov/gocov
</span><span class='line'>go get github.com/mattn/goveralls
</span><span class='line'>goveralls -service drone.io -repotoken $COVERALLS_TOKEN</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what it should look like:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_io_coverage.png" alt="drone io ui" /></p>

<h2>Kick off a build</h2>

<p>Go to the drone.io project page for your repo, and hit <strong>Build Now</strong></p>

<p>At the bottom of the build output, you should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Job #1.1
</span><span class='line'>https://coveralls.io/jobs/5189501</span></code></pre></td></tr></table></div></figure>


<p>If you follow the link, you should see something like:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/coveralls_sgreplicate.png" alt="coveralls report" /></p>

<p>Looks like we just went from a C- to a B!  I have no idea why the coverage improved, but I&rsquo;ll take it.</p>

<h2>Add a badge, call it a day</h2>

<p>On the coveralls.io project page for your repo, you should see a button near the top called <strong>Badge URLS</strong>.  Click and copy/paste the markdown, which should look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[![Coverage Status](https://coveralls.io/repos/couchbaselabs/sg-replicate/badge.svg?branch=master)](https://coveralls.io/r/couchbaselabs/sg-replicate?branch=master)</span></code></pre></td></tr></table></div></figure>


<p>And add it to your project&rsquo;s README.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/sg_replicate_badges.png" alt="badges" /></p>

<h2>References</h2>

<ul>
<li><a href="https://blog.golang.org/cover">https://blog.golang.org/cover</a></li>
<li><a href="https://github.com/mattn/goveralls">https://github.com/mattn/goveralls</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx proxy for Sync Gateway using Confd]]></title>
    <link href="http://tleyden.github.io/blog/2015/03/21/nginx-proxy-for-sync-gateway-using-confd/"/>
    <updated>2015-03-21T15:25:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2015/03/21/nginx-proxy-for-sync-gateway-using-confd</id>
    <content type="html"><![CDATA[<p>This will walk you through setting up Sync Gateway behind nginx.  The nginx conf will be auto generated based on Sync Gateway status.</p>

<h3>Launch CoreOS instances on EC2</h3>

<p><a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#cstack=sn%7ECouchbase-CoreOS%7Cturl%7Ehttp://tleyden-misc.s3.amazonaws.com/couchbase-coreos/sync_gateway.template"><img src="https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png"></a></p>

<p>Recommended values:</p>

<ul>
<li><strong>ClusterSize</strong>: 3 nodes (default)</li>
<li><strong>Discovery URL</strong>:  as it says, you need to grab a new token from <a href="https://discovery.etcd.io/new">https://discovery.etcd.io/new</a> and paste it in the box.</li>
<li><strong>KeyPair</strong>: the name of the AWS keypair you want to use.  If you haven&rsquo;t already, you&rsquo;ll want to upload your local ssh key into AWS and create a named keypair.</li>
</ul>


<h3>Wait until instances are up</h3>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/cloud-formation-create-complete.png" alt="screenshot" /></p>

<h3>ssh into a CoreOS instance</h3>

<p>Go to the AWS console under EC2 instances and find the public ip of one of your newly launched CoreOS instances.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/ec2-instances-coreos.png" alt="screenshot" /></p>

<p>Choose any one of them (it doesn&rsquo;t matter which), and ssh into it as the <strong>core</strong> user with the cert provided in the previous step:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -i aws.cer -A core@ec2-54-83-80-161.compute-1.amazonaws.com</span></code></pre></td></tr></table></div></figure>


<h2>Spin up Sync Gateway containers</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ etcdctl set /couchbase.com/enable-code-refresh true
</span><span class='line'>$ sudo docker run --net=host tleyden5iwx/couchbase-cluster-go update-wrapper sync-gw-cluster launch-sgw --num-nodes=2 --config-url=http://git.io/hFwa --in-memory-db</span></code></pre></td></tr></table></div></figure>


<h2>Verify etcd entries</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ etcdctl ls --recursive /
</span><span class='line'>...
</span><span class='line'>/couchbase.com/sync-gw-node-state
</span><span class='line'>/couchbase.com/sync-gw-node-state/10.169.70.114
</span><span class='line'>/couchbase.com/sync-gw-node-state/10.231.220.110</span></code></pre></td></tr></table></div></figure>


<h2>Create data volume container</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://raw.githubusercontent.com/lordelph/confd-demo/master/confdata.service
</span><span class='line'>$ fleetctl start confdata.service</span></code></pre></td></tr></table></div></figure>


<h2>Launch sync-gateway-nginx-confd.service</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://raw.githubusercontent.com/lordelph/confd-demo/master/confd.service
</span><span class='line'>$ sed -i -e 's/lordelph\/confd-demo/tleyden5iwx\/sync-gateway-nginx-confd/' confd.service
</span><span class='line'>$ fleetctl start confd.service</span></code></pre></td></tr></table></div></figure>


<h2>Launch nginx service</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://raw.githubusercontent.com/lordelph/confd-demo/master/nginx.service
</span><span class='line'>$ fleetctl start nginx.service</span></code></pre></td></tr></table></div></figure>


<h2>Verify</h2>

<p>Try a basic http get.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nginx_ip=`fleetctl list-units | grep -i nginx | awk '{print $2}' | awk -F/ '{print $2}'`
</span><span class='line'>$ curl $nginx_ip
</span><span class='line'>{"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1},"version":"Couchbase Sync Gateway/master(a47a17f)"}</span></code></pre></td></tr></table></div></figure>


<p>Add &lsquo;-v&rsquo; flag to see which Sync Gateway server is servicing the request</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v $nginx_ip
</span><span class='line'>...
</span><span class='line'>X-Handler: 10.231.220.110:4984
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>If you repeat that a few more times, you should see different ip addresses for the handler.</p>

<p><strong>Take a sync gateway out of rotation</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ fleetctl stop sync_gw_node@1.service sync_gw_sidekick@1.service</span></code></pre></td></tr></table></div></figure>


<p>Now try hitting nginx again, and should not see the Sync Gw that you just shutdown as a handler.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v $nginx_ip
</span><span class='line'>...
</span><span class='line'>X-Handler: 10.231.220.114:4984
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p><strong>Put sync gateway back into rotation</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ fleetctl start sync_gw_node@1.service sync_gw_sidekick@1.service</span></code></pre></td></tr></table></div></figure>


<p>Now try hitting nginx again, and should again see the Sync Gw that you just restarted as being a handler.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v $nginx_ip
</span><span class='line'>...
</span><span class='line'>X-Handler: 10.231.220.110:4984
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li><a href="http://blog.dixo.net/2015/02/load-balancing-with-coreos">http://blog.dixo.net/2015/02/load-balancing-with-coreos</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphing time series data with Seriesly and Cubism]]></title>
    <link href="http://tleyden.github.io/blog/2015/03/03/graphing-time-series-data-with-seriesly-and-cubism/"/>
    <updated>2015-03-03T16:53:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2015/03/03/graphing-time-series-data-with-seriesly-and-cubism</id>
    <content type="html"><![CDATA[<p>This will walk you through the basics of putting data into <a href="https://github.com/dustin/seriesly">seriesly</a> and visualizing it with <a href="https://square.github.io/cubism/">cubism</a>.</p>

<p>You will end up with this in your browser:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/seriesly-cubism.png" alt="screenshot" /></p>

<h2>Install seriesly</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go get -u -v -t github.com/dustin/seriesly</span></code></pre></td></tr></table></div></figure>


<h2>Run seriesly</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>seriesly -flushDelay=1s -root=/tmp/seriesly-data</span></code></pre></td></tr></table></div></figure>


<p>and leave it running in the background.</p>

<h2>Create a db</h2>

<p>In another shell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X PUT http://localhost:3133/testdb</span></code></pre></td></tr></table></div></figure>


<h2>Write docs to db</h2>

<p>This script will write json docs with random values for the purpose of visualization.</p>

<p>Copy the following to <code>add_seriesly_docs.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env ruby
</span><span class='line'>
</span><span class='line'>6000.times do |count|
</span><span class='line'>  randomNumber = rand() # random number between 0 and 1
</span><span class='line'>  cmd = "curl -X POST -d '{\"index\":#{randomNumber}}' http://localhost:3133/testdb"
</span><span class='line'>  puts cmd
</span><span class='line'>  system(cmd)
</span><span class='line'>  system("sleep 1")
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>and then run it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod +x add_seriesly_docs.rb && ./add_seriesly_docs.rb</span></code></pre></td></tr></table></div></figure>


<p>and let it continue running in the background.</p>

<h2>Create a webserver</h2>

<p>Create a directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /tmp/seriesly-http/
</span><span class='line'>cd /tmp/seriesly-http/</span></code></pre></td></tr></table></div></figure>


<p>Create <code>fileserver.go</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>import "net/http"
</span><span class='line'>func main() {
</span><span class='line'>        panic(http.ListenAndServe(":8080", http.FileServer(http.Dir("/tmp/seriesly-http/"))))
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Run webserver:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go run fileserver.go</span></code></pre></td></tr></table></div></figure>


<h2>Download seriesly.html file</h2>

<p>This is a file I wrote which uses seriesly as a metric data source for cubism.</p>

<p>It&rsquo;s a quick hack, since I couldn&rsquo;t manage to get <a href="https://github.com/dustin/seriesly/blob/master/cubism/seriesism.js">seriesism.js</a> working.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /tmp/seriesly-http/
</span><span class='line'>wget https://gist.githubusercontent.com/tleyden/ec0c9be5786e0c0bd9ba/raw/1c08ea13b8ce46e08a49df19ad44c8e6a0ade896/seriesly.html</span></code></pre></td></tr></table></div></figure>


<h2>Open seriesly.html</h2>

<p>In your browser, point to <a href="http://localhost:8080/seriesly.html">http://localhost:8080/seriesly.html</a></p>

<p>At this point, you should see the screenshot at the beginning of the blog post.</p>

<h2>References</h2>

<ul>
<li><a href="https://github.com/dustin/seriesly">seriesly</a></li>
<li><a href="http://dustin.sallings.org/2012/09/09/seriesly.html">seriesly blog post</a></li>
<li><a href="https://sakamotomsh.wordpress.com/2014/05/12/the-simplest-example-of-cubism-js/">The simplest example of cubism</a></li>
<li><a href="https://github.com/couchbaselabs/perfrunner-visualizer">perfrunner-visualizer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a Walrus-backed Sync Gateway on AWS]]></title>
    <link href="http://tleyden.github.io/blog/2015/01/23/running-a-walrus-backed-sync-gateway-on-aws/"/>
    <updated>2015-01-23T09:30:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2015/01/23/running-a-walrus-backed-sync-gateway-on-aws</id>
    <content type="html"><![CDATA[<p>Follow the steps below to create a Sync Gateway instance running under AWS with the following architecture:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/sync_gw_walrus_aws.png" alt="architecture diagram" /></p>

<p>It will be using the <a href="https://github.com/couchbaselabs/walrus">Walrus</a> in-memory database, and so it is only useful for light testing.  Walrus does have the abiity to snapshot its memory contents to a file, so your data can persist across restarts.</p>

<p><strong>Warning: don&rsquo;t run this in production!</strong>  If you want something that is closer to production ready, check out <a href="http://tleyden.github.io/blog/2014/12/15/running-a-sync-gateway-cluster-under-coreos-on-aws/">Running a Sync Gateway Cluster Under CoreOS on AWS</a> instead.</p>

<h2>Launch EC2 instance</h2>

<p>Go to the <a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#cstack=sn%7ECouchbase-CoreOS%7Cturl%7Ehttp://tleyden-misc.s3.amazonaws.com/couchbase-coreos/sync_gateway.template">Cloudformation Wizard</a></p>

<p>Recommended values:</p>

<ul>
<li><strong>ClusterSize</strong>: 1 node</li>
<li><strong>Discovery URL</strong>:  as it says, you need to grab a new token from <a href="https://discovery.etcd.io/new">https://discovery.etcd.io/new</a> and paste it in the box.</li>
<li><strong>KeyPair</strong>: the name of the AWS keypair you want to use.</li>
</ul>


<p>For the keypair that you use, your local ssh client will need to have the private key side of that keypair.</p>

<h3>Wait until instances are up</h3>

<p>Hit the &ldquo;reload&rdquo; button until it goes to the CREATE_COMPLETE state.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/cloud-formation-create-complete.png" alt="screenshot" /></p>

<h2>Find ip of instance</h2>

<p>Go to the AWS console under the &ldquo;EC2 instances&rdquo; section and find the public ip of one of your newly launched CoreOS instances.</p>

<p>Choose any one of them (it doesn&rsquo;t matter which), and look for the <strong>Public IP</strong>.  Copy that value onto your clipboard.</p>

<h3>SSH into instance</h3>

<p>ssh into it as the <strong>core</strong> user with the cert provided in the previous step:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -A core@ec2-54-83-80-161.compute-1.amazonaws.com</span></code></pre></td></tr></table></div></figure>


<h2>Create a volume directory</h2>

<p>After you ssh into your instance, create a volume directory so that the data persists across different container instances.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mkdir -p /opt/sync_gateway/data
</span><span class='line'>$ sudo chown -R core:core /opt/sync_gateway/data</span></code></pre></td></tr></table></div></figure>


<h2>Launch Sync Gateway</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ SYNC_GW_CONFIG=https://gist.githubusercontent.com/tleyden/368f01218baf4e760267/raw/a65be036bc3855d5ab4e73b849f4caa1dc7d390f/config.json
</span><span class='line'>$ sudo docker run -d --name sync_gw --net=host -v /opt/sync_gateway/data:/opt/sync_gateway/data tleyden5iwx/sync-gateway-coreos sync-gw-start -c master -g $SYNC_GW_CONFIG</span></code></pre></td></tr></table></div></figure>


<p>You should see the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Unable to find image 'tleyden5iwx/sync-gateway-coreos' locally
</span><span class='line'>Pulling repository tleyden5iwx/sync-gateway-coreos
</span><span class='line'>daa0c81d9745: Download complete
</span><span class='line'>......
</span><span class='line'>Status: Downloaded newer image for tleyden5iwx/sync-gateway-coreos:latest
</span><span class='line'>d22035060882a2071c3e0a556ae5db5041f84e3004d67fb11355b6d8a7bf40b8
</span><span class='line'>$ </span></code></pre></td></tr></table></div></figure>


<p>Congratulations!  You now have a Sync Gateway running.</p>

<p>It might feel underwhelming, because nothing appears to be happening, but sync gateway is actually running in the background.  To verify that, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker ps
</span><span class='line'>CONTAINER ID        IMAGE                                    COMMAND                CREATED              STATUS              PORTS               NAMES
</span><span class='line'>d22035060882        tleyden5iwx/sync-gateway-coreos:latest   "sync-gw-start -c ma   About a minute ago   Up About a minute                       sync_gw</span></code></pre></td></tr></table></div></figure>


<h2>View logs</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ CONTAINER_ID=$(sudo docker ps | grep -iv container | awk '{ print $1 }')
</span><span class='line'>$ sudo docker logs --follow ${CONTAINER_ID}</span></code></pre></td></tr></table></div></figure>


<h2>Verify Sync Gateway</h2>

<p>Assuming your public ip is <code>54.81.228.221</code>, paste <code>http://54.81.228.221:4984</code> into your web browser and you should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "couchdb":"Welcome",
</span><span class='line'>    "vendor":{
</span><span class='line'>        "name":"Couchbase Sync Gateway",
</span><span class='line'>        "version":1
</span><span class='line'>    },
</span><span class='line'>    "version":"Couchbase Sync Gateway/master(6356065)"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>To make sure the database was configured correctly, change the url to <code>http://54.81.228.221:4984/db</code>, and you should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "db_name":"db",
</span><span class='line'>    .. etc ..
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Try out document API via curl</h2>

<p><strong>Create a new document</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -H 'Content-Type: application/json' -X POST -d '{"hello":"sync gateway"}' http://54.81.228.221:4984/db/</span></code></pre></td></tr></table></div></figure>


<p>This will return the following JSON:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "id":"f1c8c5f8de22a09544b97fcc20fce316",
</span><span class='line'>    "ok":true,
</span><span class='line'>    "rev":"1-016b8855d6faf2d703a8b35a44cd4a40"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><strong>View the document</strong></p>

<p>Using the doc id returned above:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://54.81.228.221:4984/db/f1c8c5f8de22a09544b97fcc20fce316</span></code></pre></td></tr></table></div></figure>


<p>You should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "_id":"f1c8c5f8de22a09544b97fcc20fce316",
</span><span class='line'>    "_rev":"1-016b8855d6faf2d703a8b35a44cd4a40",
</span><span class='line'>    "hello":"sync gateway"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Check out the <a href="http://developer.couchbase.com/mobile/develop/references/sync-gateway/rest-api/index.html">Sync Gateway REST API docs</a> for full documentation on the available REST calls you can make.</p>

<h2>Restart Sync Gateway with new config</h2>

<p>If you need to change your sync gateway config, follow the instructions below.</p>

<p><strong>Stop and remove existing container</strong></p>

<p>Find the container id via <code>sudo docker ps</code> as shown above, and run this command with your own container id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ CONTAINER_ID=$(sudo docker ps | grep -iv container | awk '{ print $1 }')
</span><span class='line'>$ sudo docker stop ${CONTAINER_ID} && sudo docker rm ${CONTAINER_ID}</span></code></pre></td></tr></table></div></figure>


<p><strong>Update sync gateway config</strong></p>

<p>You can take this <a href="https://gist.githubusercontent.com/tleyden/368f01218baf4e760267/raw/a65be036bc3855d5ab4e73b849f4caa1dc7d390f/config.json">sample config</a> and customize it to your needs, and then upload it somewhere on the web.</p>

<p>Make sure you keep the <code>server</code> field as <code>"walrus:data"</code>, since that tells Sync Gateway to use walrus and to store the data in the <code>/opt/sync_gateway/data</code> directory.</p>

<p><strong>Start container with new config</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ SYNC_GW_CONFIG=https://yourserver.com/yourconfig.json
</span><span class='line'>$ sudo docker run --name sync_gw --net=host -v /opt/sync_gateway/data:/opt/sync_gateway/data tleyden5iwx/sync-gateway-coreos sync-gw-start -c master -g $SYNC_GW_CONFIG</span></code></pre></td></tr></table></div></figure>


<p>After it starts up, your sync gateway will be running with the new config.</p>

<h2>Next step: try out the GrocerySync app</h2>

<p>Choose the GrocerySync app for your platform:</p>

<ul>
<li><a href="https://github.com/couchbaselabs/GrocerySync-Android">GrocerySync-Android</a></li>
<li><a href="https://github.com/couchbaselabs/Grocery-Sync-iOS">GrocerySync-iOS</a></li>
<li><a href="https://github.com/couchbase/couchbase-lite-net/tree/master/samples">GrocerySync-DotNet</a></li>
</ul>


<p>and point the sync url at your server instead of the default.  Now should be able to sync data through your own Sync Gateway.</p>

<p>If you are on Phonegap, check our <a href="http://developer.couchbase.com/mobile/develop/samples/samples/index.html">sample apps</a> listing which has a link to the TodoLite-Phonegap app.</p>
]]></content>
  </entry>
  
</feed>
