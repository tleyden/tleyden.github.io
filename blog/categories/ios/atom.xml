<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2016-10-02T16:27:42-07:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up Uniqush with APNS]]></title>
    <link href="http://tleyden.github.io/blog/2016/02/03/setting-up-uniqush-with-apns/"/>
    <updated>2016-02-03T08:47:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/02/03/setting-up-uniqush-with-apns</id>
    <content type="html"><![CDATA[<p>This walks you through running <a href="http://uniqush.org/index.html">Uniqush</a> in the cloud (under Docker) and setting up an iOS app to receive messages via APNS (Apple Push Notification Service).</p>

<h2>Run Uniqush under Docker</h2>

<h3>Install Docker components</h3>

<ul>
<li><a href="https://docs.docker.com/v1.8/installation/mac/">Install docker</a></li>
<li><a href="https://docs.docker.com/compose/install/">Install docker-compose</a></li>
</ul>


<h3>Config</h3>

<ul>
<li><code>mkdir -p volumes/uniqush</code></li>
<li><code>wget https://git.io/vgSYM -O volumes/uniqush/uniqush-push.conf</code></li>
</ul>


<p>Security note: the above config has Uniqush listening on all interfaces, but depending on your setup you probably want to change that to <code>localhost</code> or something more restrictive.</p>

<h3>Docker compose file</h3>

<p>Copy and paste this content into <code>docker-compose.yml</code></p>

<p>```</p>

<p>version: &lsquo;2&rsquo;</p>

<p>services:
  uniqush:</p>

<pre><code>container_name: uniqush
ports:
  - "9898:9898"
image: tleyden5iwx/uniqush
entrypoint: uniqush-push
links:
  - redis
volumes:
  - ~/docker/volumes/uniqush/uniqush-push.conf:/etc/uniqush/uniqush-push.conf
</code></pre>

<p>  redis:</p>

<pre><code>container_name: redis
image: redis
</code></pre>

<p>```</p>

<h3>Start docker containers</h3>

<p><code>
$ docker compose up -d
</code></p>

<h3>Verify Uniqush is running</h3>

<p>Run this <code>curl</code> command outside of the docker container to verify that Uniqush is responding to HTTP requests:</p>

<p><code>
$ curl localhost:9898/version
uniqush-push 1.5.2
</code></p>

<h2>Create APNS certificate</h2>

<p>In my case, I already had an app id for my app (<code>com.couchbase.todolite</code>), but push notifications are not enabled, so I needed to enable them:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/todolite_app_settings.png" alt="screenshot" /></p>

<p>Create a new push cert:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/create_new_push_cert.png" alt="screenshot" /></p>

<p>Choose the correct app id:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/choose_app_id.png" alt="screenshot" /></p>

<p>Generate CSR according to instructions in keychain:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/create_csr.png" alt="screenshot" /></p>

<p>This will save a CSR on your file system, and the next wizard step will ask you to upload this CSSR and generate the certificate.  Now you can download it:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/download_cert.png" alt="screenshot" /></p>

<p>Double click the downloaded cert and it will be added to your keychain.</p>

<p>This is where I got a bit confused, since I had to <em>also</em> download the cert from the app id section &mdash; go to the app id and hit &ldquo;Edit&rdquo;, then download the cert and double click it to add to your keychain.  (I&rsquo;m confused because I thought these were the same certs and this second step felt redundant)</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/download_app_id_cert.png" alt="screenshot" /></p>

<h2>Create and use provisioning profile</h2>

<p>Go to the <strong>Provisioning Profiles / Development</strong> section and hit the &ldquo;+&rdquo; button:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/create_provisioning_profile.png" alt="screenshot" /></p>

<p>Choose all certs and all devices, and then give your provisioning profile an easy to remember name.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/create_provisioning_profile_2.png" alt="screenshot" /></p>

<p>Download this provisioning profile and double click it to install it.</p>

<p>In xcode under <strong>Build Settings</strong>, choose this provisioning profile:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/xcode_choose_provisioning_profile.png" alt="screenshot" /></p>

<h2>Register for push notifications in your app</h2>

<p>Add the following code to your <code>didFinishLaunchingWithOptions:</code>:</p>

<p>```
&ndash; (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions {</p>

<pre><code>// Register for push notifications
if ([application respondsToSelector:@selector(isRegisteredForRemoteNotifications)])
{
    // iOS 8 Notifications
    [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:(UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge) categories:nil]];

    [application registerForRemoteNotifications];
}
else
{
    // iOS &lt; 8 Notifications
    [application registerForRemoteNotificationTypes:
     (UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound)];
}

// rest of your code goes here ...
</code></pre>

<p>}
```</p>

<p>And the following callback methods which will be called if remote notification is successful:</p>

<p>```
&ndash; (void)application:(UIApplication <em>)app didRegisterForRemoteNotificationsWithDeviceToken:(NSData </em>)deviceToken
{</p>

<pre><code>NSString *deviceTokenStr = [NSString stringWithFormat:@"%@",deviceToken];
NSLog(@"didRegisterForRemoteNotificationsWithDeviceToken, Device token: %@", deviceTokenStr);

NSString* deviceTokenCleaned = [[[[deviceToken description]
                                  stringByReplacingOccurrencesOfString: @"&lt;" withString: @""]
                                 stringByReplacingOccurrencesOfString: @"&gt;" withString: @""]
                                stringByReplacingOccurrencesOfString: @" " withString: @""];

 NSLog(@"didRegisterForRemoteNotificationsWithDeviceToken, Cleaned device token token: %@", deviceTokenCleaned);
</code></pre>

<p>}
```</p>

<p>and this callback which will be called if it&rsquo;s not unsuccessful:</p>

<p>```
&ndash; (void)application:(UIApplication <em>)app didFailToRegisterForRemoteNotificationsWithError:(NSError </em>)err
{</p>

<pre><code>NSString *str = [NSString stringWithFormat: @"Error: %@", err];
NSLog(@"Error registering device token.  Push notifications will not work%@", str);
</code></pre>

<p>}</p>

<p>```</p>

<p>If you now run this app on a simulator, you can expect an error like <code>Error registering device token.  Push notifications will not workError</code>.</p>

<p>Run the app on a device you should see a popup dialog in the app asking if it&rsquo;s OK to receive push notifications, and the following log messages in the xcode console:</p>

<p><code>
didRegisterForRemoteNotificationsWithDeviceToken, Device token: &lt;281c8710 1b029fdb 16c8e134 39436336 116001ce bf6519e6 8edefab5 23dab4e9&gt;
didRegisterForRemoteNotificationsWithDeviceToken, Cleaned device token token: 281c87101b029fdb16c8e13439436336116001cebf6519e68edefab523dab4e9
</code></p>

<h2>Export APNS keys to .PEM format</h2>

<p>Open keychain, select the <code>login</code> keychain and the <code>My Certificates</code> category:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/export_cert_keychain.png" alt="screenshot" /></p>

<ul>
<li>Right click on the certificate (not the private key) “Apple Development Push Services: (your app id)”</li>
<li>Choose Export “Apple Development Push Services: (your app id)″.</li>
<li>Save this as <code>apns-prod-cert.p12</code> file somewhere you can access it.</li>
<li>When it prompts you for a password, leave it blank (or add one if you want, but this tutorial will assume it was left blank)</li>
<li>Repeat with the private key (in this case, TodoLite Push Notification Cert) and save it as <code>apns-prod-key.p12</code>.</li>
</ul>


<p>Now they need to be converted from <code>.p12</code> to <code>.pem</code> format.</p>

<p><code>
$ openssl pkcs12 -clcerts -nokeys -out apns-prod-cert.pem -in apns-prod-cert.p12
Enter Import Password: &lt;return&gt;
MAC verified OK
</code></p>

<p><code>
$ openssl pkcs12 -nocerts -out apns-prod-key.pem -in apns-prod-key.p12
Enter Import Password:
MAC verified OK
Enter PEM pass phrase: hello &lt;return&gt;
</code></p>

<p>Remove the PEM passphrase:</p>

<p><code>
$ openssl rsa -in apns-prod-key.pem -out apns-prod-key-noenc.pem
Enter pass phrase for apns-prod-key.pem: hello
writing RSA key
</code></p>

<h2>Add PEM files to Uniqush docker container</h2>

<p>When you call the Uniqush REST API to add a Push Service Provider, it expects to find the PEM files on it&rsquo;s local file system.  Use the following commands to get these files into the running container in the <code>/tmp</code> directory:</p>

<p><code>
$ `container=$(docker ps | grep -i uniqush-push | awk '{print $1}')`
$ docker cp /tmp/apns-prod-cert.pem $container:/tmp/apns-prod-cert.pem
$ docker cp /tmp/apns-prod-key-noenc.pem $container:/tmp/apns-prod-key-noenc.pem
</code></p>

<h2>Create APNS provider in Uniqush via REST API</h2>

<p>```
$ curl -v <a href="http://localhost:9898/addpsp">http://localhost:9898/addpsp</a> -d service=myservice \</p>

<pre><code>                       -d pushservicetype=apns \
                   -d cert=/tmp/apns-prod-cert.pem \
                   -d key=/tmp/apns-prod-key-noenc.pem \
                   -d sandbox=true
</code></pre>

<p>```</p>

<p>(Note: I&rsquo;m using a development cert, but if this was a distribution cert you&rsquo;d want to use <code>sandbox=false</code>)</p>

<p>You should get a <code>200 OK</code> response with:</p>

<p><code>
[AddPushServiceProvider][Info] 2016/02/03 20:35:29 From=24.23.246.59:59447 Service=myservice PushServiceProvider=apns:9f49c9c618c97bebe21bea159d3c7a8577934bdf00 Success!
</code></p>

<h2>Add Uniqush subscriber</h2>

<p>Using the cleaned up device token from the previous step <code>281c87101b029fdb16c8e13439436336116001cebf6519e68edefab523dab1e9</code>, create a subscriber with the name <code>mytestsubscriber</code> via:</p>

<p>```
$ curl -v <a href="http://localhost:9898/subscribe">http://localhost:9898/subscribe</a> -d service=myservice \</p>

<pre><code>                                         -d subscriber=mytestsubscriber \
                     -d pushservicetype=apns \
                     -d devtoken=281c87101b029fdb16c8e13439436336116001cebf6519e68edefab523dab1e9 
</code></pre>

<p>```</p>

<p>You should receive a <code>200 OK</code> response with:</p>

<p><code>
[Subscribe][Info] 2016/02/03 20:43:21 From=24.23.246.59:60299 Service=myservice Subscriber=mytestsubscriber PushServiceProvider=apns:9f49c9c618c97bebe21bea159d3c7a8577934bdf00 DeliveryPoint=apns:2cbecd0798cc6731d96d5b0fb01d813c7c9a83af00 Success!
</code></p>

<h2>Push a test message</h2>

<p>The moment of truth!</p>

<p>First, you need to either <strong>background your app</strong> by pressing the home button, or add <a href="https://gist.github.com/tleyden/97434117ad53757106ad">some code like this</a> so that an alert will be shown if the app is foregrounded.</p>

<p>```
$ curl -v <a href="http://localhost:9898/push">http://localhost:9898/push</a> -d service=myservice \</p>

<pre><code>                                    -d subscriber=mytestsubscriber \
                -d msg=HelloWorld
</code></pre>

<p>```</p>

<p>You should get a <code>200 OK</code> response with:</p>

<p><code>
[Push][Info] 2016/02/03 20:46:08 RequestId=56b26710-INbW8UWMUONtH8Ttddd2Qg== From=24.23.246.59:60634 Service=myservice NrSubscribers=1 Subscribers="[mytestsubscriber]"
[Push][Info] 2016/02/03 20:46:09 RequestID=56b26710-INbW8UWMUONtH8Ttddd2Qg== Service=myservice Subscriber=mytestsubscriber PushServiceProvider=apns:9f49c9c618c97bebe21bea159d3c7a8577934bdf00 DeliveryPoint=apns:2cbecd0798cc6731d96d5b0fb01d813c7c9a83af MsgId=apns:apns:9f49c9c618c97bebe21bea159d3c7a8577934bdf-1 Success!
</code></p>

<p>And a push notification on the device!</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/push_notification_device.png" alt="screenshot" /></p>

<h2>References</h2>

<ul>
<li><a href="http://uniqush.org/documentation/usage.html">Uniqush docs</a></li>
<li><a href="http://quickblox.com/developers/How_to_create_APNS_certificates">How to create APNS certificates</a></li>
<li><a href="https://blog.serverdensity.com/how-to-renew-your-apple-push-notification-push-ssl-certificate/">How to renew your Apple Push Notification Push SSL Certificate</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
