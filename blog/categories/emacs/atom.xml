<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2016-02-07T03:27:31+00:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go Editor From Scratch Part 2]]></title>
    <link href="http://tleyden.github.io/blog/2014/05/27/configure-emacs-as-a-go-editor-from-scratch-part-2/"/>
    <updated>2014-05-27T12:03:00+00:00</updated>
    <id>http://tleyden.github.io/blog/2014/05/27/configure-emacs-as-a-go-editor-from-scratch-part-2</id>
    <content type="html"><![CDATA[<p>This is a continuation of <a href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/">Part 1</a>, so if you haven&rsquo;t read that already, you should do so now.</p>

<h2>goimports</h2>

<p>The idea of goimports is that every time you save a file, it will automatically update all of your imports, so you don&rsquo;t have to.  This can save a lot of time.  Kudos to <a href="https://twitter.com/bradfitz">@bradfitz</a> for taking the time to build this nifty tool.</p>

<p>go get goimports with:</p>

<p><code>
$ go get golang.org/x/tools/cmd/goimports
</code></p>

<p>Continuing on previous .emacs in <a href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/">Part 1</a>, update your .emacs to:</p>

<p>```
(defun my-go-mode-hook ()
  ; Use goimports instead of go-fmt
  (setq gofmt-command &ldquo;goimports&rdquo;)
  ; Call Gofmt before saving
  (add-hook &lsquo;before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match &ldquo;go&rdquo; compile-command))</p>

<pre><code>  (set (make-local-variable 'compile-command)
       "go build -v &amp;&amp; go test -v &amp;&amp; go vet"))
</code></pre>

<p>  ; Godef jump key binding
  (local-set-key (kbd &ldquo;M-.&rdquo;) &lsquo;godef-jump))
(add-hook 'go-mode-hook 'my-go-mode-hook)
```</p>

<p><strong>Restart emacs</strong> to force it to reload the configuration</p>

<h3>Testing out goimports</h3>

<ul>
<li>Open an existing .go file that contains imports</li>
<li>Remove one or more of the imports</li>
<li>Save the file</li>
</ul>


<p>After you save the file, it should re-add the imports.  Yay!</p>

<p>Basically any time you add or remove code that requires a different set of imports, saving the file will cause it to re-write the file with the correct imports.</p>

<h2>The Go Oracle</h2>

<p>The <a href="https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view">Go Oracle</a> will blow your mind!  It can do things like find all the callers of a given function/method.  It can also show you all the functions that read or write from a given channel.  In short, it rocks.</p>

<p>Here&rsquo;s what you need to do in order to wield this powerful tool from within Emacs.</p>

<h3>Go get oracle</h3>

<p><code>
go get golang.org/x/tools/cmd/oracle
</code></p>

<h3>Move oracle binary so Emacs can find it</h3>

<p><code>
sudo mv $GOPATH/bin/oracle $GOROOT/bin/
</code></p>

<h3>Update .emacs</h3>

<p>Add the following to your <code>.emacs</code> file, <strong>above</strong> the <code>(defun my-go-mode-hook ()</code> line.</p>

<p><code>
(load-file "$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el")
</code></p>

<p><strong>Restart Emacs</strong> to make these changes take effect.</p>

<h3>Get a test package to play with</h3>

<p>This package works with go-oracle (I tested it out while writing this blog post), so you should use it to give Go Oracle a spin:</p>

<p><code>
go get github.com/tleyden/checkers-bot-minimax
</code></p>

<h3>Set the oracle analysis scope</h3>

<p>From within emacs, open <code>$GOPATH/src/github.com/tleyden/checkers-bot-minimax/thinker.go</code></p>

<p>You need to tell Go Oracle the <strong>main</strong> package scope under which you want it to operate:</p>

<p><code>M-x go-oracle-set-scope</code></p>

<p>it will prompt you with:</p>

<p><code>Go oracle scope:</code></p>

<p>and you should enter:</p>

<p><code>github.com/tleyden/checkers-bot-minimax</code> and hit Enter.</p>

<p>Nothing will appear to happen, but now Go Oracle is now ready to show it&rsquo;s magic.  (<em>note</em> it will <strong>not</strong> autocomplete packages in this dialog, which is mildly annoying.  Make sure to spell them correctly.)</p>

<p><strong>Important:</strong> When you call <code>go-oracle-set-scope</code>, you always need to give it a <strong>main</strong> package.  This is something that will probably frequently trip you up while using Go Oracle.</p>

<h3>Use oracle to find the callers of a method</h3>

<p>You should still have the <code>$GOPATH/src/github.com/tleyden/checkers-bot-minimax/thinker.go</code> file open within emacs.</p>

<p>Position the cursor on the &ldquo;T&rdquo; in the <code>Think</code> method (line 13 of thinker.go):</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/Emacs_go_oracle_0" alt="screenshot" /></p>

<p>And then run</p>

<p><code>
M-x go-oracle-callers
</code></p>

<p>Emacs should open a new buffer on the right hand side with all of the places where the <code>Think</code> method is called.  In this case, there is only one place in the code that calls it:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/Emacs_go_oracle" alt="screenshot" /></p>

<p>To go to the call site, position your cursor on the red underscore to the left of &ldquo;dynamic method call&rdquo; and hit Enter.  It should take you to line 240 in gamecontroller.go:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/Emacs_go_oracle2" alt="screenshot" /></p>

<p>Note that it actually crossed package boundaries, since the called function (<code>Think</code>) was in the <code>main</code> package, while the call site was in the <code>checkersbot</code> package.</p>

<p>If you got this far, you are up and running with The Go Oracle on Emacs!</p>

<p>Now you should try it with one of your own packages.</p>

<p>This is just scratching the surface &mdash; to get more information on how to use Go Oracle, see <a href="https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view">go oracle: user manual</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go editor from scratch]]></title>
    <link href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/"/>
    <updated>2014-05-22T16:46:00+00:00</updated>
    <id>http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch</id>
    <content type="html"><![CDATA[<p>This explains the steps to get a productive Emacs environment for Go programming on OSX, starting from scratch.</p>

<h2>Install Emacs</h2>

<p>I recommend using the emacs from <a href="http://emacsformacosx.com">emacsformacosx.com</a>.</p>

<p>It has a GUI installer so I won&rsquo;t say much more about it.</p>

<h2>Install lastest version of Go</h2>

<p>See <a href="https://golang.org/doc/install">Installing Go</a></p>

<p>After installing, you&rsquo;ll want to define the following environment variables in your <code>~/.bash_profile</code>.</p>

<p><code>
export GOROOT=/usr/local/go            
export GOPATH=~/Development/gocode
export PATH=$PATH:$GOROOT/bin
export PATH=$PATH:$GOPATH/bin
</code></p>

<p>These might be different on your system.</p>

<h2>Install additional go tools (godoc, etc)</h2>

<p>To get the <code>godoc</code> tool as well as others, run:</p>

<p><code>
go get golang.org/x/tools/cmd/...
</code></p>

<p>I ended up getting an error:</p>

<p>```
$ go get golang.org/x/tools/cmd/&hellip;</p>

<h1>golang.org/x/tools/go/ssa/interp</h1>

<p>Development/gocode/src/golang.org/x/tools/go/ssa/interp/external.go:244: undefined: syscall.Pipe2
```</p>

<p>which is documented in <a href="https://github.com/golang/go/issues/13831">issue 13831</a></p>

<p>And installing these tools directly via:</p>

<p><code>
go get golang.org/x/tools/cmd/godoc
go get golang.org/x/tools/cmd/cover
go get golang.org/x/tools/cmd/gorename
go get golang.org/x/tools/cmd/goimports
go get golang.org/x/tools/cmd/oracle
go get golang.org/x/tools/cmd/vet
</code></p>

<h2>Install Melpa</h2>

<p><a href="http://melpa.org/#/getting-started">Melpa</a> is a package manager for Emacs, and is required for <a href="https://github.com/dominikh/go-mode.el">go-mode</a></p>

<p>To configure emacs for melpa:</p>

<ul>
<li>Create a new file <code>~/.emacs.d/init.el</code></li>
<li>Add the following contents:</li>
</ul>


<p><code>
(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)
</code></p>

<p>Restart emacs and run <code>M-x package-list-packages</code> and you should see it contacting <code>http://melpa.milkbox.net</code> and you should also see lot of packages listed as being from the melpa archive.</p>

<h2>Install go-mode</h2>

<p>Run <code>M-x package-install</code> and when prompted, enter <code>go-mode</code> and hit enter.</p>

<p>I got the following warnings:</p>

<p><code>``
Compiling file /Users/tleyden/.emacs.d/elpa/go-mode-20160127.4/go-mode.el at Sat Feb  6 17:58:11 2016
Entering directory</code>/Users/tleyden/.emacs.d/elpa/go-mode-20160127.4/&lsquo;
go-mode.el:16:1:Warning: cl package required at runtime</p>

<p>In go-mode:
go-mode.el:917:10:Warning: `font-lock-syntactic-keywords' is an obsolete</p>

<pre><code>variable (as of 24.1); use `syntax-propertize-function' instead.
</code></pre>

<p>```</p>

<p>Restart Emacs and open a .go file, you should see the mode as &ldquo;Go&rdquo; rather than &ldquo;Fundamental&rdquo;.</p>

<p>For a full description of what go-mode can do for you, see <a href="http://dominik.honnef.co/posts/2013/03/writing_go_in_emacs/">Dominik Honnef&rsquo;s blog</a>, but one really useful thing to be aware of is that you can quickly import packages via <code>C-c C-a</code></p>

<h2>Update Emacs path to find <code>godoc</code></h2>

<p>Run <code>M-x package-install</code> and enter <code>exec-path-from-shell</code></p>

<p>I got this warning:</p>

<p><code>``
Compiling file /Users/tleyden/.emacs.d/elpa/exec-path-from-shell-20160112.2246/exec-path-from-shell-pkg.el at Sat Feb  6 18:20:55 2016
Entering directory</code>/Users/tleyden/.emacs.d/elpa/exec-path-from-shell-20160112.2246/'</p>

<p>Compiling file /Users/tleyden/.emacs.d/elpa/exec-path-from-shell-20160112.2246/exec-path-from-shell.el at Sat Feb  6 18:20:55 2016</p>

<p>In exec-path-from-shell-setenv:
exec-path-from-shell.el:189:11:Warning: assignment to free variable</p>

<pre><code>`eshell-path-env'
</code></pre>

<p>```</p>

<p>Restart emacs.</p>

<h2>Update Emacs config for <code>godoc</code></h2>

<p>It&rsquo;s really useful to be able to able to pull up 3rd party or standard library docs from within Emacs using the <code>godoc</code> tool.</p>

<p><strong>PATH</strong></p>

<p>Add the following to your <code>~/.emacs.d/init.el</code> file so that it gets the PATH environment:</p>

<p>```
(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell (replace-regexp-in-string</p>

<pre><code>                      "[ \t\n]*$"
                      ""
                      (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
(setenv "PATH" path-from-shell)
(setq eshell-path-env path-from-shell) ; for eshell users
(setq exec-path (split-string path-from-shell path-separator))))
</code></pre>

<p>(when window-system (set-exec-path-from-shell-PATH))
```</p>

<p>NOTE: according to <a href="http://stackoverflow.com/questions/6411121/how-to-make-emacs-use-my-bashrc-file">this StackOverflow post</a>, it&rsquo;s possible to achieve this via downloading the <a href="https://github.com/purcell/exec-path-from-shell">exec-path-from-shell</a> emacs plugin from Marmelade or Melpa.</p>

<p><strong>GOPATH</strong></p>

<p><code>
(setenv "GOPATH" "/Users/tleyden/Development/gocode")
</code></p>

<p>(replace the above path to the absolute path to the directory where you store your Go code)</p>

<p>After doing this step, you should be able to run <code>M-x godoc</code> and it should be able to autocomplete paths of packages.  (of course, you may want to <code>go get</code> some packages first if you don&rsquo;t have any)</p>

<h2>Automatically call gofmt on save</h2>

<p><code>gofmt</code> reformats code into the One True Go Style Coding Standard.  You&rsquo;ll want to call it every time you save a file.</p>

<p>Add these to your <code>~/.emacs.d/init.el</code>:</p>

<p><code>
(setq exec-path (cons "/usr/local/go/bin" exec-path))
(add-to-list 'exec-path "/Users/tleyden/Development/gocode/bin")
(add-hook 'before-save-hook 'gofmt-before-save)
</code></p>

<p>(replace the above path to the absolute path to your <code>$GOPATH/bin</code> directory)</p>

<p>After this step, whenever you save a Go file, it will automatically reformat the file with <code>gofmt</code>.</p>

<h2>Godef</h2>

<p>Godef is essential: it lets you quickly jump around the code, as you might be used to with a full featured IDE.</p>

<p>From what I can tell, installing <a href="https://github.com/dominikh/go-mode.el">go-mode</a> seems to automatically install godef.</p>

<p>To verify that godef is indeed installed:</p>

<ul>
<li>Putting the cursor over a method name</li>
<li>Try doing <code>M-x godef-jump</code> to jump into the method, and <code>M-*</code> to go back.</li>
</ul>


<p>In order to add godef key bindings, add these to your <code>~/.emacs.d/init.el</code>:</p>

<p><code>
(defun my-go-mode-hook ()
  ; Call Gofmt before saving                                                    
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Godef jump key binding                                                      
  (local-set-key (kbd "M-.") 'godef-jump))
(add-hook 'go-mode-hook 'my-go-mode-hook)
</code></p>

<p>and remove your previous call to <code>(add-hook 'before-save-hook 'gofmt-before-save)</code> since it&rsquo;s now redundant</p>

<p>Now you can jump into code with <code>M-.</code> and jump back with <code>M-*</code></p>

<h2>Autocomplete</h2>

<p>Install melpa auto-complete via <code>M-x package-install</code> followed by <code>auto-complete</code></p>

<p>I got <a href=":https://gist.github.com/tleyden/cecfbba9bd9112fb71ae">these warnings</a></p>

<p>Add the following to your <code>~/.emacs.d/init.el</code> file:</p>

<p><code>
(defun auto-complete-for-go ()
  (auto-complete-mode 1))
(add-hook 'go-mode-hook 'auto-complete-for-go)
</code></p>

<p>Restart emacs, and if you open a .go file the mode should be <code>Go AC</code> (AC == AutoComplete)</p>

<p>Before further verifying, we need to install gocode in the next step.</p>

<h2>Gocode: Go aware Autocomplete</h2>

<p><strong>This step seems broken (see details below), if you have any ideas on how to make it work, leave a comment</strong></p>

<p>The following is a brief summary of the <a href="https://github.com/nsf/gocode">gocode README</a></p>

<ul>
<li><code>go get -u -v github.com/nsf/gocode</code></li>
<li><code>cp /Users/tleyden/Development/gocode/src/github.com/nsf/gocode/emacs/go-autocomplete.el ~/.emacs.d/</code></li>
<li>Add the following to your <code>~/.emacs.d/init.el</code></li>
</ul>


<p><code>
(require 'go-autocomplete)
(require 'auto-complete-config)
(ac-config-default)
</code></p>

<p>At this point, after you restart emacs, when you start typing something, you should see a popup menu with choices, like <a href="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs_autocomplete.png">this screenshot</a>.</p>

<p>On my system I&rsquo;m getting this error:</p>

<p><code>``
Warning (initialization): An error occurred while loading</code>/Users/tleyden/.emacs.d/init.el':</p>

<p>File error: Cannot open load file, no such file or directory, go-autocomplete
```</p>

<h2>Customize compile command to run <code>go build</code></h2>

<p>It&rsquo;s convenient to be able to run <code>M-x compile</code> to compile and test your Go code from within emacs.</p>

<p>To do that, edit your <code>~/.emacs.d/init.el</code> and replace your go-mode hook with:</p>

<p>```
(defun my-go-mode-hook ()
  ; Call Gofmt before saving
  (add-hook &lsquo;before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match &ldquo;go&rdquo; compile-command))</p>

<pre><code>  (set (make-local-variable 'compile-command)
       "go build -v &amp;&amp; go test -v &amp;&amp; go vet"))
</code></pre>

<p>  ; Godef jump key binding
  (local-set-key (kbd &ldquo;M-.&rdquo;) &lsquo;godef-jump))
(add-hook 'go-mode-hook 'my-go-mode-hook)
```</p>

<p>After that, restart emacs, and when you type <code>M-x compile</code>, it should try to execute <code>go build -v &amp;&amp; go test -v &amp;&amp; go vet</code> instead of the default behavior.  On some projects, you might also want to run <code>go generate</code> before <code>go build</code></p>

<p><strong>Power tip</strong>: you can jump straight to each compile error by running <code>C-x `</code>.  Each time you do it, it will jump to the next error.</p>

<h2>Continue to Part 2</h2>

<p>go-imports and go-oracle are covered in <a href="../../27/configure-emacs-as-a-go-editor-from-scratch-part-2/">Part 2</a></p>

<h2>References</h2>

<ul>
<li><a href="http://www.youtube.com/watch?v=5wipWZKvNSo">5 minutes of go in emacs</a> by <a href="https://twitter.com/dlsspy">@dlsspy</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
