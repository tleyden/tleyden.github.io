<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2022-10-31T16:03:48-07:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go Editor From Scratch Part 3]]></title>
    <link href="http://tleyden.github.io/blog/2016/02/07/configure-emacs-as-a-go-editor-from-scratch-part-3/"/>
    <updated>2016-02-07T04:25:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/02/07/configure-emacs-as-a-go-editor-from-scratch-part-3</id>
    <content type="html"><![CDATA[<p>This is a continuation from <a href="http://tleyden.github.io/blog/2014/05/27/configure-emacs-as-a-go-editor-from-scratch-part-2/">a previous blog post</a>.  In this post I&rsquo;m going to focus on making emacs look a bit better.</p>

<p>Currently:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs_ugly.png" alt="screenshot" /></p>

<h2>Install a nicer theme</h2>

<p>I like the <code>taming-mr-arneson-theme</code>, so let&rsquo;s install that one.  Feel free to browse the emacs themes and find one that you like more.</p>

<p><code>
$ `mkdir ~/.emacs.d/color-themes`
$ `wget https://raw.githubusercontent.com/emacs-jp/replace-colorthemes/d23b086141019c76ea81881bda00fb385f795048/taming-mr-arneson-theme.el`
</code></p>

<p>Update your <code>~/emacs.d/init.el</code> to add the following lines to the top of the file:</p>

<p><code>
(add-to-list 'custom-theme-load-path "/Users/tleyden/.emacs.d/color-themes/")
(load-theme 'taming-mr-arneson t)
</code></p>

<p>Now when you restart emacs it should look like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs_taming_mr_arneson.png" alt="screenshot" /></p>

<p> ## Directory Tree</p>

<p><code>
$ cd ~/DevLibraries
$ git clone https://github.com/jaypei/emacs-neotree.git neotree
</code></p>

<p>Update your <code>~/emacs.d/init.el</code> to add the following lines:</p>

<p><code>
(add-to-list 'load-path "/some/path/neotree")
(require 'neotree)
</code></p>

<p>Open a <code>.go</code> file and the enter <code>M-x neotree-dir</code> to show a directory browser:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs-neotree.png" alt="screnshot" /></p>

<p>Ref: <a href="http://www.emacswiki.org/emacs/NeoTree">NeoTree</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go Editor From Scratch Part 2]]></title>
    <link href="http://tleyden.github.io/blog/2014/05/27/configure-emacs-as-a-go-editor-from-scratch-part-2/"/>
    <updated>2014-05-27T12:03:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/05/27/configure-emacs-as-a-go-editor-from-scratch-part-2</id>
    <content type="html"><![CDATA[<p>This is a continuation of <a href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/">Part 1</a>, so if you haven&rsquo;t read that already, you should do so now.</p>

<h2>goimports</h2>

<p>The idea of goimports is that every time you save a file, it will automatically update all of your imports, so you don&rsquo;t have to.  This can save a lot of time.  Kudos to <a href="https://twitter.com/bradfitz">@bradfitz</a> for taking the time to build this nifty tool.</p>

<p>go get goimports with:</p>

<p><code>
$ go get golang.org/x/tools/cmd/goimports
</code></p>

<p>Continuing on previous .emacs in <a href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/">Part 1</a>, update your <code>~/.emacs.d/init.el</code> to:</p>

<p>```
(defun my-go-mode-hook ()
  ; Use goimports instead of go-fmt
  (setq gofmt-command &ldquo;goimports&rdquo;)
  ; Call Gofmt before saving
  (add-hook &lsquo;before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match &ldquo;go&rdquo; compile-command))</p>

<pre><code>  (set (make-local-variable 'compile-command)
       "go build -v &amp;&amp; go test -v &amp;&amp; go vet"))
</code></pre>

<p>  ; Godef jump key binding
  (local-set-key (kbd &ldquo;M-.&rdquo;) &lsquo;godef-jump)
  (local-set-key (kbd &ldquo;M-*&rdquo;) 'pop-tag-mark)
)
(add-hook 'go-mode-hook 'my-go-mode-hook)
```</p>

<p><strong>Restart emacs</strong> to force it to reload the configuration</p>

<h3>Testing out goimports</h3>

<ul>
<li>Open an existing .go file that contains imports</li>
<li>Remove one or more of the imports</li>
<li>Save the file</li>
</ul>


<p>After you save the file, it should re-add the imports.  Yay!</p>

<p>Basically any time you add or remove code that requires a different set of imports, saving the file will cause it to re-write the file with the correct imports.</p>

<h2>The Go Oracle</h2>

<p>The <a href="https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view">Go Oracle</a> will blow your mind!  It can do things like find all the callers of a given function/method.  It can also show you all the functions that read or write from a given channel.  In short, it rocks.</p>

<p>Here&rsquo;s what you need to do in order to wield this powerful tool from within Emacs.</p>

<h3>Go get oracle</h3>

<p><code>
go get golang.org/x/tools/cmd/oracle
</code></p>

<h3>Update emacs config</h3>

<p>Update your <code>~/.emacs.d/init.el</code> to:</p>

<p>```
(defun my-go-mode-hook ()
  ; Use goimports instead of go-fmt
  (setq gofmt-command &ldquo;goimports&rdquo;)
  ; Call Gofmt before saving
  (add-hook &lsquo;before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match &ldquo;go&rdquo; compile-command))</p>

<pre><code>  (set (make-local-variable 'compile-command)
       "go generate &amp;&amp; go build -v &amp;&amp; go test -v &amp;&amp; go vet"))
</code></pre>

<p>  ; Go oracle
  (load-file &ldquo;$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el&rdquo;)
  ; Godef jump key binding
  (local-set-key (kbd &ldquo;M-.&rdquo;) &lsquo;godef-jump)
  (local-set-key (kbd &ldquo;M-*&rdquo;) 'pop-tag-mark)
)
(add-hook 'go-mode-hook 'my-go-mode-hook)
```</p>

<p><strong>Restart Emacs</strong> to make these changes take effect.</p>

<h3>Get a test package to play with</h3>

<p>This package works with go-oracle (I tested it out while writing this blog post), so you should use it to give Go Oracle a spin:</p>

<p><code>
go get github.com/tleyden/checkers-bot-minimax
</code></p>

<h3>Set the oracle analysis scope</h3>

<p>From within emacs, open <code>$GOPATH/src/github.com/tleyden/checkers-bot-minimax/thinker.go</code></p>

<p>You need to tell Go Oracle the <strong>main</strong> package scope under which you want it to operate:</p>

<p><code>M-x go-oracle-set-scope</code></p>

<p>it will prompt you with:</p>

<p><code>Go oracle scope:</code></p>

<p>and you should enter:</p>

<p><code>github.com/tleyden/checkers-bot-minimax</code> and hit Enter.</p>

<p>Nothing will appear to happen, but now Go Oracle is now ready to show it&rsquo;s magic.  (<em>note</em> it will <strong>not</strong> autocomplete packages in this dialog, which is mildly annoying.  Make sure to spell them correctly.)</p>

<p><strong>Important:</strong> When you call <code>go-oracle-set-scope</code>, you always need to give it a <strong>main</strong> package.  This is something that will probably frequently trip you up while using Go Oracle.</p>

<h3>Use oracle to find the callers of a method</h3>

<p>You should still have the <code>$GOPATH/src/github.com/tleyden/checkers-bot-minimax/thinker.go</code> file open within emacs.</p>

<p>Position the cursor on the &ldquo;T&rdquo; in the <code>Think</code> method (line 13 of thinker.go):</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/Emacs_go_oracle_0" alt="screenshot" /></p>

<p>And then run</p>

<p><code>
M-x go-oracle-callers
</code></p>

<p>Emacs should open a new buffer on the right hand side with all of the places where the <code>Think</code> method is called.  In this case, there is only one place in the code that calls it:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/Emacs_go_oracle" alt="screenshot" /></p>

<p>To go to the call site, position your cursor on the red underscore to the left of &ldquo;dynamic method call&rdquo; and hit Enter.  It should take you to line 240 in gamecontroller.go:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/Emacs_go_oracle2" alt="screenshot" /></p>

<p>Note that it actually crossed package boundaries, since the called function (<code>Think</code>) was in the <code>main</code> package, while the call site was in the <code>checkersbot</code> package.</p>

<p>If you got this far, you are up and running with The Go Oracle on Emacs!</p>

<p>Now you should try it with one of your own packages.</p>

<p>This is just scratching the surface &mdash; to get more information on how to use Go Oracle, see <a href="https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view">go oracle: user manual</a>.</p>

<h2>Troubleshooting</h2>

<p>If you get this error when running <code>go-oracle-callers</code>:</p>

<p>```
Go Oracle</p>

<p>Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.</p>

<p>cgo failed: [go tool cgo -objdir /var/folders/2j/cp3qdxqs72g99l49h40f9p7m0000gn/T/net_C392209343 &mdash; -I /var/folders/2j/cp3qdxqs72g99l49h40f9p7m0000gn/T/net_C392209343 cgo_bsd.go cgo_resnew.go cgo_sockold.go cgo_unix.go]: exit status 1</p>

<p>Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.</p>

<p>&hellip; etc</p>

<p>```</p>

<p>Fix it by running:</p>

<p><code>
sudo xcodebuild -license
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go editor from scratch]]></title>
    <link href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/"/>
    <updated>2014-05-22T16:46:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch</id>
    <content type="html"><![CDATA[<p>This explains the steps to get a productive Emacs environment for Go programming on OSX, starting from scratch.</p>

<h2>Install Emacs</h2>

<p>I recommend using the emacs from <a href="http://emacsformacosx.com">emacsformacosx.com</a>.</p>

<p>It has a GUI installer so I won&rsquo;t say much more about it.</p>

<h2>Install lastest version of Go</h2>

<p>See <a href="https://golang.org/doc/install">Installing Go</a></p>

<p>After installing, you&rsquo;ll want to define the following environment variables in your <code>~/.bash_profile</code>.</p>

<p><code>
export GOROOT=/usr/local/go            
export GOPATH=~/Development/gocode
export PATH=$PATH:$GOROOT/bin
export PATH=$PATH:$GOPATH/bin
</code></p>

<p>These might be different on your system.</p>

<h2>Install additional go tools (godoc, etc)</h2>

<p>To get the <code>godoc</code> tool as well as others, run:</p>

<p><code>
go get golang.org/x/tools/cmd/...
</code></p>

<h2>Install Melpa</h2>

<p><a href="http://melpa.org/#/getting-started">Melpa</a> is a package manager for Emacs, and is required for <a href="https://github.com/dominikh/go-mode.el">go-mode</a></p>

<p>To configure emacs for melpa:</p>

<ul>
<li>Create a new file <code>~/.emacs.d/init.el</code></li>
<li>Add the following contents:</li>
</ul>


<p><code>
(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)
</code></p>

<p>Restart emacs and run <code>M-x package-list-packages</code> and you should see it contacting <code>http://melpa.milkbox.net</code> and you should also see lot of packages listed as being from the melpa archive.</p>

<h2>Install go-mode</h2>

<p>Run <code>M-x package-install</code> and when prompted, enter <code>go-mode</code> and hit enter.</p>

<p>Restart Emacs and open a .go file, you should see the mode as &ldquo;Go&rdquo; rather than &ldquo;Fundamental&rdquo;.</p>

<p>For a full description of what go-mode can do for you, see <a href="http://dominik.honnef.co/posts/2013/03/writing_go_in_emacs/">Dominik Honnef&rsquo;s blog</a>, but one really useful thing to be aware of is that you can quickly import packages via <code>C-c C-a</code></p>

<h2>Update Emacs path to find <code>godoc</code></h2>

<p>Run <code>M-x package-install</code> and enter <code>exec-path-from-shell</code></p>

<p>I got this warning:</p>

<p><code>``
Compiling file /Users/tleyden/.emacs.d/elpa/exec-path-from-shell-20160112.2246/exec-path-from-shell-pkg.el at Sat Feb  6 18:20:55 2016
Entering directory</code>/Users/tleyden/.emacs.d/elpa/exec-path-from-shell-20160112.2246/'</p>

<p>Compiling file /Users/tleyden/.emacs.d/elpa/exec-path-from-shell-20160112.2246/exec-path-from-shell.el at Sat Feb  6 18:20:55 2016</p>

<p>In exec-path-from-shell-setenv:
exec-path-from-shell.el:189:11:Warning: assignment to free variable</p>

<pre><code>`eshell-path-env'
</code></pre>

<p>```</p>

<p>Restart emacs.</p>

<h2>Update Emacs config for <code>godoc</code></h2>

<p>It&rsquo;s really useful to be able to able to pull up 3rd party or standard library docs from within Emacs using the <code>godoc</code> tool.</p>

<p><strong>PATH</strong></p>

<p>Add the following to your <code>~/.emacs.d/init.el</code> file so that it gets the PATH environment:</p>

<p>```
(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell (replace-regexp-in-string</p>

<pre><code>                      "[ \t\n]*$"
                      ""
                      (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
(setenv "PATH" path-from-shell)
(setq eshell-path-env path-from-shell) ; for eshell users
(setq exec-path (split-string path-from-shell path-separator))))
</code></pre>

<p>(when window-system (set-exec-path-from-shell-PATH))
```</p>

<p><strong>GOPATH</strong></p>

<p><code>
(setenv "GOPATH" "/Users/tleyden/Development/gocode")
</code></p>

<p>(replace the above path to the absolute path to the directory where you store your Go code)</p>

<p>After doing this step, you should be able to run <code>M-x godoc</code> and it should be able to autocomplete paths of packages.  (of course, you may want to <code>go get</code> some packages first if you don&rsquo;t have any)</p>

<h2>Automatically call gofmt on save</h2>

<p><code>gofmt</code> reformats code into the One True Go Style Coding Standard.  You&rsquo;ll want to call it every time you save a file.</p>

<p>Add these to your <code>~/.emacs.d/init.el</code>:</p>

<p><code>
(add-to-list 'exec-path "/Users/tleyden/Development/gocode/bin")
(add-hook 'before-save-hook 'gofmt-before-save)
</code></p>

<p>After this step, whenever you save a Go file, it will automatically reformat the file with <code>gofmt</code>.</p>

<h2>Godef</h2>

<p>Godef is essential: it lets you quickly jump around the code, as you might be used to with a full featured IDE.</p>

<p>Install godef itself:</p>

<p><code>
go get github.com/rogpeppe/godef
</code></p>

<p>Installing <a href="https://github.com/dominikh/go-mode.el">go-mode</a> automatically installs godef bindings.</p>

<p>To verify that godef bindings work:</p>

<ul>
<li>Putting the cursor over a method name</li>
<li>Try doing <code>M-x godef-jump</code> to jump into the method, and <code>M-*</code> to go back.</li>
</ul>


<p>In order to add godef key bindings, add these to your <code>~/.emacs.d/init.el</code>:</p>

<p><code>
(defun my-go-mode-hook ()
  ; Call Gofmt before saving                                                    
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Godef jump key binding                                                      
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
  )
(add-hook 'go-mode-hook 'my-go-mode-hook)
</code></p>

<p>and remove your previous call to <code>(add-hook 'before-save-hook 'gofmt-before-save)</code> since it&rsquo;s now redundant</p>

<p>Now you can jump into code with <code>M-.</code> and jump back with <code>M-*</code></p>

<h2>Autocomplete</h2>

<p>Install melpa auto-complete via <code>M-x package-install</code> followed by <code>auto-complete</code></p>

<p>Add the following to your <code>~/.emacs.d/init.el</code> file:</p>

<p><code>
(defun auto-complete-for-go ()
  (auto-complete-mode 1))
(add-hook 'go-mode-hook 'auto-complete-for-go)
</code></p>

<p>Restart emacs, and if you open a .go file the mode should be <code>Go AC</code> (AC == AutoComplete)</p>

<p>Before further verifying, we need to install go-autocomplete in the next step.</p>

<h3>go-autocomplete</h3>

<p>The basic autocomplete installed is not as &ldquo;go aware&rdquo; as it should be.  The go-autocomplete (aka <a href="https://github.com/nsf/gocode/">nsf/gocode</a>) package fixes that.</p>

<p>Install the <a href="https://github.com/nsf/gocode">gocode binary</a></p>

<p><code>
go get -u github.com/nsf/gocode
</code></p>

<p>and then install the melpa package via <code>M-x package-install</code> followed by <code>go-autocomplete</code></p>

<p>After installing <code>go-autocomplete</code>, open your <code>~/.emacs.d/init.el</code> file and make sure the following was added:</p>

<p><code>
(defun auto-complete-for-go ()
(auto-complete-mode 1))
 (add-hook 'go-mode-hook 'auto-complete-for-go)
</code></p>

<p>If it was not added, you&rsquo;ll need to add it yourself.</p>

<p>You&rsquo;ll also need the following (as recommended in <a href="https://github.com/nsf/gocode/issues/325">gocode issue 325</a>):</p>

<p><code>
(with-eval-after-load 'go-mode
   (require 'go-autocomplete))
</code></p>

<p>Now restart emacs, and when you start typing the name of a field in a struct it will popup something that looks like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/go-autocomplete.png" alt="screenshot" /></p>

<p>Note that is more &ldquo;go-aware&rdquo; than the default auto-complete functionality.</p>

<h2>Customize the emacs compile command to run <code>go build</code></h2>

<p>It&rsquo;s convenient to be able to run <code>M-x compile</code> to compile and test your Go code from within emacs.</p>

<p>To do that, edit your <code>~/.emacs.d/init.el</code> and replace your go-mode hook with:</p>

<p>```
(defun my-go-mode-hook ()
  ; Call Gofmt before saving
  (add-hook &lsquo;before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match &ldquo;go&rdquo; compile-command))</p>

<pre><code>  (set (make-local-variable 'compile-command)
       "go build -v &amp;&amp; go test -v &amp;&amp; go vet"))
</code></pre>

<p>  ; Godef jump key binding
  (local-set-key (kbd &ldquo;M-.&rdquo;) &lsquo;godef-jump)
  (local-set-key (kbd &ldquo;M-*&rdquo;) 'pop-tag-mark)
)
(add-hook 'go-mode-hook 'my-go-mode-hook)
```</p>

<p>After that, restart emacs, and when you type <code>M-x compile</code>, it should try to execute <code>go build -v &amp;&amp; go test -v &amp;&amp; go vet</code> instead of the default behavior.  On some projects, you might also want to run <code>go generate</code> before <code>go build</code></p>

<p><strong>Power tip</strong>: you can jump straight to each compile error by running <code>C-x `</code>.  Each time you do it, it will jump to the next error.</p>

<h2>Continue to Part 2</h2>

<p>go-imports and go-oracle are covered in <a href="../../27/configure-emacs-as-a-go-editor-from-scratch-part-2/">Part 2</a></p>

<h2>References</h2>

<ul>
<li><a href="http://www.youtube.com/watch?v=5wipWZKvNSo">5 minutes of go in emacs</a> by <a href="https://twitter.com/dlsspy">@dlsspy</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
