<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2016-11-08T09:04:02-08:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configuring InfluxDB and Grafana with Go client library]]></title>
    <link href="http://tleyden.github.io/blog/2016/09/12/configuring-influxdb-and-grafana-with-go-client-library/"/>
    <updated>2016-09-12T15:14:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2016/09/12/configuring-influxdb-and-grafana-with-go-client-library</id>
    <content type="html"><![CDATA[<p>Create a beautiful Grafana dashboard with realtime performance stats:</p>

<p><img src="https://cloud.githubusercontent.com/assets/296876/18493836/730085b0-79c7-11e6-9236-50dd3d4c72d4.png" alt="screen shot 2016-09-13 at 3 33 20 pm" /></p>

<h2>Install InfluxDB and Grafana</h2>

<p><code>
brew install influxdb grafana telegraf
brew services start influxdb
brew services start grafana
brew services start telegraf
</code></p>

<p>Versions at the time of this writing:</p>

<ul>
<li>InfluxDB: 1.0</li>
<li>Grafana: 3.1.1</li>
</ul>


<h2>Verify</h2>

<ul>
<li>The Grafana Web UI should be available at <a href="http://localhost:3000/">localhost:3000</a> &mdash; login with admin/admin</li>
<li>The InfluxDB Web UI should be available at <a href="http://localhost:8083/">localhost:8083</a></li>
</ul>


<h2>Create database on influx</h2>

<p>Create db named &ldquo;db&rdquo;</p>

<p>```
$ influx</p>

<blockquote><p>create database db
```</p></blockquote>

<h2>Edit telegraf conf</h2>

<p>Open <code>/usr/local/etc/telegraf.conf</code> in your favorite text editor and uncomment the entire statsd server section:</p>

<p>```</p>

<h1>Statsd Server</h1>

<p>[[inputs.statsd]]
  ## Address and port to host UDP listener on
  service_address = &ldquo;:8125&rdquo;</p>

<p>  .. etc ..
```</p>

<p>Set the database to use the &ldquo;db&rdquo; database created earlier, under the <code>outputs.influxdb</code> section of the telegraf config</p>

<p><code>
[[outputs.influxdb]]
  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
  ## Multiple urls can be specified as part of the same cluster,
  ## this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://localhost:8086"] # required
  ## The target database for metrics (telegraf will create it if not exists).
  database = "db" # required
</code></p>

<h2>Restart telegraf</h2>

<p><code>
brew services restart telegraf
</code></p>

<h2>Create Grafana Data Source</h2>

<ul>
<li>Open the <a href="http://localhost:3000/">Grafana Web UI</a> in your browsers (login with admin/admin)</li>
<li>Use the following values:</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494027/a87adcf8-79c8-11e6-912b-a5e5a82dad14.png" alt="screen shot 2016-09-13 at 3 39 43 pm" /></p>

<h2>Create Grafana Dashboard</h2>

<ul>
<li>Go to Dashboards / + New</li>
<li>Click the green thing on the left, and choose Add Panel / Graph</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494074/f230784e-79c8-11e6-9ab0-bc284b9e01f5.png" alt="screen shot 2016-09-13 at 3 43 50 pm" /></p>

<ul>
<li>Delete the test metric, which is not needed, by clicking the trash can to the right of &ldquo;Test Metric&rdquo;</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494109/1a927152-79c9-11e6-98f9-f338549ee3d9.png" alt="screen shot 2016-09-13 at 3 45 04 pm" /></p>

<ul>
<li>Under Panel / Datasource, choose <strong>db</strong>, and then hit <strong>+ Add Query</strong>, you will end up with this</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494180/7b8f9570-79c9-11e6-93c0-3f721d93002a.png" alt="screen shot 2016-09-13 at 3 47 21 pm" /></p>

<h2>Push sample data point from command line</h2>

<p>In order for the field we want to show up on the grafana dashboard, we need to push some data points to the telegraf statds daemon.</p>

<p>Run this in a shell to push the <code>foo:1|c</code> data point, which is a counter with value increasing by 1 on the key named &ldquo;foo&rdquo;.</p>

<p><code>
while true; do echo "foo:1|c" | nc -u -w0 127.0.0.1 8125; sleep 1; echo "pushed data point"; done
</code></p>

<h2>Create Grafana Dashboard, Part 2</h2>

<ul>
<li>Under <strong>select measurement</strong>, choose <strong>foo</strong> from the pulldown</li>
<li>On the top right of the screen near the clock icon, choose &ldquo;Last 5 minutes&rdquo; and set <strong>Refreshing every</strong> to 5 seconds</li>
<li>You should see your data point counter being increased!</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494256/f45fe55e-79c9-11e6-9663-abf9db7e7299.png" alt="screen shot 2016-09-13 at 3 51 16 pm" /></p>

<h2>Add Go client library and push data points</h2>

<p>Here&rsquo;s how to update to your <code>golang</code> application to push new datapoints.</p>

<ul>
<li>Install the <a href="github.com/peterbourgon/g2s">g2s</a> client library via:</li>
</ul>


<p><code>
$ go get github.com/peterbourgon/g2s
</code></p>

<ul>
<li>Here is some sample code to push data points to the <code>statds</code> telegraf process from your go program:</li>
</ul>


<p>```
statdsClient, err := g2s.Dial(&ldquo;udp&rdquo;, &ldquo;<a href="http://localhost:8125">http://localhost:8125</a>&rdquo;)
if err != nil {</p>

<pre><code>panic("Couldn't connect to statsd!")
</code></pre>

<p>}
req, err := http.NewRequest(&ldquo;GET&rdquo;, &ldquo;<a href="http://waynechain.com/">http://waynechain.com/</a>&rdquo;)
resp, err := http.DefaultClient.Do(req)
if err != nil {</p>

<pre><code>return err
</code></pre>

<p>}
s.StatsdClient.Timing(1.0, &ldquo;open_website&rdquo;, time.Since(startTime))
```</p>

<p>This will push statsd &ldquo;timing&rdquo; data points under the key &ldquo;open_website&rdquo;, with the normal sample rate (set to 0.1 to downsample and only take every 10th sample).  Run the code in a loop and it will start pushing stats to <code>statsd</code>.</p>

<p>Now, create a new Grafana dashboard with the steps above, but from the <strong>select measurement</strong> field choose <strong>open_website</strong>, and under <strong>SELECT</strong> choose <strong>field (mean)</strong> instead of <strong>field (value)</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go race detector gotcha with value receivers]]></title>
    <link href="http://tleyden.github.io/blog/2016/05/19/go-race-detector-gotcha-with-value-receivers/"/>
    <updated>2016-05-19T23:06:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2016/05/19/go-race-detector-gotcha-with-value-receivers</id>
    <content type="html"><![CDATA[<p>I ran into the following race detector error:</p>

<p>```
WARNING: DATA RACE
Write by goroutine 44:
  github.com/couchbaselabs/sg-replicate.stateFnActiveFetchCheckpoint()</p>

<pre><code>  /Users/tleyden/Development/gocode/src/github.com/couchbaselabs/sg-replicate/replication_state.go:53 +0xb1d
</code></pre>

<p>  github.com/couchbaselabs/sg-replicate.(*Replication).processEvents()</p>

<pre><code>  /Users/tleyden/Development/gocode/src/github.com/couchbaselabs/sg-replicate/synctube.go:120 +0xa3
</code></pre>

<p>Previous read by goroutine 27:
  github.com/couchbaselabs/sg-replicate.(*Replication).GetStats()</p>

<pre><code>  &lt;autogenerated&gt;:24 +0xef
</code></pre>

<p>  github.com/couchbase/sync_gateway/base.(*Replicator).populateActiveTaskFromReplication()</p>

<pre><code>  /Users/tleyden/Development/gocode/src/github.com/couchbase/sync_gateway/base/replicator.go:241 +0x145
</code></pre>

<p>```</p>

<p>Goroutine 44 was running this code:</p>

<p>```
func (r *Replication) shutdownEventChannel() {</p>

<pre><code>r.EventChan = nil
</code></pre>

<p>}
```</p>

<p>and nil'ing out the r.EventChan field.</p>

<p>While goroutine 27 was calling this code on the same <code>*Replication</code> instance:</p>

<p>```
func (r Replication) GetStats() ReplicationStats {</p>

<pre><code>return r.Stats
</code></pre>

<p>}
```</p>

<p>It didn&rsquo;t make sense, because they were accessing different fields of the <code>Replication</code> &mdash; one was writing to <code>r.EventChan</code> while the other was reading from <code>r.Stats</code>.</p>

<p>Then I changed the <code>GetStats()</code> method to this:</p>

<p>```
func (r Replication) GetStats() ReplicationStats {</p>

<pre><code>return ReplicationStats{}
</code></pre>

<p>}
```</p>

<p>and it still failed!</p>

<p>I started wandering around the Couchbase office looking for help, and got <a href="https://twitter.com/steveyentweets">Steve Yen</a> to help me.</p>

<p>He was asking me about using a pointer receiver vs a value receiver here, and then we realized that by using a value reciever it was <em>copying</em> all the fields, and therefore <strong>reading</strong> all of the fields, including the <code>r.EventChan</code> field that the other goroutine was concurrently writing to!  Hence, the data race that was subtly caused by using a value receiver..</p>

<p>The fix was to convert this over to a pointer reciever, and the data race disappeared!</p>

<p>```
func (r *Replication) GetStats() ReplicationStats {</p>

<pre><code> return r.Stats
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding vendoring to a Go project]]></title>
    <link href="http://tleyden.github.io/blog/2016/02/08/adding-vendoring-to-a-go-project/"/>
    <updated>2016-02-08T22:49:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/02/08/adding-vendoring-to-a-go-project</id>
    <content type="html"><![CDATA[<h2>Install gvt</h2>

<p>After doing some research, I decided to try <code>gvt</code> since it seemed simple and well documented, and integrated well with exiting tools like <code>go get</code>.</p>

<p><code>
$ export GO15VENDOREXPERIMENT=1
$ go get -u github.com/FiloSottile/gvt
</code></p>

<h2>Go get target project to be updated</h2>

<p>I&rsquo;m going to update <a href="https://github.com/tleyden/todolite-appserver">todolite-appserver</a> to use vendored dependencies for <em>some</em> of it&rsquo;s dependencies, just to see how things go.</p>

<p><code>
$ go get -u github.com/tleyden/todolite-appserver
</code></p>

<h2>Vendor dependencies</h2>

<p>I&rsquo;m going to vendor the dependency on <a href="github.com/alecthomas/kingpin">kingpin</a> since it has transitive dependencies of it&rsquo;s own (github.com/alecthomas/units, etc).  <code>gvt</code> handles this by automatically pulling all of the transitive dependencies.</p>

<p><code>
$ gvt fetch github.com/alecthomas/kingpin
</code></p>

<p>Now my directory structure looks like this:</p>

<p>```
├── main.go
└── vendor</p>

<pre><code>├── github.com
│   └── alecthomas
├── gopkg.in
│   └── alecthomas
└── manifest
</code></pre>

<p>```</p>

<p>Here is the <a href="https://gist.github.com/tleyden/60328c7e0fd778970314">manifest</a></p>

<p><code>gvt list</code> shows the following:</p>

<p><code>
$  gvt list
github.com/alecthomas/kingpin  https://github.com/alecthomas/kingpin  master 46aba6af542541c54c5b7a71a9dfe8f2ab95b93a
github.com/alecthomas/template https://github.com/alecthomas/template master 14fd436dd20c3cc65242a9f396b61bfc8a3926fc
github.com/alecthomas/units    https://github.com/alecthomas/units    master 2efee857e7cfd4f3d0138cc3cbb1b4966962b93a
gopkg.in/alecthomas/kingpin.v2 https://gopkg.in/alecthomas/kingpin.v2 master 24b74030480f0aa98802b51ff4622a7eb09dfddd
</code></p>

<h2>Verify it&rsquo;s using the vendor folder</h2>

<p>I opened up the <code>vendor/github.com/alecthomas/kingpin/global.go</code> and made the following change:</p>

<p>```
// Errorf prints an error message to stderr.
func Errorf(format string, args &hellip;interface{}) {</p>

<pre><code>fmt.Println("CALLED IT!!")
CommandLine.Errorf(format, args...)
</code></pre>

<p>}
```</p>

<p>Now verify that code is getting compiled and run:</p>

<p><code>
$ go run main.go changesfollower
CALLED IT!!
main: error: URL is empty
</code></p>

<p>(note: <code>export GO15VENDOREXPERIMENT=1</code> is still in effect in my shell)</p>

<h2>Restore the dependency</h2>

<p>Before I check in the <code>vendor</code> directory to git, I want to reset it to it&rsquo;s previous state before I made the above change to the <code>global.go</code> source file.</p>

<p><code>
$ gvt restore
</code></p>

<p>Now if I open <code>global.go</code> again, it&rsquo;s back to it&rsquo;s original state.  Nice!</p>

<h2>Add the vendor folder and push</h2>

<p><code>
$ git add vendor
$ git commit -m "..."
$ git push origin master
</code></p>

<p>Also, I updated the README to tell users to set the <code>GO15VENDOREXPERIMENT=1</code> variable:</p>

<p><code>
$ export GO15VENDOREXPERIMENT=1
$ go get -u github.com/tleyden/todolite-appserver
$ todolite-appserver --help
</code></p>

<p>but the instructions otherwise remained the same.  If someone tries to use this but forgets to set <code>GO15VENDOREXPERIMENT=1</code> in Go 1.5, it will still work, it will just use the kingpin dependency in the <code>$GOPATH</code> rather than the <code>vendor/</code> directory.  Ditto for someone using go 1.4 or earlier.</p>

<h2>Removing a vendored dependency</h2>

<p>As it turns out, I don&rsquo;t even need kingpin in this project, since I&rsquo;m using <a href="https://github.com/spf13/cobra">cobra</a>.  The kingpin dependency was caused by some leftover code I forgot to cleanup.</p>

<p>To remove it, I ran:</p>

<p><code>
$ gvt delete github.com/alecthomas/kingpin
$ gvt delete github.com/alecthomas/template
$ gvt delete github.com/alecthomas/units
$ gvt delete gopkg.in/alecthomas/kingpin.v2
</code></p>

<p>In this case, since it was my only dependency, it was easy to identify the transitive dependencies.  In general though it looks like it&rsquo;s up to you as a user to track down which ones to remove.  I filed <a href="https://github.com/FiloSottile/gvt/issues/16">gvt issue 16</a> to hopefully address that.</p>

<h2>Editor annoyances</h2>

<p>I have emacs setup using the <a href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/">steps in this blog post</a>, and I&rsquo;m running into the following annoyances:</p>

<ul>
<li>When I use <code>godef</code> to jump into the code of vendored dependency, it takes me to source code that lives in the <code>GOPATH</code>, which might be <em>different</em> than what&rsquo;s under <code>vendor/</code>.  Also, if I edit it there, my changes won&rsquo;t be reflected when I rebuild.</li>
<li>I usually search for things in the project via <code>M-x rgrep</code>, but now it&rsquo;s searching through every repo under <code>vendor/</code> and returning things I&rsquo;m not interested in .. since most of the time I only want to search within my project.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go Editor From Scratch Part 3]]></title>
    <link href="http://tleyden.github.io/blog/2016/02/07/configure-emacs-as-a-go-editor-from-scratch-part-3/"/>
    <updated>2016-02-07T04:25:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/02/07/configure-emacs-as-a-go-editor-from-scratch-part-3</id>
    <content type="html"><![CDATA[<p>This is a continuation from <a href="http://tleyden.github.io/blog/2014/05/27/configure-emacs-as-a-go-editor-from-scratch-part-2/">a previous blog post</a>.  In this post I&rsquo;m going to focus on making emacs look a bit better.</p>

<p>Currently:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs_ugly.png" alt="screenshot" /></p>

<h2>Install a nicer theme</h2>

<p>I like the <code>taming-mr-arneson-theme</code>, so let&rsquo;s install that one.  Feel free to browse the emacs themes and find one that you like more.</p>

<p><code>
$ `mkdir ~/.emacs.d/color-themes`
$ `wget https://raw.githubusercontent.com/emacs-jp/replace-colorthemes/d23b086141019c76ea81881bda00fb385f795048/taming-mr-arneson-theme.el`
</code></p>

<p>Update your <code>~/emacs.d/init.el</code> to add the following lines to the top of the file:</p>

<p><code>
(add-to-list 'custom-theme-load-path "/Users/tleyden/.emacs.d/color-themes/")
(load-theme 'taming-mr-arneson t)
</code></p>

<p>Now when you restart emacs it should look like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs_taming_mr_arneson.png" alt="screenshot" /></p>

<p> ## Directory Tree</p>

<p><code>
$ cd ~/DevLibraries
$ git clone https://github.com/jaypei/emacs-neotree.git neotree
</code></p>

<p>Update your <code>~/emacs.d/init.el</code> to add the following lines:</p>

<p><code>
(add-to-list 'load-path "/some/path/neotree")
(require 'neotree)
</code></p>

<p>Open a <code>.go</code> file and the enter <code>M-x neotree-dir</code> to show a directory browser:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs-neotree.png" alt="screnshot" /></p>

<p>Ref: <a href="http://www.emacswiki.org/emacs/NeoTree">NeoTree</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test coverage for Go with drone.io and coveralls.io]]></title>
    <link href="http://tleyden.github.io/blog/2015/03/31/test-coverage-for-go-with-drone-dot-io-and-coveralls-dot-io/"/>
    <updated>2015-03-31T07:26:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2015/03/31/test-coverage-for-go-with-drone-dot-io-and-coveralls-dot-io</id>
    <content type="html"><![CDATA[<p>This will walk you through setting up a test coverage report on coveralls.io which will be updated every time a new build happens on drone.io (a continuous integration server similar to TavisCI).</p>

<p>I&rsquo;m going to use the <a href="https://github.com/couchbaselabs/sg-replicate">couchbaselabs/sg-replicate</a> repo as an example, since it currently does not have any test coverage statistics.  The goal is to end up with a badge in the README that points to a test coverage report hosted on coveralls.io.</p>

<h2>Clone the repo</h2>

<p><code>
$ git clone https://github.com/couchbaselabs/sg-replicate.git
$ cd sg-replicate
</code></p>

<h2>Test coverage command line stats</h2>

<p>```
$ go test -cover
go tool: no such tool &ldquo;cover&rdquo;; to install:</p>

<pre><code>go get golang.org/x/tools/cmd/cover
</code></pre>

<p>```</p>

<p>Try again:</p>

<p><code>
$ go get golang.org/x/tools/cmd/cover &amp;&amp; go test -cover
PASS
coverage: 69.4% of statements
ok      github.com/couchbaselabs/sg-replicate   0.156s
</code></p>

<p>Ouch, 69.4% is barely a C-. (if you round up!)</p>

<h2>Coverage breakdown</h2>

<p>Text report:</p>

<p><code>
$ go test -coverprofile=coverage.out
$ go tool cover -func=coverage.out
github.com/couchbaselabs/sg-replicate/attachment.go:15:         NewAttachment           84.6%
github.com/couchbaselabs/sg-replicate/changes_feed_parameters.go:20:    NewChangesFeedParams        100.0%
github.com/couchbaselabs/sg-replicate/changes_feed_parameters.go:30:    FeedType            100.0%
github.com/couchbaselabs/sg-replicate/changes_feed_parameters.go:34:    Limit               100.0%
</code></p>

<p>HTML report:</p>

<p><code>
$ go test -coverprofile=coverage.out
$ go tool cover -html=coverage.out
</code></p>

<p>This should open up the following report in your default browser:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/go_coverage_html.png" alt="html report" /></p>

<h2>Coveralls.io setup</h2>

<ul>
<li>Login to coveralls.io</li>
<li>Create a new repo</li>
<li>Get the repo token from the <strong>SET UP COVERALLS</strong> section</li>
</ul>


<p>At this point, your empty coveralls repo will look something like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/coveralls_empty_repo.png" alt="empty coveralls repo" /></p>

<h2>Configure Drone.io + Goveralls</h2>

<p>If you have not already done so, setup a drone.io build for your repo.</p>

<p>On the drone.io <strong>Settings</strong> page, make the following changes:</p>

<p><strong>Environment Variables</strong></p>

<p>In the Environment Variables section of the web ui, add:</p>

<p><code>
COVERALLS_TOKEN=&lt;coveralls_repo_token&gt;
</code></p>

<p><strong>Commands</strong></p>

<p>In the commands section, you can replace your existing <code>go test</code> call with:</p>

<p><code>
go get github.com/axw/gocov/gocov
go get github.com/mattn/goveralls
goveralls -service drone.io -repotoken $COVERALLS_TOKEN
</code></p>

<p>Here&rsquo;s what it should look like:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/drone_io_coverage.png" alt="drone io ui" /></p>

<h2>Kick off a build</h2>

<p>Go to the drone.io project page for your repo, and hit <strong>Build Now</strong></p>

<p>At the bottom of the build output, you should see:</p>

<p><code>
Job #1.1
https://coveralls.io/jobs/5189501
</code></p>

<p>If you follow the link, you should see something like:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/coveralls_sgreplicate.png" alt="coveralls report" /></p>

<p>Looks like we just went from a C- to a B!  I have no idea why the coverage improved, but I&rsquo;ll take it.</p>

<h2>Add a badge, call it a day</h2>

<p>On the coveralls.io project page for your repo, you should see a button near the top called <strong>Badge URLS</strong>.  Click and copy/paste the markdown, which should look something like this:</p>

<p><code>
[![Coverage Status](https://coveralls.io/repos/couchbaselabs/sg-replicate/badge.svg?branch=master)](https://coveralls.io/r/couchbaselabs/sg-replicate?branch=master)
</code></p>

<p>And add it to your project&rsquo;s README.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/sg_replicate_badges.png" alt="badges" /></p>

<h2>References</h2>

<ul>
<li><a href="https://blog.golang.org/cover">https://blog.golang.org/cover</a></li>
<li><a href="https://github.com/mattn/goveralls">https://github.com/mattn/goveralls</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
