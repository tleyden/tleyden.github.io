<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2022-10-24T14:14:30-07:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding function closures in Go]]></title>
    <link href="http://tleyden.github.io/blog/2016/12/20/understanding-function-closures-in-go/"/>
    <updated>2016-12-20T18:10:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/12/20/understanding-function-closures-in-go</id>
    <content type="html"><![CDATA[<p>Function closures are <em>really powerful</em>.</p>

<p>Essentially you can think of them like <em>stateful functions</em>, in the sense that they encapsulate state.  The state that they happen to capture (or &ldquo;close over&rdquo; &mdash; hence the name &ldquo;closure&rdquo;) is everything that&rsquo;s in scope when they are defined.</p>

<p>First some very basic higher order functions.</p>

<h2>Higher order functions</h2>

<p>Functions that take other functions and call them are called higher order functions.  Here&rsquo;s a trivial example:</p>

<p>```
func sendLoop(sender func()) {</p>

<pre><code>sender()
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>mySender := func() {
    fmt.Printf("I should send something\n")
}
sendLoop(mySender)
</code></pre>

<p>}
```</p>

<p>In the <code>main()</code> function, we define a function called <code>mySender</code> and pass it to the <code>sendLoop()</code> function.  <code>sendLoop()</code> takes a confusing looking argument called <code>sender func()</code> &mdash; the parameter name is <code>sender</code>, and the parameter type is <code>func()</code>, which is a function that takes no arguments and returns no values.</p>

<p>To make this slightly less confusing, we can define a named <code>SenderFunc</code> function type and use that:</p>

<p>```
// A SenderFunc is a function that takes no arguments, returns nothing
// and presumably sends something
type SenderFunc func()</p>

<p>func sendLoop(sender SenderFunc) {</p>

<pre><code>sender()
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>mySender := func() {
    fmt.Printf("I should send something\n")
}

sendLoop(mySender)
</code></pre>

<p>}
```</p>

<p><code>sendLoop()</code> has been updated to take <code>SenderFunc</code> as an argument, which is easier to read than taking a <code>func()</code> as an argument (which looks a bit like a function call!)  If the <code>SenderFunc</code> type took more parameters and/or returned more values, having this in a defined type would be crucial for readability.</p>

<h2>Adding a return value</h2>

<p>Let&rsquo;s make it slightly more realistic &mdash; let&rsquo;s say that the <code>sendLoop()</code> might need to retry calling the <code>SenderFunc</code> passed to it a few times until it actually works.  So the <code>SenderFunc</code> definition will need to be updated so that it returns a boolean that indicates whether a retry is necessary.</p>

<p>```
// A SenderFunc is a function that takes no arguments and returns a boolean
// that indicates whether or not the send needs to be retried (in the case of failure)
type SenderFunc func() bool</p>

<p>func sendLoop(sender SenderFunc) {</p>

<pre><code>for {
    retry := sender()
    if !retry {
        return
    }
    time.Sleep(time.Second)
}
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>mySender := func() bool {
    fmt.Printf("I should send something and return a real retry value\n")
    return false
}

sendLoop(mySender)
</code></pre>

<p>}
```</p>

<p>One thing to note here is the clean separation of concerns &mdash; all <code>sendLoop()</code> knows is that it gets a <code>SenderFunc</code> which it should call and it will return a boolean indicator of whether or not it worked or not.  It knows absolutely nothing about the inner workings of the <code>SenderFunc</code>, nor does it care.</p>

<h2>A stateful sender &mdash; the wrong way</h2>

<p>You have a new requirement that you need to only retry the <code>SenderFunc</code> 10 times, and then you should give up.</p>

<p>Your first inclination might be to take this approach:</p>

<p>```
// A SenderFunc is a function that takes no arguments and returns a boolean
// that indicates whether or not the send needs to be retried (in the case of failure)
type SenderFunc func() bool</p>

<p>func sendLoop(sender SenderFunc) {</p>

<pre><code>counter := 0
for {
    retry := sender()
    if !retry {
        return
    }
    counter += 1
    if counter &gt;= 10 {
        return
    }
    time.Sleep(time.Second)
}
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>mySender := func() bool {
    fmt.Printf("I should send something and return a real retry value\n")
    return false
}

sendLoop(mySender)
</code></pre>

<p>}</p>

<p>```</p>

<p>This will work, but it makes the <code>sendLoop()</code> less generally useful.  What happens when your co-worker hears about this nifty <code>sendLoop()</code> you wrote, and wants to use it with their own <code>SenderFunc</code> but wants it to retry 100 times?  (side note: your <code>SenderFunc</code> implementation simply prints to the console, whereas theirs might write to a Slack channel, yet the <code>sendLoop()</code> will still work!)</p>

<p>To make it more generic, you could take this approach:</p>

<p>```
func sendLoop(sender SenderFunc, maxNumAttempts int) {</p>

<pre><code>counter := 0
for {
    retry := sender()
    if !retry {
        return
    }
    counter += 1
    if counter &gt;= maxNumAttempts {
        return
    }
    time.Sleep(time.Second)
}
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>mySender := func() bool {
    fmt.Printf("I should send something and return a real retry value\n")
    return false
}

sendLoop(mySender, 10)
</code></pre>

<p>}</p>

<p>```</p>

<p>Which will work &mdash; but there&rsquo;s a catch.  Now that you&rsquo;ve changed the method function signature of <code>sendLoop()</code> to take a second argument, all of the code that consumes <code>sendLoop()</code> will now be broken.  If this were an exported function, it would be an even worse problem.</p>

<p>Luckily there is a much better way.</p>

<h2>A stateful sender &mdash; the right way using function closures</h2>

<p>Rather than making <code>sendLoop()</code> do the retry-related accounting and passing it parameters for that accounting, you can make the <code>SenderFunc</code> handle this and encapsulate the state via a function closure.  In this case, the state is the number of retries that have been attempted, which will start at 0 and then increase on every call to the <code>SenderFunc</code></p>

<p>How can <code>SenderFunc</code> keep internal state?  It can &ldquo;close over&rdquo; any values that are in scope, which become associated with the function instance (I&rsquo;m calling it an &ldquo;instance&rdquo; because it has state, as we shall see) and will be bound to the function instance as long as the function instance is around.</p>

<p>Here&rsquo;s what the final code looks like:</p>

<p>```</p>

<p>// A SenderFunc is a function that takes no arguments and returns a boolean
// that indicates whether or not the send needs to be retried (in the case of failure)
type SenderFunc func() bool</p>

<p>func sendLoop(sender SenderFunc) {</p>

<pre><code>for {
    retry := sender()
    if !retry {
        return
    }
    time.Sleep(time.Second)
}
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>counter := 0              // internal state closed over and mutated by mySender function
maxNumAttempts := 10      // internal state closed over and read by mySender function

mySender := func() bool {
    sentSuccessfully := rand.Intn(5)
    if sentSuccessfully {
        return false // it worked, we're done!
    }

    // didn't work, any retries left?
    // only retry if we haven't exhausted attempts
    counter += 1
    return counter &lt; maxNumAttempts

}

sendLoop(mySender)
</code></pre>

<p>}</p>

<p>```</p>

<p>The <code>counter</code> state variable is <em>bound</em> to the <code>mySender</code> function instance, which is able to update <code>counter</code> on every failed send attempt since the function &ldquo;closes over&rdquo; the <code>counter</code> variable that is in scope when the function instance is created.  This is the heart of the idea of a function closure.</p>

<p>The <code>sendLoop()</code> doesn&rsquo;t know anything about the internals of the <code>SenderFunc</code> in terms of how it tracks whether or not it should retry or not, it just treats it as a black box.  Different <code>SenderFunc</code> implementations could use vastly different rules and/or states for deciding whether the <code>sendLoop()</code> should retry a failed send.</p>

<p>If you wanted to make it even more flexible, you could update the <code>SenderFunc</code> to return a <code>time.Duration</code> in addition to a <code>bool</code> to indicate retry, which would allow you to implement &ldquo;backoff retry&rdquo; strategies and so forth.</p>

<h2>What about thread/goroutine safety?</h2>

<p>If you&rsquo;re passing the same function instances that have internal state (aka function closures) to multiple goroutines that are calling it, you&rsquo;re going to end up causing data races.  There&rsquo;s nothing special about function closures that protect you from this.</p>

<p>The simplest way to deal with is to make a new function instance for each goroutine you are sending the function instance to, which is probably what you want.  In theory though, you could also wrap the state update in a mutex, which is probably <em>not</em> what you want since that will cause goroutines to block eachother trying to grab the mutex.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tuning the Go HTTP client settings for load testing]]></title>
    <link href="http://tleyden.github.io/blog/2016/11/21/tuning-the-go-http-client-library-for-load-testing/"/>
    <updated>2016-11-21T10:37:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/11/21/tuning-the-go-http-client-library-for-load-testing</id>
    <content type="html"><![CDATA[<p>While working on a load testing tool in Go, I ran into a situation where I was seeing tens of thousands of sockets in the <code>TIME_WAIT</code> state.</p>

<p>Here are a few ways to get into this situation and how to fix each one.</p>

<h2>Repro #1: Create excessive TIME_WAIT connections by forgetting to read the response body</h2>

<p>Run the following code on a linux machine:</p>

<p>```
package main</p>

<p>import (</p>

<pre><code>"fmt"
"html"
"log"
"net"
"net/http"
"time"
</code></pre>

<p>)</p>

<p>func startWebserver() {</p>

<pre><code>http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Hello, %q", html.EscapeString(r.URL.Path))
})

go http.ListenAndServe(":8080", nil)
</code></pre>

<p>}</p>

<p>func startLoadTest() {</p>

<pre><code>count := 0
for {
    resp, err := http.Get("http://localhost:8080/")
    if err != nil {
        panic(fmt.Sprintf("Got error: %v", err))
    }
    resp.Body.Close()
    log.Printf("Finished GET request #%v", count)
    count += 1
}
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>// start a webserver in a goroutine
startWebserver()

startLoadTest()
</code></pre>

<p>}</p>

<p>```</p>

<p>and in a separate terminal while the program is running, run:</p>

<p><code>
netstat -n | grep -i 8080 | grep -i time_wait | wc -l
</code></p>

<p>and you will see this number constantly growing:</p>

<p><code>
root@14952c2356a7:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
166
root@14952c2356a7:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
231
root@14952c2356a7:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
293
root@14952c2356a7:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
349
...
</code></p>

<h2>Fix: Read Response Body</h2>

<p>Update the <code>startLoadTest()</code> method to add the following line of code (and related imports):</p>

<p>```
func startLoadTest() {</p>

<pre><code>for {
        ...
    if err != nil {
        panic(fmt.Sprintf("Got error: %v", err))
    }
    io.Copy(ioutil.Discard, resp.Body)  // &lt;-- add this line
    resp.Body.Close()
            ...
}
</code></pre>

<p>}
```</p>

<p>Now when you re-run it, calling <code>netstat -n | grep -i 8080 | grep -i time_wait | wc -l</code> while it&rsquo;s running will return 0.</p>

<h2>Repro #2: Create excessive TIME_WAIT connections by exceeding connection pool</h2>

<p>Another way to end up with excessive connections in the <code>TIME_WAIT</code> state is to consistently exceed the connnection pool and cause many short-lived connections to be opened.</p>

<p>Here&rsquo;s some code which starts up 100 goroutines which are all trying to make requests concurrently, and each request has a 50 ms delay:</p>

<p>```</p>

<p>package main</p>

<p>import (</p>

<pre><code>"fmt"
"html"
"io"
"io/ioutil"
"log"
"net/http"
"time"
</code></pre>

<p>)</p>

<p>func startWebserver() {</p>

<pre><code>http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {

    time.Sleep(time.Millisecond * 50)

    fmt.Fprintf(w, "Hello, %q", html.EscapeString(r.URL.Path))
})

go http.ListenAndServe(":8080", nil)
</code></pre>

<p>}</p>

<p>func startLoadTest() {</p>

<pre><code>count := 0
for {
    resp, err := http.Get("http://localhost:8080/")
    if err != nil {
        panic(fmt.Sprintf("Got error: %v", err))
    }
    io.Copy(ioutil.Discard, resp.Body)
    resp.Body.Close()
    log.Printf("Finished GET request #%v", count)
    count += 1
}
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>// start a webserver in a goroutine
startWebserver()

for i := 0; i &lt; 100; i++ {
    go startLoadTest()
}

time.Sleep(time.Second * 2400)
</code></pre>

<p>}</p>

<p>```</p>

<p>In another shell run <code>netstat</code>, note that the number of connections in the <code>TIME_WAIT</code> state is growing again, <em>even though the response is being read</em></p>

<p><code>
root@14952c2356a7:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
166
root@14952c2356a7:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
231
root@14952c2356a7:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
293
root@14952c2356a7:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
349
...
</code></p>

<p>To understand what&rsquo;s going on, we&rsquo;ll need to dig in a little deeper into the <code>TIME_WAIT</code> state.</p>

<h2>What is the socket <code>TIME_WAIT</code> state anyway?</h2>

<p>So what&rsquo;s going on here?</p>

<p>What&rsquo;s happening is that we are creating lots of short lived TCP connections, and the Linux kernel networking stack is keeping tabs on the closed connections to prevent certain problems.</p>

<p>From <a href="http://www.isi.edu/touch/pubs/infocomm99/infocomm99-web/">The TIME-WAIT state in TCP and Its Effect on Busy Servers</a>:</p>

<blockquote><p>The purpose of TIME-WAIT is to prevent delayed packets from one connection being accepted by a later connection. Concurrent connections are isolated by other mechanisms, primarily by addresses, ports, and sequence numbers[1].</p></blockquote>

<h2>Why so many TIME_WAIT sockets?  What about connection re-use?</h2>

<p>By default, the Golang HTTP client will do connection pooling.  Rather than closing a socket connection after an HTTP request, it will add it to an idle connection pool, and if you try to make another HTTP request before the idle connection timeout (90 seconds by default), then it will re-use that existing connection rather than creating a new one.</p>

<p>This will keep the number of total socket connections low, as long as the pool doesn&rsquo;t fill up.  If the pool is full of established socket connections, then it will just create a new socket connection for the HTTP request and use that.</p>

<p>So how big is the connection pool?  A quick look into <a href="https://golang.org/src/net/http/transport.go">transport.go</a> tells us:</p>

<p>```</p>

<p>var DefaultTransport RoundTripper = &amp;Transport{</p>

<pre><code>    ... 
MaxIdleConns:          100,
IdleConnTimeout:       90 * time.Second,
    ... 
</code></pre>

<p>}</p>

<p>// DefaultMaxIdleConnsPerHost is the default value of Transport&rsquo;s
// MaxIdleConnsPerHost.
const DefaultMaxIdleConnsPerHost = 2
```</p>

<ul>
<li>The <code>MaxIdleConns: 100</code> setting sets the size of the connection pool to 100 connections, but <em>with one major caveat</em>: this is on a per-host basis.  See the comments on the <code>DefaultMaxIdleConnsPerHost</code> below for more details on the implications of this.</li>
<li>The <code>IdleConnTimeout</code> is set to 90 seconds, meaning that after a connection stays in the pool and is unused for 90 seconds, it will be removed from the pool and closed.</li>
<li>The <code>DefaultMaxIdleConnsPerHost = 2</code> setting below it.  What this means is that even though the entire connection pool is set to 100, there is a <em>per-host</em> cap of only 2 connections!</li>
</ul>


<p>In the above example, there are 100 goroutines trying to concurrently make requests to the same host, but the connection pool can only hold 2 sockets.  So in the first &ldquo;round&rdquo; of the goroutines finishing their http request, 2 of the sockets will remain open in the pool, while the remaining 98 connections will be closed and end up in the <code>TIME_WAIT</code> state.</p>

<p>Since this is happening in a loop, you will quickly accumulate thousands or tens of thousands of connections in the <code>TIME_WAIT</code> state.  Eventually, for that particular host at least, you will run out of ephemeral ports and not be able to open new client connections.  For a load testing tool, this is <em>bad news</em>.</p>

<h2>Fix: Tuning the http client to increase connection pool size</h2>

<p>Here&rsquo;s how to fix this issue.</p>

<p>```
import (</p>

<pre><code> .. 
</code></pre>

<p>)</p>

<p>var myClient *http.Client</p>

<p>func startWebserver() {</p>

<pre><code>  ... same code as before
</code></pre>

<p>}</p>

<p>func startLoadTest() {</p>

<pre><code>    ... 
for {
    resp, err := myClient.Get("http://localhost:8080/")  // &lt;-- use a custom client with custom *http.Transport
            ... everything else is the same
}
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>// Customize the Transport to have larger connection pool
defaultRoundTripper := http.DefaultTransport
defaultTransportPointer, ok := defaultRoundTripper.(*http.Transport)
if !ok {
    panic(fmt.Sprintf("defaultRoundTripper not an *http.Transport"))
}
defaultTransport := *defaultTransportPointer // dereference it to get a copy of the struct that the pointer points to
defaultTransport.MaxIdleConns = 100
defaultTransport.MaxIdleConnsPerHost = 100

myClient = &amp;http.Client{Transport: &amp;defaultTransport}

// start a webserver in a goroutine
startWebserver()

for i := 0; i &lt; 100; i++ {
    go startLoadTest()
}

time.Sleep(time.Second * 2400)
</code></pre>

<p>}</p>

<p>```</p>

<p>This bumps the total maximum idle connections (connection pool size) and the per-host connection pool size to 100.</p>

<p>Now when you run this and check the <code>netstat</code> output, the number of <code>TIME_WAIT</code> connections stays at 0</p>

<p><code>
root@bbe9a95545ae:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
0
root@bbe9a95545ae:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
0
root@bbe9a95545ae:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
0
root@bbe9a95545ae:/# netstat -n | grep -i 8080 | grep -i time_wait | wc -l
0
</code></p>

<p>The problem is now fixed!</p>

<p>If you have higher concurrency requirements, you may want to bump this number to something higher than 100.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring InfluxDB and Grafana with Go client library]]></title>
    <link href="http://tleyden.github.io/blog/2016/09/12/configuring-influxdb-and-grafana-with-go-client-library/"/>
    <updated>2016-09-12T15:14:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2016/09/12/configuring-influxdb-and-grafana-with-go-client-library</id>
    <content type="html"><![CDATA[<p>Create a beautiful Grafana dashboard with realtime performance stats:</p>

<p><img src="https://cloud.githubusercontent.com/assets/296876/18493836/730085b0-79c7-11e6-9236-50dd3d4c72d4.png" alt="screen shot 2016-09-13 at 3 33 20 pm" /></p>

<h2>Install InfluxDB and Grafana</h2>

<p><code>
brew install influxdb grafana telegraf
brew services start influxdb
brew services start grafana
brew services start telegraf
</code></p>

<p>Versions at the time of this writing:</p>

<ul>
<li>InfluxDB: 1.0</li>
<li>Grafana: 3.1.1</li>
</ul>


<h2>Verify</h2>

<ul>
<li>The Grafana Web UI should be available at <a href="http://localhost:3000/">localhost:3000</a> &mdash; login with admin/admin</li>
<li>The InfluxDB Web UI should be available at <a href="http://localhost:8083/">localhost:8083</a></li>
</ul>


<h2>Create database on influx</h2>

<p>Create db named &ldquo;db&rdquo;</p>

<p>```
$ influx</p>

<blockquote><p>create database db
```</p></blockquote>

<h2>Edit telegraf conf</h2>

<p>Open <code>/usr/local/etc/telegraf.conf</code> in your favorite text editor and uncomment the entire statsd server section:</p>

<p>```</p>

<h1>Statsd Server</h1>

<p>[[inputs.statsd]]
  ## Address and port to host UDP listener on
  service_address = &ldquo;:8125&rdquo;</p>

<p>  .. etc ..
```</p>

<p>Set the database to use the &ldquo;db&rdquo; database created earlier, under the <code>outputs.influxdb</code> section of the telegraf config</p>

<p><code>
[[outputs.influxdb]]
  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
  ## Multiple urls can be specified as part of the same cluster,
  ## this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://localhost:8086"] # required
  ## The target database for metrics (telegraf will create it if not exists).
  database = "db" # required
</code></p>

<h2>Restart telegraf</h2>

<p><code>
brew services restart telegraf
</code></p>

<h2>Create Grafana Data Source</h2>

<ul>
<li>Open the <a href="http://localhost:3000/">Grafana Web UI</a> in your browsers (login with admin/admin)</li>
<li>Use the following values:</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494027/a87adcf8-79c8-11e6-912b-a5e5a82dad14.png" alt="screen shot 2016-09-13 at 3 39 43 pm" /></p>

<h2>Create Grafana Dashboard</h2>

<ul>
<li>Go to Dashboards / + New</li>
<li>Click the green thing on the left, and choose Add Panel / Graph</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494074/f230784e-79c8-11e6-9ab0-bc284b9e01f5.png" alt="screen shot 2016-09-13 at 3 43 50 pm" /></p>

<ul>
<li>Delete the test metric, which is not needed, by clicking the trash can to the right of &ldquo;Test Metric&rdquo;</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494109/1a927152-79c9-11e6-98f9-f338549ee3d9.png" alt="screen shot 2016-09-13 at 3 45 04 pm" /></p>

<ul>
<li>Under Panel / Datasource, choose <strong>db</strong>, and then hit <strong>+ Add Query</strong>, you will end up with this</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494180/7b8f9570-79c9-11e6-93c0-3f721d93002a.png" alt="screen shot 2016-09-13 at 3 47 21 pm" /></p>

<h2>Push sample data point from command line</h2>

<p>In order for the field we want to show up on the grafana dashboard, we need to push some data points to the telegraf statds daemon.</p>

<p>Run this in a shell to push the <code>foo:1|c</code> data point, which is a counter with value increasing by 1 on the key named &ldquo;foo&rdquo;.</p>

<p><code>
while true; do echo "foo:1|c" | nc -u -w0 127.0.0.1 8125; sleep 1; echo "pushed data point"; done
</code></p>

<h2>Create Grafana Dashboard, Part 2</h2>

<ul>
<li>Under <strong>select measurement</strong>, choose <strong>foo</strong> from the pulldown</li>
<li>On the top right of the screen near the clock icon, choose &ldquo;Last 5 minutes&rdquo; and set <strong>Refreshing every</strong> to 5 seconds</li>
<li>You should see your data point counter being increased!</li>
</ul>


<p><img src="https://cloud.githubusercontent.com/assets/296876/18494256/f45fe55e-79c9-11e6-9663-abf9db7e7299.png" alt="screen shot 2016-09-13 at 3 51 16 pm" /></p>

<h2>Add Go client library and push data points</h2>

<p>Here&rsquo;s how to update to your <code>golang</code> application to push new datapoints.</p>

<ul>
<li>Install the <a href="github.com/peterbourgon/g2s">g2s</a> client library via:</li>
</ul>


<p><code>
$ go get github.com/peterbourgon/g2s
</code></p>

<ul>
<li>Here is some sample code to push data points to the <code>statds</code> telegraf process from your go program:</li>
</ul>


<p>```
statdsClient, err := g2s.Dial(&ldquo;udp&rdquo;, &ldquo;<a href="http://localhost:8125">http://localhost:8125</a>&rdquo;)
if err != nil {</p>

<pre><code>panic("Couldn't connect to statsd!")
</code></pre>

<p>}
req, err := http.NewRequest(&ldquo;GET&rdquo;, &ldquo;<a href="http://waynechain.com/">http://waynechain.com/</a>&rdquo;)
resp, err := http.DefaultClient.Do(req)
if err != nil {</p>

<pre><code>return err
</code></pre>

<p>}
s.StatsdClient.Timing(1.0, &ldquo;open_website&rdquo;, time.Since(startTime))
```</p>

<p>This will push statsd &ldquo;timing&rdquo; data points under the key &ldquo;open_website&rdquo;, with the normal sample rate (set to 0.1 to downsample and only take every 10th sample).  Run the code in a loop and it will start pushing stats to <code>statsd</code>.</p>

<p>Now, create a new Grafana dashboard with the steps above, but from the <strong>select measurement</strong> field choose <strong>open_website</strong>, and under <strong>SELECT</strong> choose <strong>field (mean)</strong> instead of <strong>field (value)</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go race detector gotcha with value receivers]]></title>
    <link href="http://tleyden.github.io/blog/2016/05/19/go-race-detector-gotcha-with-value-receivers/"/>
    <updated>2016-05-19T23:06:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2016/05/19/go-race-detector-gotcha-with-value-receivers</id>
    <content type="html"><![CDATA[<p>I ran into the following race detector error:</p>

<p>```
WARNING: DATA RACE
Write by goroutine 44:
  github.com/couchbaselabs/sg-replicate.stateFnActiveFetchCheckpoint()</p>

<pre><code>  /Users/tleyden/Development/gocode/src/github.com/couchbaselabs/sg-replicate/replication_state.go:53 +0xb1d
</code></pre>

<p>  github.com/couchbaselabs/sg-replicate.(*Replication).processEvents()</p>

<pre><code>  /Users/tleyden/Development/gocode/src/github.com/couchbaselabs/sg-replicate/synctube.go:120 +0xa3
</code></pre>

<p>Previous read by goroutine 27:
  github.com/couchbaselabs/sg-replicate.(*Replication).GetStats()</p>

<pre><code>  &lt;autogenerated&gt;:24 +0xef
</code></pre>

<p>  github.com/couchbase/sync_gateway/base.(*Replicator).populateActiveTaskFromReplication()</p>

<pre><code>  /Users/tleyden/Development/gocode/src/github.com/couchbase/sync_gateway/base/replicator.go:241 +0x145
</code></pre>

<p>```</p>

<p>Goroutine 44 was running this code:</p>

<p>```
func (r *Replication) shutdownEventChannel() {</p>

<pre><code>r.EventChan = nil
</code></pre>

<p>}
```</p>

<p>and nil'ing out the r.EventChan field.</p>

<p>While goroutine 27 was calling this code on the same <code>*Replication</code> instance:</p>

<p>```
func (r Replication) GetStats() ReplicationStats {</p>

<pre><code>return r.Stats
</code></pre>

<p>}
```</p>

<p>It didn&rsquo;t make sense, because they were accessing different fields of the <code>Replication</code> &mdash; one was writing to <code>r.EventChan</code> while the other was reading from <code>r.Stats</code>.</p>

<p>Then I changed the <code>GetStats()</code> method to this:</p>

<p>```
func (r Replication) GetStats() ReplicationStats {</p>

<pre><code>return ReplicationStats{}
</code></pre>

<p>}
```</p>

<p>and it still failed!</p>

<p>I started wandering around the Couchbase office looking for help, and got <a href="https://twitter.com/steveyentweets">Steve Yen</a> to help me.</p>

<p>He was asking me about using a pointer receiver vs a value receiver here, and then we realized that by using a value reciever it was <em>copying</em> all the fields, and therefore <strong>reading</strong> all of the fields, including the <code>r.EventChan</code> field that the other goroutine was concurrently writing to!  Hence, the data race that was subtly caused by using a value receiver..</p>

<p>The fix was to convert this over to a pointer reciever, and the data race disappeared!</p>

<p>```
func (r *Replication) GetStats() ReplicationStats {</p>

<pre><code> return r.Stats
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding vendoring to a Go project]]></title>
    <link href="http://tleyden.github.io/blog/2016/02/08/adding-vendoring-to-a-go-project/"/>
    <updated>2016-02-08T22:49:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2016/02/08/adding-vendoring-to-a-go-project</id>
    <content type="html"><![CDATA[<h2>Install gvt</h2>

<p>After doing some research, I decided to try <code>gvt</code> since it seemed simple and well documented, and integrated well with exiting tools like <code>go get</code>.</p>

<p><code>
$ export GO15VENDOREXPERIMENT=1
$ go get -u github.com/FiloSottile/gvt
</code></p>

<h2>Go get target project to be updated</h2>

<p>I&rsquo;m going to update <a href="https://github.com/tleyden/todolite-appserver">todolite-appserver</a> to use vendored dependencies for <em>some</em> of it&rsquo;s dependencies, just to see how things go.</p>

<p><code>
$ go get -u github.com/tleyden/todolite-appserver
</code></p>

<h2>Vendor dependencies</h2>

<p>I&rsquo;m going to vendor the dependency on <a href="github.com/alecthomas/kingpin">kingpin</a> since it has transitive dependencies of it&rsquo;s own (github.com/alecthomas/units, etc).  <code>gvt</code> handles this by automatically pulling all of the transitive dependencies.</p>

<p><code>
$ gvt fetch github.com/alecthomas/kingpin
</code></p>

<p>Now my directory structure looks like this:</p>

<p>```
├── main.go
└── vendor</p>

<pre><code>├── github.com
│   └── alecthomas
├── gopkg.in
│   └── alecthomas
└── manifest
</code></pre>

<p>```</p>

<p>Here is the <a href="https://gist.github.com/tleyden/60328c7e0fd778970314">manifest</a></p>

<p><code>gvt list</code> shows the following:</p>

<p><code>
$  gvt list
github.com/alecthomas/kingpin  https://github.com/alecthomas/kingpin  master 46aba6af542541c54c5b7a71a9dfe8f2ab95b93a
github.com/alecthomas/template https://github.com/alecthomas/template master 14fd436dd20c3cc65242a9f396b61bfc8a3926fc
github.com/alecthomas/units    https://github.com/alecthomas/units    master 2efee857e7cfd4f3d0138cc3cbb1b4966962b93a
gopkg.in/alecthomas/kingpin.v2 https://gopkg.in/alecthomas/kingpin.v2 master 24b74030480f0aa98802b51ff4622a7eb09dfddd
</code></p>

<h2>Verify it&rsquo;s using the vendor folder</h2>

<p>I opened up the <code>vendor/github.com/alecthomas/kingpin/global.go</code> and made the following change:</p>

<p>```
// Errorf prints an error message to stderr.
func Errorf(format string, args &hellip;interface{}) {</p>

<pre><code>fmt.Println("CALLED IT!!")
CommandLine.Errorf(format, args...)
</code></pre>

<p>}
```</p>

<p>Now verify that code is getting compiled and run:</p>

<p><code>
$ go run main.go changesfollower
CALLED IT!!
main: error: URL is empty
</code></p>

<p>(note: <code>export GO15VENDOREXPERIMENT=1</code> is still in effect in my shell)</p>

<h2>Restore the dependency</h2>

<p>Before I check in the <code>vendor</code> directory to git, I want to reset it to it&rsquo;s previous state before I made the above change to the <code>global.go</code> source file.</p>

<p><code>
$ gvt restore
</code></p>

<p>Now if I open <code>global.go</code> again, it&rsquo;s back to it&rsquo;s original state.  Nice!</p>

<h2>Add the vendor folder and push</h2>

<p><code>
$ git add vendor
$ git commit -m "..."
$ git push origin master
</code></p>

<p>Also, I updated the README to tell users to set the <code>GO15VENDOREXPERIMENT=1</code> variable:</p>

<p><code>
$ export GO15VENDOREXPERIMENT=1
$ go get -u github.com/tleyden/todolite-appserver
$ todolite-appserver --help
</code></p>

<p>but the instructions otherwise remained the same.  If someone tries to use this but forgets to set <code>GO15VENDOREXPERIMENT=1</code> in Go 1.5, it will still work, it will just use the kingpin dependency in the <code>$GOPATH</code> rather than the <code>vendor/</code> directory.  Ditto for someone using go 1.4 or earlier.</p>

<h2>Removing a vendored dependency</h2>

<p>As it turns out, I don&rsquo;t even need kingpin in this project, since I&rsquo;m using <a href="https://github.com/spf13/cobra">cobra</a>.  The kingpin dependency was caused by some leftover code I forgot to cleanup.</p>

<p>To remove it, I ran:</p>

<p><code>
$ gvt delete github.com/alecthomas/kingpin
$ gvt delete github.com/alecthomas/template
$ gvt delete github.com/alecthomas/units
$ gvt delete gopkg.in/alecthomas/kingpin.v2
</code></p>

<p>In this case, since it was my only dependency, it was easy to identify the transitive dependencies.  In general though it looks like it&rsquo;s up to you as a user to track down which ones to remove.  I filed <a href="https://github.com/FiloSottile/gvt/issues/16">gvt issue 16</a> to hopefully address that.</p>

<h2>Editor annoyances</h2>

<p>I have emacs setup using the <a href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/">steps in this blog post</a>, and I&rsquo;m running into the following annoyances:</p>

<ul>
<li>When I use <code>godef</code> to jump into the code of vendored dependency, it takes me to source code that lives in the <code>GOPATH</code>, which might be <em>different</em> than what&rsquo;s under <code>vendor/</code>.  Also, if I edit it there, my changes won&rsquo;t be reflected when I rebuild.</li>
<li>I usually search for things in the project via <code>M-x rgrep</code>, but now it&rsquo;s searching through every repo under <code>vendor/</code> and returning things I&rsquo;m not interested in .. since most of the time I only want to search within my project.</li>
</ul>

]]></content>
  </entry>
  
</feed>
